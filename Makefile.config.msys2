# Cyclone Scheme
# Copyright (c) 2014, Justin Ethier
# All rights reserved.
#
# Configuration options for the makefile

& = $(filter-out %.h %.d,$^)

CYC_PROFILING ?= 
#CYC_PROFILING ?= -g -pg

CYC_GCC_OPT_FLAGS ?= -O2
#CYC_GCC_OPT_FLAGS ?= -g

OS = $(shell uname)
CC ?= cc

LIBS = -pthread -lcyclone -lck -lm -lcyclonebn -ldl

# Compiler options
#CFLAGS       ?= -O2 -fPIC -rdynamic -Wall -Iinclude -L. -I/usr/local/include -L/usr/local/lib
LDFLAGS       ?= -L. -L/usr/local/lib
#COMP_CFLAGS  ?= -O2 -fPIC -rdynamic -Wall -I$(PREFIX)/include -L$(PREFIX)/lib
CFLAGS       ?= $(CYC_PROFILING) $(CYC_GCC_OPT_FLAGS) -fPIC -rdynamic -Wall -Iinclude -L. -I/usr/local/include -L/usr/local/lib
BASE_CFLAGS  ?= $(CYC_PROFILING) $(CYC_GCC_OPT_FLAGS) -fPIC -rdynamic -Wall -I$(PREFIX)/include -L. -I/usr/local/include -L/usr/local/lib
# Used by Cyclone to compile programs, no need for PIC there
BASE_PROG_CFLAGS  ?= $(CYC_PROFILING) $(CYC_GCC_OPT_FLAGS) -Wall -I$(PREFIX)/include
COMP_CFLAGS  ?= $(BASE_CFLAGS) -L$(PREFIX)/lib
COMP_PROG_CFLAGS  ?= $(BASE_PROG_CFLAGS) -L$(PREFIX)/lib

LIBRARY_OUTPUT_FILE = libcyclone.a
CREATE_LIBRARY_COMMAND = $(AR)
CREATE_LIBRARY_FLAGS = rcs

# Commands "baked into" cyclone for invoking the C compiler
CC_PROG ?= "$(CC) ~src-file~ $(COMP_CFLAGS) -c -o ~exec-file~.o"
CC_EXEC ?= "$(CC) ~exec-file~.o ~obj-files~ $(LIBS) $(COMP_CFLAGS) -o ~exec-file~"
CC_LIB  ?= "$(CC) ~src-file~ $(COMP_CFLAGS) -c -o ~exec-file~.o"
#CC_SO   ?= "$(CC) -shared -rdynamic -o ~exec-file~.so ~exec-file~.o"
CC_SO   ?= "$(CC) -Wl,-undefined -shared -rdynamic -o ~exec-file~.so ~exec-file~.o"

AR        ?= ar
#CD        ?= cd
RM        ?= rm -f
#LS        ?= ls
#CP        ?= cp
#LN        ?= ln
INSTALL   ?= install
MKDIR     ?= $(INSTALL) -d
RMDIR     ?= rmdir

PREFIX    ?= /usr/local
BINDIR    ?= $(PREFIX)/bin
LIBDIR    ?= $(PREFIX)/lib
INCDIR    ?= $(PREFIX)/include/cyclone
DATADIR   ?= $(PREFIX)/share/cyclone

DESTDIR   ?=

# Automatically detect platform-specific flags, instead of using autoconf
#CYC_PLATFORM_HAS_MEMSTREAM ?= 1
CYC_PLATFORM_HAS_MEMSTREAM := $(shell echo "main(){char *buf; int len; open_memstream(&buf, &len);}" | gcc -xc - >/dev/null 2>/dev/null && echo 1 || echo 0)
CYC_PLATFORM_HAS_FMEMOPEN := $(shell echo "main(){char *buf; fmemopen(&buf, 0, \"r\");}" | gcc -xc - >/dev/null 2>/dev/null && echo 1 || echo 0)

# code from chibi's makefile to detect platform
ifndef PLATFORM
ifeq ($(shell uname),Darwin)
PLATFORM=macosx
else
ifeq ($(shell uname),FreeBSD)
PLATFORM=bsd
else
ifeq ($(shell uname),NetBSD)
PLATFORM=bsd
else
ifeq ($(shell uname),OpenBSD)
PLATFORM=bsd
else
ifeq ($(shell uname),DragonFly)
PLATFORM=bsd
else
ifeq ($(shell uname -o),Msys)
PLATFORM=mingw
SOLIBDIR = $(BINDIR)
DIFFOPTS = -b
else
ifeq ($(shell uname -o),Cygwin)
PLATFORM=cygwin
SOLIBDIR = $(BINDIR)
DIFFOPTS = -b
else
ifeq ($(shell uname -o),GNU/Linux)
PLATFORM=linux
else
PLATFORM=unix
endif
endif
endif
endif
endif
endif
endif
endif
endif
