;; This file was automatically generated by the Cyclone Scheme compiler
((c-define lambda (expr rename compare) (let* ((scm-fnc (cadr expr)) (c-fnc (cadddr expr)) (rv-type (caddr expr)) (arg-types (cddddr expr)) (arg-syms/unbox (map (lambda (type) (let ((var (mangle (gensym (quote arg))))) (cons var (scm->c var type)))) arg-types)) (returns (c->scm (string-append c-fnc "(" (string-join (map cdr arg-syms/unbox) ",") ")") rv-type)) (return-alloc (car returns)) (return-expr (cdr returns)) (args (string-append "(void *data, int argc, closure _, object k " (apply string-append (map (lambda (sym/unbox) (string-append ", object " (car sym/unbox))) arg-syms/unbox)) ")")) (body (string-append return-alloc "return_closcall1(data, k, " return-expr ");"))) (quasiquote (define-c (unquote scm-fnc) (unquote args) (unquote body))))) (c->scm lambda (expr rename compare) (let ((code (cadr expr)) (type (caddr expr))) (quasiquote (case (if (string? (unquote type)) (string->symbol (unquote type)) (unquote type)) ((int integer) (cons "" (string-append "obj_int2obj(" (unquote code) ")"))) ((float double) (let ((var (mangle (gensym (quote var))))) (cons (string-append "make_double(" var ", " (unquote code) ");") (string-append "&" var)))) ((bool) (cons "" (string-append "(" (unquote code) " == 0 ? boolean_f : boolean_t)"))) ((char) (cons "" (string-append "obj_char2obj(" (unquote code) ")"))) ((string) (let ((var (mangle (gensym (quote var))))) (cons (string-append "make_double(" var ", " (unquote code) ");") (string-append "&" var)))) (else (error "c->scm unable to convert C object of type " (unquote type))))))) (scm->c lambda (expr rename compare) (let ((code (cadr expr)) (type (caddr expr))) (quasiquote (case (unquote type) ((int integer) (string-append "obj_obj2int(" (unquote code) ")")) ((double float) (string-append "double_value(" (unquote code) ")")) ((bignum bigint) (string-append "bignum_value(" (unquote code) ")")) ((bool) (string-append "(" (unquote code) " == boolean_f)")) ((char) (string-append "obj_obj2char(" (unquote code) ")")) ((string) (string-append "string_str(" (unquote code) ")")) ((symbol) (string-append "symbol_desc(" (unquote code) ")")) ((bytevector) (string-append "(((bytevector_type *)" (unquote code) ")->data)")) ((opaque) (string-append "opaque_ptr(" (unquote code) ")")) (else (error "scm->c unable to convert scheme object of type " (unquote type))))))) (c-code lambda (expr rename compare) (for-each (lambda (arg) (if (not (string? arg)) (error "c-code" "Invalid argument: string expected, received " arg))) (cdr expr)) (quasiquote (Cyc-foreign-code (unquote-splicing (cdr expr))))) (c-value lambda (expr rename compare) (let* ((code-arg (cadr expr)) (type-arg (caddr expr))) (quasiquote ((lambda () (Cyc-foreign-value (unquote code-arg) (unquote (symbol->string type-arg)))))))))