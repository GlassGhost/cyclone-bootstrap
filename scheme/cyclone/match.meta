;; This file was automatically generated by the Cyclone Scheme compiler
((match-check-identifier lambda (expr rename compare) (if (symbol? (cadr expr)) (car (cddr expr)) (cadr (cddr expr)))) (match-check-ellipsis lambda (expr rename compare) (if (compare (quote ...) (cadr expr)) (car (cddr expr)) (cadr (cddr expr)))) (match-let* lambda (expr$8253$8275 rename$8254$8274 compare$8255$8273) (car ((lambda (tmp$8277$8285) (if tmp$8277$8285 tmp$8277$8285 ((lambda (tmp$8287$8307) (if tmp$8287$8307 tmp$8287$8307 (cons (error "no expansion for" expr$8253$8275) #f))) ((lambda (v.1$8261$8289) (if (pair? v.1$8261$8289) ((lambda (v.2$8262$8291) (if (pair? v.2$8262$8291) ((lambda (v.3$8263$8293) (if (pair? v.3$8263$8293) ((lambda (v.4$8264$8295) ((lambda (pat$8296) ((lambda (v.5$8265$8297) (if (pair? v.5$8265$8297) ((lambda (v.6$8266$8299) ((lambda (expr$8300) ((lambda (v.7$8267$8301) (if (null? v.7$8267$8301) ((lambda (v.8$8268$8303) ((lambda (rest$8304) ((lambda (v.9$8269$8305) ((lambda (body$8306) (cons (cons-source (rename$8254$8274 (quote match)) (cons-source expr$8300 (cons-source (cons-source pat$8296 (cons-source (cons-source (rename$8254$8274 (quote match-let*)) (cons-source rest$8304 body$8306 (quote (rest . body))) (quote (match-let* rest . body))) (quote ()) (quote ((match-let* rest . body)))) (quote (pat (match-let* rest . body)))) (quote ()) (quote ((pat (match-let* rest . body))))) (quote (expr (pat (match-let* rest . body))))) (quote (match expr (pat (match-let* rest . body))))) #f)) v.9$8269$8305)) (cdr v.1$8261$8289))) v.8$8268$8303)) (cdr v.2$8262$8291)) #f)) (cdr v.5$8265$8297))) v.6$8266$8299)) (car v.5$8265$8297)) #f)) (cdr v.3$8263$8293))) v.4$8264$8295)) (car v.3$8263$8293)) #f)) (car v.2$8262$8291)) #f)) (car v.1$8261$8289)) #f)) (cdr expr$8253$8275))))) ((lambda (v.10$8270$8279) (if (pair? v.10$8270$8279) ((lambda (v.11$8271$8281) (if (null? v.11$8271$8281) ((lambda (v.12$8272$8283) ((lambda (body$8284) (cons (cons-source (rename$8254$8274 (quote let)) (cons-source (quote ()) body$8284 (quote (() . body))) (quote (let () . body))) #f)) v.12$8272$8283)) (cdr v.10$8270$8279)) #f)) (car v.10$8270$8279)) #f)) (cdr expr$8253$8275))))) (match-named-let lambda (expr$8065$8107 rename$8066$8106 compare$8067$8105) (car ((lambda (tmp$8109$8156) (if tmp$8109$8156 tmp$8109$8156 ((lambda (tmp$8158$8188) (if tmp$8158$8188 tmp$8158$8188 (cons (error "no expansion for" expr$8065$8107) #f))) ((lambda (v.1$8073$8160) (if (pair? v.1$8073$8160) ((lambda (v.2$8074$8162) ((lambda (loop$8163) ((lambda (v.3$8075$8164) (if (pair? v.3$8075$8164) ((lambda (v.4$8076$8166) (if (list? v.4$8076$8166) ((lambda (v$8168) ((lambda (v.5$8077$8169) (if (pair? v.5$8077$8169) ((lambda (v.6$8078$8171) (if (pair? v.6$8078$8171) ((lambda (v.7$8079$8173) (if (pair? v.7$8079$8173) ((lambda (v.8$8080$8175) ((lambda (pat$8176) ((lambda (v.9$8081$8177) (if (pair? v.9$8081$8177) ((lambda (v.10$8082$8179) ((lambda (expr$8180) ((lambda (v.11$8083$8181) (if (null? v.11$8083$8181) ((lambda (v.12$8084$8183) ((lambda (rest$8184) ((lambda (v.13$8085$8185) ((lambda (body$8186) (cons (cons-source (rename$8066$8106 (quote match-named-let)) (cons-source loop$8163 (cons-source (append (map (lambda (v$8187) v$8187) v$8168) (cons-source (cons-source pat$8176 (cons-source expr$8180 (cons-source (rename$8066$8106 (quote tmp)) (quote ()) (quote (tmp))) (quote (expr tmp))) (quote (pat expr tmp))) (quote ()) (quote ((pat expr tmp))))) (cons-source rest$8184 body$8186 (quote (rest . body))) (quote ((v ... (pat expr tmp)) rest . body))) (quote (loop (v ... (pat expr tmp)) rest . body))) (quote (match-named-let loop (v ... (pat expr tmp)) rest . body))) #f)) v.13$8085$8185)) (cdr v.5$8077$8169))) v.12$8084$8183)) (cdr v.6$8078$8171)) #f)) (cdr v.9$8081$8177))) v.10$8082$8179)) (car v.9$8081$8177)) #f)) (cdr v.7$8079$8173))) v.8$8080$8175)) (car v.7$8079$8173)) #f)) (car v.6$8078$8171)) #f)) (car v.5$8077$8169)) #f)) (cdr v.3$8075$8164))) v.4$8076$8166) #f)) (car v.3$8075$8164)) #f)) (cdr v.1$8073$8160))) v.2$8074$8162)) (car v.1$8073$8160)) #f)) (cdr expr$8065$8107))))) ((lambda (v.14$8086$8111) (if (pair? v.14$8086$8111) ((lambda (v.15$8087$8113) ((lambda (loop$8114) ((lambda (v.16$8088$8115) (if (pair? v.16$8088$8115) ((lambda (v.17$8089$8117) ((lambda (w.18$8090$8122 pat-ls22$8094$8121 expr-ls21$8093$8120 var-ls20$8092$8119) ((lambda (lp.19$8091$8123) (set! lp.19$8091$8123 (lambda (w.18$8090$8127 pat-ls22$8094$8126 expr-ls21$8093$8125 var-ls20$8092$8124) (if (null? w.18$8090$8127) ((lambda (pat$8130 expr$8129 var$8128) ((lambda (v.30$8102$8131) (if (pair? v.30$8102$8131) ((lambda (v.31$8103$8133) (if (null? v.31$8103$8133) ((lambda (v.32$8104$8135) ((lambda (body$8136) (cons (cons-source (rename$8066$8106 (quote let)) (cons-source loop$8114 (cons-source (map (lambda (var$8140 expr$8139) (cons-source var$8140 (cons-source expr$8139 (quote ()) (quote (expr))) (quote (var expr)))) var$8128 expr$8129) (cons-source (cons-source (rename$8066$8106 (quote match-let)) (cons-source (map (lambda (pat$8138 var$8137) (cons-source pat$8138 (cons-source var$8137 (quote ()) (quote (var))) (quote (pat var)))) pat$8130 var$8128) body$8136 (quote (((pat var) ...) . body))) (quote (match-let ((pat var) ...) . body))) (quote ()) (quote ((match-let ((pat var) ...) . body)))) (quote (((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (loop ((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (let loop ((var expr) ...) (match-let ((pat var) ...) . body)))) #f)) v.32$8104$8135)) (cdr v.30$8102$8131)) #f)) (car v.30$8102$8131)) #f)) (cdr v.16$8088$8115))) (reverse pat-ls22$8094$8126) (reverse expr-ls21$8093$8125) (reverse var-ls20$8092$8124)) (if (pair? w.18$8090$8127) ((lambda (v.23$8095$8142) (if (pair? v.23$8095$8142) ((lambda (v.24$8096$8144) ((lambda (pat$8145) ((lambda (v.25$8097$8146) (if (pair? v.25$8097$8146) ((lambda (v.26$8098$8148) ((lambda (expr$8149) ((lambda (v.27$8099$8150) (if (pair? v.27$8099$8150) ((lambda (v.28$8100$8152) ((lambda (var$8153) ((lambda (v.29$8101$8154) (if (null? v.29$8101$8154) (lp.19$8091$8123 (cdr w.18$8090$8127) (cons pat$8145 pat-ls22$8094$8126) (cons expr$8149 expr-ls21$8093$8125) (cons var$8153 var-ls20$8092$8124)) #f)) (cdr v.27$8099$8150))) v.28$8100$8152)) (car v.27$8099$8150)) #f)) (cdr v.25$8097$8146))) v.26$8098$8148)) (car v.25$8097$8146)) #f)) (cdr v.23$8095$8142))) v.24$8096$8144)) (car v.23$8095$8142)) #f)) (car w.18$8090$8127)) #f)))) (lp.19$8091$8123 w.18$8090$8122 pat-ls22$8094$8121 expr-ls21$8093$8120 var-ls20$8092$8119)) #f)) v.17$8089$8117 (quote ()) (quote ()) (quote ()))) (car v.16$8088$8115)) #f)) (cdr v.14$8086$8111))) v.15$8087$8113)) (car v.14$8086$8111)) #f)) (cdr expr$8065$8107))))) (match-let/helper lambda (expr$7568$7671 rename$7569$7670 compare$7570$7669) (car ((lambda (tmp$7673$7715) (if tmp$7673$7715 tmp$7673$7715 ((lambda (tmp$7717$7781) (if tmp$7717$7781 tmp$7717$7781 ((lambda (tmp$7783$7823) (if tmp$7783$7823 tmp$7783$7823 ((lambda (tmp$7825$7864) (if tmp$7825$7864 tmp$7825$7864 ((lambda (tmp$7866$7901) (if tmp$7866$7901 tmp$7866$7901 (cons (error "no expansion for" expr$7568$7671) #f))) ((lambda (v.1$7576$7868) (if (pair? v.1$7576$7868) ((lambda (v.2$7577$7870) ((lambda (let$7871) ((lambda (v.3$7578$7872) (if (pair? v.3$7578$7872) ((lambda (v.4$7579$7874) (if (list? v.4$7579$7874) ((lambda (v$7876) ((lambda (v.5$7580$7877) (if (pair? v.5$7580$7877) ((lambda (v.6$7581$7879) (if (list? v.6$7581$7879) ((lambda (p$7881) ((lambda (v.7$7582$7882) (if (pair? v.7$7582$7882) ((lambda (v.8$7583$7884) (if (pair? v.8$7583$7884) ((lambda (v.9$7584$7886) (if (pair? v.9$7584$7886) ((lambda (v.10$7585$7888) ((lambda (a$7889) ((lambda (v.11$7586$7890) (if (pair? v.11$7586$7890) ((lambda (v.12$7587$7892) ((lambda (expr$7893) ((lambda (v.13$7588$7894) (if (null? v.13$7588$7894) ((lambda (v.14$7589$7896) ((lambda (rest$7897) ((lambda (v.15$7590$7898) ((lambda (body$7899) (cons (cons-source (rename$7569$7670 (quote match-let/helper)) (cons-source let$7871 (cons-source (append (map (lambda (v$7900) v$7900) v$7876) (cons-source (cons-source a$7889 (cons-source expr$7893 (quote ()) (quote (expr))) (quote (a expr))) (quote ()) (quote ((a expr))))) (cons-source p$7881 (cons-source rest$7897 body$7899 (quote (rest . body))) (quote ((p ...) rest . body))) (quote ((v ... (a expr)) (p ...) rest . body))) (quote (let (v ... (a expr)) (p ...) rest . body))) (quote (match-let/helper let (v ... (a expr)) (p ...) rest . body))) #f)) v.15$7590$7898)) (cdr v.7$7582$7882))) v.14$7589$7896)) (cdr v.8$7583$7884)) #f)) (cdr v.11$7586$7890))) v.12$7587$7892)) (car v.11$7586$7890)) #f)) (cdr v.9$7584$7886))) v.10$7585$7888)) (car v.9$7584$7886)) #f)) (car v.8$7583$7884)) #f)) (car v.7$7582$7882)) #f)) (cdr v.5$7580$7877))) v.6$7581$7879) #f)) (car v.5$7580$7877)) #f)) (cdr v.3$7578$7872))) v.4$7579$7874) #f)) (car v.3$7578$7872)) #f)) (cdr v.1$7576$7868))) v.2$7577$7870)) (car v.1$7576$7868)) #f)) (cdr expr$7568$7671))))) ((lambda (v.16$7591$7827) (if (pair? v.16$7591$7827) ((lambda (v.17$7592$7829) ((lambda (let$7830) ((lambda (v.18$7593$7831) (if (pair? v.18$7593$7831) ((lambda (v.19$7594$7833) (if (list? v.19$7594$7833) ((lambda (v$7835) ((lambda (v.20$7595$7836) (if (pair? v.20$7595$7836) ((lambda (v.21$7596$7838) (if (list? v.21$7596$7838) ((lambda (p$7840) ((lambda (v.22$7597$7841) (if (pair? v.22$7597$7841) ((lambda (v.23$7598$7843) (if (pair? v.23$7598$7843) ((lambda (v.24$7599$7845) (if (pair? v.24$7599$7845) ((lambda (v.25$7600$7847) (if (vector? v.25$7600$7847) ((lambda (v.26$7601$7849) (if (list? v.26$7601$7849) ((lambda (a$7851) ((lambda (v.27$7602$7852) (if (pair? v.27$7602$7852) ((lambda (v.28$7603$7854) ((lambda (expr$7855) ((lambda (v.29$7604$7856) (if (null? v.29$7604$7856) ((lambda (v.30$7605$7858) ((lambda (rest$7859) ((lambda (v.31$7606$7860) ((lambda (body$7861) (cons (cons-source (rename$7569$7670 (quote match-let/helper)) (cons-source let$7830 (cons-source (append (map (lambda (v$7863) v$7863) v$7835) (cons-source (cons-source (rename$7569$7670 (quote tmp)) (cons-source expr$7855 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$7862) p$7862) p$7840) (cons-source (cons-source (list->vector a$7851) (cons-source (rename$7569$7670 (quote tmp)) (quote ()) (quote (tmp))) (quote (#(a ...) tmp))) (quote ()) (quote ((#(a ...) tmp))))) (cons-source rest$7859 body$7861 (quote (rest . body))) (quote ((p ... (#(a ...) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) (quote (let (v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) (quote (match-let/helper let (v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) #f)) v.31$7606$7860)) (cdr v.22$7597$7841))) v.30$7605$7858)) (cdr v.23$7598$7843)) #f)) (cdr v.27$7602$7852))) v.28$7603$7854)) (car v.27$7602$7852)) #f)) (cdr v.24$7599$7845))) v.26$7601$7849) #f)) (vector->list v.25$7600$7847)) #f)) (car v.24$7599$7845)) #f)) (car v.23$7598$7843)) #f)) (car v.22$7597$7841)) #f)) (cdr v.20$7595$7836))) v.21$7596$7838) #f)) (car v.20$7595$7836)) #f)) (cdr v.18$7593$7831))) v.19$7594$7833) #f)) (car v.18$7593$7831)) #f)) (cdr v.16$7591$7827))) v.17$7592$7829)) (car v.16$7591$7827)) #f)) (cdr expr$7568$7671))))) ((lambda (v.32$7607$7785) (if (pair? v.32$7607$7785) ((lambda (v.33$7608$7787) ((lambda (let$7788) ((lambda (v.34$7609$7789) (if (pair? v.34$7609$7789) ((lambda (v.35$7610$7791) (if (list? v.35$7610$7791) ((lambda (v$7793) ((lambda (v.36$7611$7794) (if (pair? v.36$7611$7794) ((lambda (v.37$7612$7796) (if (list? v.37$7612$7796) ((lambda (p$7798) ((lambda (v.38$7613$7799) (if (pair? v.38$7613$7799) ((lambda (v.39$7614$7801) (if (pair? v.39$7614$7801) ((lambda (v.40$7615$7803) (if (pair? v.40$7615$7803) ((lambda (v.41$7616$7805) (if (pair? v.41$7616$7805) ((lambda (v.42$7617$7807) ((lambda (a$7808) ((lambda (v.43$7618$7809) ((lambda (b$7810) ((lambda (v.44$7619$7811) (if (pair? v.44$7619$7811) ((lambda (v.45$7620$7813) ((lambda (expr$7814) ((lambda (v.46$7621$7815) (if (null? v.46$7621$7815) ((lambda (v.47$7622$7817) ((lambda (rest$7818) ((lambda (v.48$7623$7819) ((lambda (body$7820) (cons (cons-source (rename$7569$7670 (quote match-let/helper)) (cons-source let$7788 (cons-source (append (map (lambda (v$7822) v$7822) v$7793) (cons-source (cons-source (rename$7569$7670 (quote tmp)) (cons-source expr$7814 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$7821) p$7821) p$7798) (cons-source (cons-source (cons-source a$7808 b$7810 (quote (a . b))) (cons-source (rename$7569$7670 (quote tmp)) (quote ()) (quote (tmp))) (quote ((a . b) tmp))) (quote ()) (quote (((a . b) tmp))))) (cons-source rest$7818 body$7820 (quote (rest . body))) (quote ((p ... ((a . b) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) (quote (let (v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) (quote (match-let/helper let (v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) #f)) v.48$7623$7819)) (cdr v.38$7613$7799))) v.47$7622$7817)) (cdr v.39$7614$7801)) #f)) (cdr v.44$7619$7811))) v.45$7620$7813)) (car v.44$7619$7811)) #f)) (cdr v.40$7615$7803))) v.43$7618$7809)) (cdr v.41$7616$7805))) v.42$7617$7807)) (car v.41$7616$7805)) #f)) (car v.40$7615$7803)) #f)) (car v.39$7614$7801)) #f)) (car v.38$7613$7799)) #f)) (cdr v.36$7611$7794))) v.37$7612$7796) #f)) (car v.36$7611$7794)) #f)) (cdr v.34$7609$7789))) v.35$7610$7791) #f)) (car v.34$7609$7789)) #f)) (cdr v.32$7607$7785))) v.33$7608$7787)) (car v.32$7607$7785)) #f)) (cdr expr$7568$7671))))) ((lambda (v.49$7624$7719) (if (pair? v.49$7624$7719) ((lambda (v.50$7625$7721) ((lambda (let$7722) ((lambda (v.51$7626$7723) (if (pair? v.51$7626$7723) ((lambda (v.52$7627$7725) ((lambda (w.53$7628$7729 var-ls56$7631$7728 expr-ls55$7630$7727) ((lambda (lp.54$7629$7730) (set! lp.54$7629$7730 (lambda (w.53$7628$7733 var-ls56$7631$7732 expr-ls55$7630$7731) (if (null? w.53$7628$7733) ((lambda (var$7735 expr$7734) ((lambda (v.62$7637$7736) (if (pair? v.62$7637$7736) ((lambda (v.63$7638$7738) ((lambda (w.64$7639$7742 pat-ls67$7642$7741 tmp-ls66$7641$7740) ((lambda (lp.65$7640$7743) (set! lp.65$7640$7743 (lambda (w.64$7639$7746 pat-ls67$7642$7745 tmp-ls66$7641$7744) (if (null? w.64$7639$7746) ((lambda (pat$7748 tmp$7747) ((lambda (v.73$7648$7749) (if (pair? v.73$7648$7749) ((lambda (v.74$7649$7751) (if (null? v.74$7649$7751) ((lambda (v.75$7650$7753) ((lambda (body$7754) (cons (cons-source let$7722 (cons-source (map (lambda (var$7758 expr$7757) (cons-source var$7758 (cons-source expr$7757 (quote ()) (quote (expr))) (quote (var expr)))) var$7735 expr$7734) (cons-source (cons-source (rename$7569$7670 (quote match-let*)) (cons-source (map (lambda (pat$7756 tmp$7755) (cons-source pat$7756 (cons-source tmp$7755 (quote ()) (quote (tmp))) (quote (pat tmp)))) pat$7748 tmp$7747) body$7754 (quote (((pat tmp) ...) . body))) (quote (match-let* ((pat tmp) ...) . body))) (quote ()) (quote ((match-let* ((pat tmp) ...) . body)))) (quote (((var expr) ...) (match-let* ((pat tmp) ...) . body)))) (quote (let ((var expr) ...) (match-let* ((pat tmp) ...) . body)))) #f)) v.75$7650$7753)) (cdr v.73$7648$7749)) #f)) (car v.73$7648$7749)) #f)) (cdr v.62$7637$7736))) (reverse pat-ls67$7642$7745) (reverse tmp-ls66$7641$7744)) (if (pair? w.64$7639$7746) ((lambda (v.68$7643$7760) (if (pair? v.68$7643$7760) ((lambda (v.69$7644$7762) ((lambda (pat$7763) ((lambda (v.70$7645$7764) (if (pair? v.70$7645$7764) ((lambda (v.71$7646$7766) ((lambda (tmp$7767) ((lambda (v.72$7647$7768) (if (null? v.72$7647$7768) (lp.65$7640$7743 (cdr w.64$7639$7746) (cons pat$7763 pat-ls67$7642$7745) (cons tmp$7767 tmp-ls66$7641$7744)) #f)) (cdr v.70$7645$7764))) v.71$7646$7766)) (car v.70$7645$7764)) #f)) (cdr v.68$7643$7760))) v.69$7644$7762)) (car v.68$7643$7760)) #f)) (car w.64$7639$7746)) #f)))) (lp.65$7640$7743 w.64$7639$7742 pat-ls67$7642$7741 tmp-ls66$7641$7740)) #f)) v.63$7638$7738 (quote ()) (quote ()))) (car v.62$7637$7736)) #f)) (cdr v.51$7626$7723))) (reverse var-ls56$7631$7732) (reverse expr-ls55$7630$7731)) (if (pair? w.53$7628$7733) ((lambda (v.57$7632$7771) (if (pair? v.57$7632$7771) ((lambda (v.58$7633$7773) ((lambda (var$7774) ((lambda (v.59$7634$7775) (if (pair? v.59$7634$7775) ((lambda (v.60$7635$7777) ((lambda (expr$7778) ((lambda (v.61$7636$7779) (if (null? v.61$7636$7779) (lp.54$7629$7730 (cdr w.53$7628$7733) (cons var$7774 var-ls56$7631$7732) (cons expr$7778 expr-ls55$7630$7731)) #f)) (cdr v.59$7634$7775))) v.60$7635$7777)) (car v.59$7634$7775)) #f)) (cdr v.57$7632$7771))) v.58$7633$7773)) (car v.57$7632$7771)) #f)) (car w.53$7628$7733)) #f)))) (lp.54$7629$7730 w.53$7628$7729 var-ls56$7631$7728 expr-ls55$7630$7727)) #f)) v.52$7627$7725 (quote ()) (quote ()))) (car v.51$7626$7723)) #f)) (cdr v.49$7624$7719))) v.50$7625$7721)) (car v.49$7624$7719)) #f)) (cdr expr$7568$7671))))) ((lambda (v.76$7651$7675) (if (pair? v.76$7651$7675) ((lambda (v.77$7652$7677) ((lambda (let$7678) ((lambda (v.78$7653$7679) (if (pair? v.78$7653$7679) ((lambda (v.79$7654$7681) ((lambda (w.80$7655$7685 var-ls83$7658$7684 expr-ls82$7657$7683) ((lambda (lp.81$7656$7686) (set! lp.81$7656$7686 (lambda (w.80$7655$7689 var-ls83$7658$7688 expr-ls82$7657$7687) (if (null? w.80$7655$7689) ((lambda (var$7691 expr$7690) ((lambda (v.89$7664$7692) (if (pair? v.89$7664$7692) ((lambda (v.90$7665$7694) (if (null? v.90$7665$7694) ((lambda (v.91$7666$7696) (if (pair? v.91$7666$7696) ((lambda (v.92$7667$7698) (if (null? v.92$7667$7698) ((lambda (v.93$7668$7700) ((lambda (body$7701) (cons (cons-source let$7678 (cons-source (map (lambda (var$7703 expr$7702) (cons-source var$7703 (cons-source expr$7702 (quote ()) (quote (expr))) (quote (var expr)))) var$7691 expr$7690) body$7701 (quote (((var expr) ...) . body))) (quote (let ((var expr) ...) . body))) #f)) v.93$7668$7700)) (cdr v.91$7666$7696)) #f)) (car v.91$7666$7696)) #f)) (cdr v.89$7664$7692)) #f)) (car v.89$7664$7692)) #f)) (cdr v.78$7653$7679))) (reverse var-ls83$7658$7688) (reverse expr-ls82$7657$7687)) (if (pair? w.80$7655$7689) ((lambda (v.84$7659$7705) (if (pair? v.84$7659$7705) ((lambda (v.85$7660$7707) ((lambda (var$7708) ((lambda (v.86$7661$7709) (if (pair? v.86$7661$7709) ((lambda (v.87$7662$7711) ((lambda (expr$7712) ((lambda (v.88$7663$7713) (if (null? v.88$7663$7713) (lp.81$7656$7686 (cdr w.80$7655$7689) (cons var$7708 var-ls83$7658$7688) (cons expr$7712 expr-ls82$7657$7687)) #f)) (cdr v.86$7661$7709))) v.87$7662$7711)) (car v.86$7661$7709)) #f)) (cdr v.84$7659$7705))) v.85$7660$7707)) (car v.84$7659$7705)) #f)) (car w.80$7655$7689)) #f)))) (lp.81$7656$7686 w.80$7655$7685 var-ls83$7658$7684 expr-ls82$7657$7683)) #f)) v.79$7654$7681 (quote ()) (quote ()))) (car v.78$7653$7679)) #f)) (cdr v.76$7651$7675))) v.77$7652$7677)) (car v.76$7651$7675)) #f)) (cdr expr$7568$7671))))) (match-letrec lambda (expr$7483$7505 rename$7484$7504 compare$7485$7503) (car ((lambda (tmp$7507$7537) (if tmp$7507$7537 tmp$7507$7537 (cons (error "no expansion for" expr$7483$7505) #f))) ((lambda (v.1$7491$7509) (if (pair? v.1$7491$7509) ((lambda (v.2$7492$7511) ((lambda (w.3$7493$7515 var-ls6$7496$7514 value-ls5$7495$7513) ((lambda (lp.4$7494$7516) (set! lp.4$7494$7516 (lambda (w.3$7493$7519 var-ls6$7496$7518 value-ls5$7495$7517) (if (null? w.3$7493$7519) ((lambda (var$7521 value$7520) ((lambda (v.12$7502$7522) ((lambda (body$7523) (cons (cons-source (rename$7484$7504 (quote match-let/helper)) (cons-source (rename$7484$7504 (quote letrec)) (cons-source (quote ()) (cons-source (quote ()) (cons-source (map (lambda (var$7525 value$7524) (cons-source var$7525 (cons-source value$7524 (quote ()) (quote (value))) (quote (var value)))) var$7521 value$7520) body$7523 (quote (((var value) ...) . body))) (quote (() ((var value) ...) . body))) (quote (() () ((var value) ...) . body))) (quote (letrec () () ((var value) ...) . body))) (quote (match-let/helper letrec () () ((var value) ...) . body))) #f)) v.12$7502$7522)) (cdr v.1$7491$7509))) (reverse var-ls6$7496$7518) (reverse value-ls5$7495$7517)) (if (pair? w.3$7493$7519) ((lambda (v.7$7497$7527) (if (pair? v.7$7497$7527) ((lambda (v.8$7498$7529) ((lambda (var$7530) ((lambda (v.9$7499$7531) (if (pair? v.9$7499$7531) ((lambda (v.10$7500$7533) ((lambda (value$7534) ((lambda (v.11$7501$7535) (if (null? v.11$7501$7535) (lp.4$7494$7516 (cdr w.3$7493$7519) (cons var$7530 var-ls6$7496$7518) (cons value$7534 value-ls5$7495$7517)) #f)) (cdr v.9$7499$7531))) v.10$7500$7533)) (car v.9$7499$7531)) #f)) (cdr v.7$7497$7527))) v.8$7498$7529)) (car v.7$7497$7527)) #f)) (car w.3$7493$7519)) #f)))) (lp.4$7494$7516 w.3$7493$7515 var-ls6$7496$7514 value-ls5$7495$7513)) #f)) v.2$7492$7511 (quote ()) (quote ()))) (car v.1$7491$7509)) #f)) (cdr expr$7483$7505))))) (match-let lambda (expr$7322$7358 rename$7323$7357 compare$7324$7356) (car ((lambda (tmp$7360$7390) (if tmp$7360$7390 tmp$7360$7390 ((lambda (tmp$7392$7426) (if tmp$7392$7426 tmp$7392$7426 (cons (error "no expansion for" expr$7322$7358) #f))) ((lambda (v.1$7330$7394) (if (pair? v.1$7330$7394) ((lambda (v.2$7331$7396) ((lambda (loop$7397) ((lambda (v.3$7332$7398) (if (pair? v.3$7332$7398) ((lambda (v.4$7333$7400) ((lambda (w.5$7334$7404 var-ls8$7337$7403 init-ls7$7336$7402) ((lambda (lp.6$7335$7405) (set! lp.6$7335$7405 (lambda (w.5$7334$7408 var-ls8$7337$7407 init-ls7$7336$7406) (if (null? w.5$7334$7408) ((lambda (var$7410 init$7409) ((lambda (v.14$7343$7411) ((lambda (body$7412) (cons (cons-source (rename$7323$7357 (quote match-named-let)) (cons-source loop$7397 (cons-source (quote ()) (cons-source (map (lambda (var$7414 init$7413) (cons-source var$7414 (cons-source init$7413 (quote ()) (quote (init))) (quote (var init)))) var$7410 init$7409) body$7412 (quote (((var init) ...) . body))) (quote (() ((var init) ...) . body))) (quote (loop () ((var init) ...) . body))) (quote (match-named-let loop () ((var init) ...) . body))) #f)) v.14$7343$7411)) (cdr v.3$7332$7398))) (reverse var-ls8$7337$7407) (reverse init-ls7$7336$7406)) (if (pair? w.5$7334$7408) ((lambda (v.9$7338$7416) (if (pair? v.9$7338$7416) ((lambda (v.10$7339$7418) ((lambda (var$7419) ((lambda (v.11$7340$7420) (if (pair? v.11$7340$7420) ((lambda (v.12$7341$7422) ((lambda (init$7423) ((lambda (v.13$7342$7424) (if (null? v.13$7342$7424) (lp.6$7335$7405 (cdr w.5$7334$7408) (cons var$7419 var-ls8$7337$7407) (cons init$7423 init-ls7$7336$7406)) #f)) (cdr v.11$7340$7420))) v.12$7341$7422)) (car v.11$7340$7420)) #f)) (cdr v.9$7338$7416))) v.10$7339$7418)) (car v.9$7338$7416)) #f)) (car w.5$7334$7408)) #f)))) (lp.6$7335$7405 w.5$7334$7404 var-ls8$7337$7403 init-ls7$7336$7402)) #f)) v.4$7333$7400 (quote ()) (quote ()))) (car v.3$7332$7398)) #f)) (cdr v.1$7330$7394))) v.2$7331$7396)) (car v.1$7330$7394)) #f)) (cdr expr$7322$7358))))) ((lambda (v.15$7344$7362) (if (pair? v.15$7344$7362) ((lambda (v.16$7345$7364) ((lambda (w.17$7346$7368 var-ls20$7349$7367 value-ls19$7348$7366) ((lambda (lp.18$7347$7369) (set! lp.18$7347$7369 (lambda (w.17$7346$7372 var-ls20$7349$7371 value-ls19$7348$7370) (if (null? w.17$7346$7372) ((lambda (var$7374 value$7373) ((lambda (v.26$7355$7375) ((lambda (body$7376) (cons (cons-source (rename$7323$7357 (quote match-let/helper)) (cons-source (rename$7323$7357 (quote let)) (cons-source (quote ()) (cons-source (quote ()) (cons-source (map (lambda (var$7378 value$7377) (cons-source var$7378 (cons-source value$7377 (quote ()) (quote (value))) (quote (var value)))) var$7374 value$7373) body$7376 (quote (((var value) ...) . body))) (quote (() ((var value) ...) . body))) (quote (() () ((var value) ...) . body))) (quote (let () () ((var value) ...) . body))) (quote (match-let/helper let () () ((var value) ...) . body))) #f)) v.26$7355$7375)) (cdr v.15$7344$7362))) (reverse var-ls20$7349$7371) (reverse value-ls19$7348$7370)) (if (pair? w.17$7346$7372) ((lambda (v.21$7350$7380) (if (pair? v.21$7350$7380) ((lambda (v.22$7351$7382) ((lambda (var$7383) ((lambda (v.23$7352$7384) (if (pair? v.23$7352$7384) ((lambda (v.24$7353$7386) ((lambda (value$7387) ((lambda (v.25$7354$7388) (if (null? v.25$7354$7388) (lp.18$7347$7369 (cdr w.17$7346$7372) (cons var$7383 var-ls20$7349$7371) (cons value$7387 value-ls19$7348$7370)) #f)) (cdr v.23$7352$7384))) v.24$7353$7386)) (car v.23$7352$7384)) #f)) (cdr v.21$7350$7380))) v.22$7351$7382)) (car v.21$7350$7380)) #f)) (car w.17$7346$7372)) #f)))) (lp.18$7347$7369 w.17$7346$7368 var-ls20$7349$7367 value-ls19$7348$7366)) #f)) v.16$7345$7364 (quote ()) (quote ()))) (car v.15$7344$7362)) #f)) (cdr expr$7322$7358))))) (match-lambda* lambda (expr$7254$7272 rename$7255$7271 compare$7256$7270) (car ((lambda (tmp$7274$7296) (if tmp$7274$7296 tmp$7274$7296 (cons (error "no expansion for" expr$7254$7272) #f))) ((lambda (v.1$7262$7276) ((lambda (w.2$7263$7280 pattern-ls5$7266$7279 body-ls4$7265$7278) ((lambda (lp.3$7264$7281) (set! lp.3$7264$7281 (lambda (w.2$7263$7284 pattern-ls5$7266$7283 body-ls4$7265$7282) (if (null? w.2$7263$7284) ((lambda (pattern$7286 body$7285) (cons (cons-source (rename$7255$7271 (quote lambda)) (cons-source (rename$7255$7271 (quote expr)) (cons-source (cons-source (rename$7255$7271 (quote match)) (cons-source (rename$7255$7271 (quote expr)) (map (lambda (pattern$7288 body$7287) (cons-source pattern$7288 body$7287 (quote (pattern . body)))) pattern$7286 body$7285) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote (expr (match expr (pattern . body) ...)))) (quote (lambda expr (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls5$7266$7283) (reverse body-ls4$7265$7282)) (if (pair? w.2$7263$7284) ((lambda (v.6$7267$7290) (if (pair? v.6$7267$7290) ((lambda (v.7$7268$7292) ((lambda (pattern$7293) ((lambda (v.8$7269$7294) ((lambda (body$7295) (lp.3$7264$7281 (cdr w.2$7263$7284) (cons pattern$7293 pattern-ls5$7266$7283) (cons body$7295 body-ls4$7265$7282))) v.8$7269$7294)) (cdr v.6$7267$7290))) v.7$7268$7292)) (car v.6$7267$7290)) #f)) (car w.2$7263$7284)) #f)))) (lp.3$7264$7281 w.2$7263$7280 pattern-ls5$7266$7279 body-ls4$7265$7278)) #f)) v.1$7262$7276 (quote ()) (quote ()))) (cdr expr$7254$7272))))) (match-lambda lambda (expr$7186$7204 rename$7187$7203 compare$7188$7202) (car ((lambda (tmp$7206$7228) (if tmp$7206$7228 tmp$7206$7228 (cons (error "no expansion for" expr$7186$7204) #f))) ((lambda (v.1$7194$7208) ((lambda (w.2$7195$7212 pattern-ls5$7198$7211 body-ls4$7197$7210) ((lambda (lp.3$7196$7213) (set! lp.3$7196$7213 (lambda (w.2$7195$7216 pattern-ls5$7198$7215 body-ls4$7197$7214) (if (null? w.2$7195$7216) ((lambda (pattern$7218 body$7217) (cons (cons-source (rename$7187$7203 (quote lambda)) (cons-source (cons-source (rename$7187$7203 (quote expr)) (quote ()) (quote (expr))) (cons-source (cons-source (rename$7187$7203 (quote match)) (cons-source (rename$7187$7203 (quote expr)) (map (lambda (pattern$7220 body$7219) (cons-source pattern$7220 body$7219 (quote (pattern . body)))) pattern$7218 body$7217) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote ((expr) (match expr (pattern . body) ...)))) (quote (lambda (expr) (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls5$7198$7215) (reverse body-ls4$7197$7214)) (if (pair? w.2$7195$7216) ((lambda (v.6$7199$7222) (if (pair? v.6$7199$7222) ((lambda (v.7$7200$7224) ((lambda (pattern$7225) ((lambda (v.8$7201$7226) ((lambda (body$7227) (lp.3$7196$7213 (cdr w.2$7195$7216) (cons pattern$7225 pattern-ls5$7198$7215) (cons body$7227 body-ls4$7197$7214))) v.8$7201$7226)) (cdr v.6$7199$7222))) v.7$7200$7224)) (car v.6$7199$7222)) #f)) (car w.2$7195$7216)) #f)))) (lp.3$7196$7213 w.2$7195$7212 pattern-ls5$7198$7211 body-ls4$7197$7210)) #f)) v.1$7194$7208 (quote ()) (quote ()))) (cdr expr$7186$7204))))) (match-extract-quasiquote-vars-step lambda (expr$7055$7087 rename$7056$7086 compare$7057$7085) (car ((lambda (tmp$7089$7140) (if tmp$7089$7140 tmp$7089$7140 (cons (error "no expansion for" expr$7055$7087) #f))) ((lambda (v.1$7063$7091) (if (pair? v.1$7063$7091) ((lambda (v.2$7064$7093) ((lambda (x$7094) ((lambda (v.3$7065$7095) (if (pair? v.3$7065$7095) ((lambda (v.4$7066$7097) ((lambda (k$7098) ((lambda (v.5$7067$7099) (if (pair? v.5$7067$7099) ((lambda (v.6$7068$7101) ((lambda (i$7102) ((lambda (v.7$7069$7103) (if (pair? v.7$7069$7103) ((lambda (v.8$7070$7105) ((lambda (v$7106) ((lambda (v.9$7071$7107) (if (pair? v.9$7071$7107) ((lambda (v.10$7072$7109) ((lambda (d$7110) ((lambda (v.11$7073$7111) (if (pair? v.11$7073$7111) ((lambda (v.12$7074$7113) ((lambda (w.13$7075$7117 v2-ls16$7078$7116 v2-ls-ls15$7077$7115) ((lambda (lp.14$7076$7118) (set! lp.14$7076$7118 (lambda (w.13$7075$7121 v2-ls16$7078$7120 v2-ls-ls15$7077$7119) (if (null? w.13$7075$7121) ((lambda (v2$7123 v2-ls$7122) ((lambda (v.22$7084$7124) (if (null? v.22$7084$7124) (cons (cons-source (rename$7056$7086 (quote match-extract-quasiquote-vars)) (cons-source x$7094 (cons-source k$7098 (cons-source (append (map (lambda (v2$7128) v2$7128) v2$7123) i$7102) (cons-source (append (map (lambda (v2$7127 v2-ls$7126) (cons-source v2$7127 (cons-source v2-ls$7126 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$7123 v2-ls$7122) v$7106) (cons-source d$7110 (quote ()) (quote (d))) (quote (((v2 v2-ls) ... . v) d))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (match-extract-quasiquote-vars x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) #f) #f)) (cdr v.11$7073$7111))) (reverse v2-ls16$7078$7120) (reverse v2-ls-ls15$7077$7119)) (if (pair? w.13$7075$7121) ((lambda (v.17$7079$7130) (if (pair? v.17$7079$7130) ((lambda (v.18$7080$7132) ((lambda (v2$7133) ((lambda (v.19$7081$7134) (if (pair? v.19$7081$7134) ((lambda (v.20$7082$7136) ((lambda (v2-ls$7137) ((lambda (v.21$7083$7138) (if (null? v.21$7083$7138) (lp.14$7076$7118 (cdr w.13$7075$7121) (cons v2$7133 v2-ls16$7078$7120) (cons v2-ls$7137 v2-ls-ls15$7077$7119)) #f)) (cdr v.19$7081$7134))) v.20$7082$7136)) (car v.19$7081$7134)) #f)) (cdr v.17$7079$7130))) v.18$7080$7132)) (car v.17$7079$7130)) #f)) (car w.13$7075$7121)) #f)))) (lp.14$7076$7118 w.13$7075$7117 v2-ls16$7078$7116 v2-ls-ls15$7077$7115)) #f)) v.12$7074$7113 (quote ()) (quote ()))) (car v.11$7073$7111)) #f)) (cdr v.9$7071$7107))) v.10$7072$7109)) (car v.9$7071$7107)) #f)) (cdr v.7$7069$7103))) v.8$7070$7105)) (car v.7$7069$7103)) #f)) (cdr v.5$7067$7099))) v.6$7068$7101)) (car v.5$7067$7099)) #f)) (cdr v.3$7065$7095))) v.4$7066$7097)) (car v.3$7065$7095)) #f)) (cdr v.1$7063$7091))) v.2$7064$7093)) (car v.1$7063$7091)) #f)) (cdr expr$7055$7087))))) (match-extract-quasiquote-vars lambda (expr$6563$6673 rename$6564$6672 compare$6565$6671) (car ((lambda (tmp$6675$6707) (if tmp$6675$6707 tmp$6675$6707 ((lambda (tmp$6709$6741) (if tmp$6709$6741 tmp$6709$6741 ((lambda (tmp$6743$6779) (if tmp$6743$6779 tmp$6743$6779 ((lambda (tmp$6781$6817) (if tmp$6781$6817 tmp$6781$6817 ((lambda (tmp$6819$6847) (if tmp$6819$6847 tmp$6819$6847 ((lambda (tmp$6849$6876) (if tmp$6849$6876 tmp$6849$6876 ((lambda (tmp$6878$6904) (if tmp$6878$6904 tmp$6878$6904 (cons (error "no expansion for" expr$6563$6673) #f))) ((lambda (v.1$6571$6880) (if (pair? v.1$6571$6880) ((lambda (v.2$6572$6882) ((lambda (x$6883) ((lambda (v.3$6573$6884) (if (pair? v.3$6573$6884) ((lambda (v.4$6574$6886) (if (list? v.4$6574$6886) ((lambda (k$6888) ((lambda (v.5$6575$6889) (if (pair? v.5$6575$6889) ((lambda (v.6$6576$6891) ((lambda (i$6892) ((lambda (v.7$6577$6893) (if (pair? v.7$6577$6893) ((lambda (v.8$6578$6895) ((lambda (v$6896) ((lambda (v.9$6579$6897) (if (pair? v.9$6579$6897) ((lambda (v.10$6580$6899) ((lambda (d$6900) ((lambda (v.11$6581$6901) (if (null? v.11$6581$6901) (cons (append (map (lambda (k$6903) k$6903) k$6888) (cons-source v$6896 (quote ()) (quote (v)))) #f) #f)) (cdr v.9$6579$6897))) v.10$6580$6899)) (car v.9$6579$6897)) #f)) (cdr v.7$6577$6893))) v.8$6578$6895)) (car v.7$6577$6893)) #f)) (cdr v.5$6575$6889))) v.6$6576$6891)) (car v.5$6575$6889)) #f)) (cdr v.3$6573$6884))) v.4$6574$6886) #f)) (car v.3$6573$6884)) #f)) (cdr v.1$6571$6880))) v.2$6572$6882)) (car v.1$6571$6880)) #f)) (cdr expr$6563$6673))))) ((lambda (v.12$6582$6851) (if (pair? v.12$6582$6851) ((lambda (v.13$6583$6853) (if (vector? v.13$6583$6853) ((lambda (v.14$6584$6855) (if (list? v.14$6584$6855) ((lambda (x$6857) ((lambda (v.15$6585$6858) (if (pair? v.15$6585$6858) ((lambda (v.16$6586$6860) ((lambda (k$6861) ((lambda (v.17$6587$6862) (if (pair? v.17$6587$6862) ((lambda (v.18$6588$6864) ((lambda (i$6865) ((lambda (v.19$6589$6866) (if (pair? v.19$6589$6866) ((lambda (v.20$6590$6868) ((lambda (v$6869) ((lambda (v.21$6591$6870) (if (pair? v.21$6591$6870) ((lambda (v.22$6592$6872) ((lambda (d$6873) ((lambda (v.23$6593$6874) (if (null? v.23$6593$6874) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6857 (cons-source k$6861 (cons-source i$6865 (cons-source v$6869 (cons-source d$6873 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((x ...) k i v d))) (quote (match-extract-quasiquote-vars (x ...) k i v d))) #f) #f)) (cdr v.21$6591$6870))) v.22$6592$6872)) (car v.21$6591$6870)) #f)) (cdr v.19$6589$6866))) v.20$6590$6868)) (car v.19$6589$6866)) #f)) (cdr v.17$6587$6862))) v.18$6588$6864)) (car v.17$6587$6862)) #f)) (cdr v.15$6585$6858))) v.16$6586$6860)) (car v.15$6585$6858)) #f)) (cdr v.12$6582$6851))) v.14$6584$6855) #f)) (vector->list v.13$6583$6853)) #f)) (car v.12$6582$6851)) #f)) (cdr expr$6563$6673))))) ((lambda (v.24$6594$6821) (if (pair? v.24$6594$6821) ((lambda (v.25$6595$6823) (if (pair? v.25$6595$6823) ((lambda (v.26$6596$6825) ((lambda (x$6826) ((lambda (v.27$6597$6827) ((lambda (y$6828) ((lambda (v.28$6598$6829) (if (pair? v.28$6598$6829) ((lambda (v.29$6599$6831) ((lambda (k$6832) ((lambda (v.30$6600$6833) (if (pair? v.30$6600$6833) ((lambda (v.31$6601$6835) ((lambda (i$6836) ((lambda (v.32$6602$6837) (if (pair? v.32$6602$6837) ((lambda (v.33$6603$6839) ((lambda (v$6840) ((lambda (v.34$6604$6841) (if (pair? v.34$6604$6841) ((lambda (v.35$6605$6843) ((lambda (d$6844) ((lambda (v.36$6606$6845) (if (null? v.36$6606$6845) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6826 (cons-source (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars-step)) (cons-source y$6828 (cons-source k$6832 (cons-source i$6836 (cons-source v$6840 (cons-source d$6844 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (y k i v d))) (quote (match-extract-quasiquote-vars-step y k i v d))) (cons-source i$6836 (cons-source (quote ()) (cons-source d$6844 (quote ()) (quote (d))) (quote (() d))) (quote (i () d))) (quote ((match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (x (match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (match-extract-quasiquote-vars x (match-extract-quasiquote-vars-step y k i v d) i () d))) #f) #f)) (cdr v.34$6604$6841))) v.35$6605$6843)) (car v.34$6604$6841)) #f)) (cdr v.32$6602$6837))) v.33$6603$6839)) (car v.32$6602$6837)) #f)) (cdr v.30$6600$6833))) v.31$6601$6835)) (car v.30$6600$6833)) #f)) (cdr v.28$6598$6829))) v.29$6599$6831)) (car v.28$6598$6829)) #f)) (cdr v.24$6594$6821))) v.27$6597$6827)) (cdr v.25$6595$6823))) v.26$6596$6825)) (car v.25$6595$6823)) #f)) (car v.24$6594$6821)) #f)) (cdr expr$6563$6673))))) ((lambda (v.37$6607$6783) (if (pair? v.37$6607$6783) ((lambda (v.38$6608$6785) (if (pair? v.38$6608$6785) ((lambda (v.39$6609$6787) (if (compare$6565$6671 v.39$6609$6787 (rename$6564$6672 (quote unquote))) ((lambda (v.40$6610$6789) (if (pair? v.40$6610$6789) ((lambda (v.41$6611$6791) ((lambda (x$6792) ((lambda (v.42$6612$6793) (if (null? v.42$6612$6793) ((lambda (v.43$6613$6795) (if (pair? v.43$6613$6795) ((lambda (v.44$6614$6797) ((lambda (k$6798) ((lambda (v.45$6615$6799) (if (pair? v.45$6615$6799) ((lambda (v.46$6616$6801) ((lambda (i$6802) ((lambda (v.47$6617$6803) (if (pair? v.47$6617$6803) ((lambda (v.48$6618$6805) ((lambda (v$6806) ((lambda (v.49$6619$6807) (if (pair? v.49$6619$6807) ((lambda (v.50$6620$6809) (if (pair? v.50$6620$6809) ((lambda (v.51$6621$6811) (if (equal? v.51$6621$6811 #t) ((lambda (v.52$6622$6813) ((lambda (d$6814) ((lambda (v.53$6623$6815) (if (null? v.53$6623$6815) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6792 (cons-source k$6798 (cons-source i$6802 (cons-source v$6806 (cons-source d$6814 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (x k i v d))) (quote (match-extract-quasiquote-vars x k i v d))) #f) #f)) (cdr v.49$6619$6807))) v.52$6622$6813)) (cdr v.50$6620$6809)) #f)) (car v.50$6620$6809)) #f)) (car v.49$6619$6807)) #f)) (cdr v.47$6617$6803))) v.48$6618$6805)) (car v.47$6617$6803)) #f)) (cdr v.45$6615$6799))) v.46$6616$6801)) (car v.45$6615$6799)) #f)) (cdr v.43$6613$6795))) v.44$6614$6797)) (car v.43$6613$6795)) #f)) (cdr v.37$6607$6783)) #f)) (cdr v.40$6610$6789))) v.41$6611$6791)) (car v.40$6610$6789)) #f)) (cdr v.38$6608$6785)) #f)) (car v.38$6608$6785)) #f)) (car v.37$6607$6783)) #f)) (cdr expr$6563$6673))))) ((lambda (v.54$6624$6745) (if (pair? v.54$6624$6745) ((lambda (v.55$6625$6747) (if (pair? v.55$6625$6747) ((lambda (v.56$6626$6749) (if (compare$6565$6671 v.56$6626$6749 (rename$6564$6672 (quote unquote))) ((lambda (v.57$6627$6751) (if (pair? v.57$6627$6751) ((lambda (v.58$6628$6753) ((lambda (x$6754) ((lambda (v.59$6629$6755) (if (null? v.59$6629$6755) ((lambda (v.60$6630$6757) (if (pair? v.60$6630$6757) ((lambda (v.61$6631$6759) ((lambda (k$6760) ((lambda (v.62$6632$6761) (if (pair? v.62$6632$6761) ((lambda (v.63$6633$6763) ((lambda (i$6764) ((lambda (v.64$6634$6765) (if (pair? v.64$6634$6765) ((lambda (v.65$6635$6767) ((lambda (v$6768) ((lambda (v.66$6636$6769) (if (pair? v.66$6636$6769) ((lambda (v.67$6637$6771) (if (pair? v.67$6637$6771) ((lambda (v.68$6638$6773) (if (equal? v.68$6638$6773 #t) ((lambda (v.69$6639$6775) (if (null? v.69$6639$6775) ((lambda (v.70$6640$6777) (if (null? v.70$6640$6777) (cons (cons-source (rename$6564$6672 (quote match-extract-vars)) (cons-source x$6754 (cons-source k$6760 (cons-source i$6764 (cons-source v$6768 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (x k i v))) (quote (match-extract-vars x k i v))) #f) #f)) (cdr v.66$6636$6769)) #f)) (cdr v.67$6637$6771)) #f)) (car v.67$6637$6771)) #f)) (car v.66$6636$6769)) #f)) (cdr v.64$6634$6765))) v.65$6635$6767)) (car v.64$6634$6765)) #f)) (cdr v.62$6632$6761))) v.63$6633$6763)) (car v.62$6632$6761)) #f)) (cdr v.60$6630$6757))) v.61$6631$6759)) (car v.60$6630$6757)) #f)) (cdr v.54$6624$6745)) #f)) (cdr v.57$6627$6751))) v.58$6628$6753)) (car v.57$6627$6751)) #f)) (cdr v.55$6625$6747)) #f)) (car v.55$6625$6747)) #f)) (car v.54$6624$6745)) #f)) (cdr expr$6563$6673))))) ((lambda (v.71$6641$6711) (if (pair? v.71$6641$6711) ((lambda (v.72$6642$6713) (if (pair? v.72$6642$6713) ((lambda (v.73$6643$6715) (if (compare$6565$6671 v.73$6643$6715 (rename$6564$6672 (quote unquote-splicing))) ((lambda (v.74$6644$6717) (if (pair? v.74$6644$6717) ((lambda (v.75$6645$6719) ((lambda (x$6720) ((lambda (v.76$6646$6721) (if (null? v.76$6646$6721) ((lambda (v.77$6647$6723) (if (pair? v.77$6647$6723) ((lambda (v.78$6648$6725) ((lambda (k$6726) ((lambda (v.79$6649$6727) (if (pair? v.79$6649$6727) ((lambda (v.80$6650$6729) ((lambda (i$6730) ((lambda (v.81$6651$6731) (if (pair? v.81$6651$6731) ((lambda (v.82$6652$6733) ((lambda (v$6734) ((lambda (v.83$6653$6735) (if (pair? v.83$6653$6735) ((lambda (v.84$6654$6737) ((lambda (d$6738) ((lambda (v.85$6655$6739) (if (null? v.85$6655$6739) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source (cons-source (rename$6564$6672 (quote unquote)) (cons-source x$6720 (quote ()) (quote (x))) (quote (unquote x))) (cons-source k$6726 (cons-source i$6730 (cons-source v$6734 (cons-source d$6738 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((unquote x) k i v d))) (quote (match-extract-quasiquote-vars (unquote x) k i v d))) #f) #f)) (cdr v.83$6653$6735))) v.84$6654$6737)) (car v.83$6653$6735)) #f)) (cdr v.81$6651$6731))) v.82$6652$6733)) (car v.81$6651$6731)) #f)) (cdr v.79$6649$6727))) v.80$6650$6729)) (car v.79$6649$6727)) #f)) (cdr v.77$6647$6723))) v.78$6648$6725)) (car v.77$6647$6723)) #f)) (cdr v.71$6641$6711)) #f)) (cdr v.74$6644$6717))) v.75$6645$6719)) (car v.74$6644$6717)) #f)) (cdr v.72$6642$6713)) #f)) (car v.72$6642$6713)) #f)) (car v.71$6641$6711)) #f)) (cdr expr$6563$6673))))) ((lambda (v.86$6656$6677) (if (pair? v.86$6656$6677) ((lambda (v.87$6657$6679) (if (pair? v.87$6657$6679) ((lambda (v.88$6658$6681) (if (compare$6565$6671 v.88$6658$6681 (rename$6564$6672 (quote quasiquote))) ((lambda (v.89$6659$6683) (if (pair? v.89$6659$6683) ((lambda (v.90$6660$6685) ((lambda (x$6686) ((lambda (v.91$6661$6687) (if (null? v.91$6661$6687) ((lambda (v.92$6662$6689) (if (pair? v.92$6662$6689) ((lambda (v.93$6663$6691) ((lambda (k$6692) ((lambda (v.94$6664$6693) (if (pair? v.94$6664$6693) ((lambda (v.95$6665$6695) ((lambda (i$6696) ((lambda (v.96$6666$6697) (if (pair? v.96$6666$6697) ((lambda (v.97$6667$6699) ((lambda (v$6700) ((lambda (v.98$6668$6701) (if (pair? v.98$6668$6701) ((lambda (v.99$6669$6703) ((lambda (d$6704) ((lambda (v.100$6670$6705) (if (null? v.100$6670$6705) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6686 (cons-source k$6692 (cons-source i$6696 (cons-source v$6700 (cons-source (cons-source #t d$6704 (quote (#t . d))) (quote ()) (quote ((#t . d)))) (quote (v (#t . d)))) (quote (i v (#t . d)))) (quote (k i v (#t . d)))) (quote (x k i v (#t . d)))) (quote (match-extract-quasiquote-vars x k i v (#t . d)))) #f) #f)) (cdr v.98$6668$6701))) v.99$6669$6703)) (car v.98$6668$6701)) #f)) (cdr v.96$6666$6697))) v.97$6667$6699)) (car v.96$6666$6697)) #f)) (cdr v.94$6664$6693))) v.95$6665$6695)) (car v.94$6664$6693)) #f)) (cdr v.92$6662$6689))) v.93$6663$6691)) (car v.92$6662$6689)) #f)) (cdr v.86$6656$6677)) #f)) (cdr v.89$6659$6683))) v.90$6660$6685)) (car v.89$6659$6683)) #f)) (cdr v.87$6657$6679)) #f)) (car v.87$6657$6679)) #f)) (car v.86$6656$6677)) #f)) (cdr expr$6563$6673))))) (match-extract-vars-step lambda (expr$6441$6471 rename$6442$6470 compare$6443$6469) (car ((lambda (tmp$6473$6520) (if tmp$6473$6520 tmp$6473$6520 (cons (error "no expansion for" expr$6441$6471) #f))) ((lambda (v.1$6449$6475) (if (pair? v.1$6449$6475) ((lambda (v.2$6450$6477) ((lambda (p$6478) ((lambda (v.3$6451$6479) (if (pair? v.3$6451$6479) ((lambda (v.4$6452$6481) ((lambda (k$6482) ((lambda (v.5$6453$6483) (if (pair? v.5$6453$6483) ((lambda (v.6$6454$6485) ((lambda (i$6486) ((lambda (v.7$6455$6487) (if (pair? v.7$6455$6487) ((lambda (v.8$6456$6489) ((lambda (v$6490) ((lambda (v.9$6457$6491) (if (pair? v.9$6457$6491) ((lambda (v.10$6458$6493) ((lambda (w.11$6459$6497 v2-ls14$6462$6496 v2-ls-ls13$6461$6495) ((lambda (lp.12$6460$6498) (set! lp.12$6460$6498 (lambda (w.11$6459$6501 v2-ls14$6462$6500 v2-ls-ls13$6461$6499) (if (null? w.11$6459$6501) ((lambda (v2$6503 v2-ls$6502) ((lambda (v.20$6468$6504) (if (null? v.20$6468$6504) (cons (cons-source (rename$6442$6470 (quote match-extract-vars)) (cons-source p$6478 (cons-source k$6482 (cons-source (append (map (lambda (v2$6508) v2$6508) v2$6503) i$6486) (cons-source (append (map (lambda (v2$6507 v2-ls$6506) (cons-source v2$6507 (cons-source v2-ls$6506 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$6503 v2-ls$6502) v$6490) (quote ()) (quote (((v2 v2-ls) ... . v)))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (p k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (match-extract-vars p k (v2 ... . i) ((v2 v2-ls) ... . v)))) #f) #f)) (cdr v.9$6457$6491))) (reverse v2-ls14$6462$6500) (reverse v2-ls-ls13$6461$6499)) (if (pair? w.11$6459$6501) ((lambda (v.15$6463$6510) (if (pair? v.15$6463$6510) ((lambda (v.16$6464$6512) ((lambda (v2$6513) ((lambda (v.17$6465$6514) (if (pair? v.17$6465$6514) ((lambda (v.18$6466$6516) ((lambda (v2-ls$6517) ((lambda (v.19$6467$6518) (if (null? v.19$6467$6518) (lp.12$6460$6498 (cdr w.11$6459$6501) (cons v2$6513 v2-ls14$6462$6500) (cons v2-ls$6517 v2-ls-ls13$6461$6499)) #f)) (cdr v.17$6465$6514))) v.18$6466$6516)) (car v.17$6465$6514)) #f)) (cdr v.15$6463$6510))) v.16$6464$6512)) (car v.15$6463$6510)) #f)) (car w.11$6459$6501)) #f)))) (lp.12$6460$6498 w.11$6459$6497 v2-ls14$6462$6496 v2-ls-ls13$6461$6495)) #f)) v.10$6458$6493 (quote ()) (quote ()))) (car v.9$6457$6491)) #f)) (cdr v.7$6455$6487))) v.8$6456$6489)) (car v.7$6455$6487)) #f)) (cdr v.5$6453$6483))) v.6$6454$6485)) (car v.5$6453$6483)) #f)) (cdr v.3$6451$6479))) v.4$6452$6481)) (car v.3$6451$6479)) #f)) (cdr v.1$6449$6475))) v.2$6450$6477)) (car v.1$6449$6475)) #f)) (cdr expr$6441$6471))))) (match-extract-vars lambda (expr$5525$5711 rename$5526$5710 compare$5527$5709) (car ((lambda (tmp$5713$5729) (if tmp$5713$5729 tmp$5713$5729 ((lambda (tmp$5731$5747) (if tmp$5731$5747 tmp$5731$5747 ((lambda (tmp$5749$5765) (if tmp$5749$5765 tmp$5749$5765 ((lambda (tmp$5767$5803) (if tmp$5767$5803 tmp$5767$5803 ((lambda (tmp$5805$5841) (if tmp$5805$5841 tmp$5805$5841 ((lambda (tmp$5843$5863) (if tmp$5843$5863 tmp$5843$5863 ((lambda (tmp$5865$5895) (if tmp$5865$5895 tmp$5865$5895 ((lambda (tmp$5897$5925) (if tmp$5897$5925 tmp$5897$5925 ((lambda (tmp$5927$5939) (if tmp$5927$5939 tmp$5927$5939 ((lambda (tmp$5941$5953) (if tmp$5941$5953 tmp$5941$5953 ((lambda (tmp$5955$5967) (if tmp$5955$5967 tmp$5955$5967 ((lambda (tmp$5969$5997) (if tmp$5969$5997 tmp$5969$5997 ((lambda (tmp$5999$6023) (if tmp$5999$6023 tmp$5999$6023 ((lambda (tmp$6025$6036) (if tmp$6025$6036 tmp$6025$6036 ((lambda (tmp$6038$6060) (if tmp$6038$6060 tmp$6038$6060 ((lambda (tmp$6062$6084) (if tmp$6062$6084 tmp$6062$6084 ((lambda (tmp$6086$6108) (if tmp$6086$6108 tmp$6086$6108 ((lambda (tmp$6110$6132) (if tmp$6110$6132 tmp$6110$6132 ((lambda (tmp$6134$6158) (if tmp$6134$6158 tmp$6134$6158 (cons (error "no expansion for" expr$5525$5711) #f))) ((lambda (v.1$5533$6136) (if (pair? v.1$5533$6136) ((lambda (v.2$5534$6138) ((lambda (p$6139) ((lambda (v.3$5535$6140) (if (pair? v.3$5535$6140) ((lambda (v.4$5536$6142) (if (list? v.4$5536$6142) ((lambda (k$6144) ((lambda (v.5$5537$6145) (if (pair? v.5$5537$6145) ((lambda (v.6$5538$6147) (if (list? v.6$5538$6147) ((lambda (i$6149) ((lambda (v.7$5539$6150) (if (pair? v.7$5539$6150) ((lambda (v.8$5540$6152) ((lambda (v$6153) ((lambda (v.9$5541$6154) (if (null? v.9$5541$6154) (cons (cons-source (rename$5526$5710 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source (cons-source (rename$5526$5710 (quote syntax-rules)) (cons-source i$6149 (cons-source (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source p$6139 (cons-source (rename$5526$5710 (quote sk)) (cons-source (rename$5526$5710 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (p sk fk))) (quote (new-sym? p sk fk))) (cons-source (rename$5526$5710 (quote sk)) (quote ()) (quote (sk))) (quote ((new-sym? p sk fk) sk))) (cons-source (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source (rename$5526$5710 (quote any)) (cons-source (rename$5526$5710 (quote sk)) (cons-source (rename$5526$5710 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (any sk fk))) (quote (new-sym? any sk fk))) (cons-source (rename$5526$5710 (quote fk)) (quote ()) (quote (fk))) (quote ((new-sym? any sk fk) fk))) (quote ()) (quote (((new-sym? any sk fk) fk)))) (quote (((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ((i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ()) (quote ((syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote (new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote ()) (quote ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))))) (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source (rename$5526$5710 (quote random-sym-to-match)) (cons-source (append (map (lambda (k$6157) k$6157) k$6144) (cons-source (cons-source (cons-source p$6139 (cons-source (rename$5526$5710 (quote p-ls)) (quote ()) (quote (p-ls))) (quote (p p-ls))) v$6153 (quote ((p p-ls) . v))) (quote ()) (quote (((p p-ls) . v))))) (cons-source (append (map (lambda (k$6156) k$6156) k$6144) (cons-source v$6153 (quote ()) (quote (v)))) (quote ()) (quote ((k ... v)))) (quote ((k ... ((p p-ls) . v)) (k ... v)))) (quote (random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote ()) (quote ((new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (let-syntax ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) #f) #f)) (cdr v.7$5539$6150))) v.8$5540$6152)) (car v.7$5539$6150)) #f)) (cdr v.5$5537$6145))) v.6$5538$6147) #f)) (car v.5$5537$6145)) #f)) (cdr v.3$5535$6140))) v.4$5536$6142) #f)) (car v.3$5535$6140)) #f)) (cdr v.1$5533$6136))) v.2$5534$6138)) (car v.1$5533$6136)) #f)) (cdr expr$5525$5711))))) ((lambda (v.10$5542$6112) (if (pair? v.10$5542$6112) ((lambda (v.11$5543$6114) (if (compare$5527$5709 v.11$5543$6114 (rename$5526$5710 (quote ..1))) ((lambda (v.12$5544$6116) (if (pair? v.12$5544$6116) ((lambda (v.13$5545$6118) (if (list? v.13$5545$6118) ((lambda (k$6120) ((lambda (v.14$5546$6121) (if (pair? v.14$5546$6121) ((lambda (v.15$5547$6123) ((lambda (i$6124) ((lambda (v.16$5548$6125) (if (pair? v.16$5548$6125) ((lambda (v.17$5549$6127) ((lambda (v$6128) ((lambda (v.18$5550$6129) (if (null? v.18$5550$6129) (cons (append (map (lambda (k$6131) k$6131) k$6120) (cons-source v$6128 (quote ()) (quote (v)))) #f) #f)) (cdr v.16$5548$6125))) v.17$5549$6127)) (car v.16$5548$6125)) #f)) (cdr v.14$5546$6121))) v.15$5547$6123)) (car v.14$5546$6121)) #f)) (cdr v.12$5544$6116))) v.13$5545$6118) #f)) (car v.12$5544$6116)) #f)) (cdr v.10$5542$6112)) #f)) (car v.10$5542$6112)) #f)) (cdr expr$5525$5711))))) ((lambda (v.19$5551$6088) (if (pair? v.19$5551$6088) ((lambda (v.20$5552$6090) (if (compare$5527$5709 v.20$5552$6090 (rename$5526$5710 (quote ***))) ((lambda (v.21$5553$6092) (if (pair? v.21$5553$6092) ((lambda (v.22$5554$6094) (if (list? v.22$5554$6094) ((lambda (k$6096) ((lambda (v.23$5555$6097) (if (pair? v.23$5555$6097) ((lambda (v.24$5556$6099) ((lambda (i$6100) ((lambda (v.25$5557$6101) (if (pair? v.25$5557$6101) ((lambda (v.26$5558$6103) ((lambda (v$6104) ((lambda (v.27$5559$6105) (if (null? v.27$5559$6105) (cons (append (map (lambda (k$6107) k$6107) k$6096) (cons-source v$6104 (quote ()) (quote (v)))) #f) #f)) (cdr v.25$5557$6101))) v.26$5558$6103)) (car v.25$5557$6101)) #f)) (cdr v.23$5555$6097))) v.24$5556$6099)) (car v.23$5555$6097)) #f)) (cdr v.21$5553$6092))) v.22$5554$6094) #f)) (car v.21$5553$6092)) #f)) (cdr v.19$5551$6088)) #f)) (car v.19$5551$6088)) #f)) (cdr expr$5525$5711))))) ((lambda (v.28$5560$6064) (if (pair? v.28$5560$6064) ((lambda (v.29$5561$6066) (if (compare$5527$5709 v.29$5561$6066 (rename$5526$5710 (quote ___))) ((lambda (v.30$5562$6068) (if (pair? v.30$5562$6068) ((lambda (v.31$5563$6070) (if (list? v.31$5563$6070) ((lambda (k$6072) ((lambda (v.32$5564$6073) (if (pair? v.32$5564$6073) ((lambda (v.33$5565$6075) ((lambda (i$6076) ((lambda (v.34$5566$6077) (if (pair? v.34$5566$6077) ((lambda (v.35$5567$6079) ((lambda (v$6080) ((lambda (v.36$5568$6081) (if (null? v.36$5568$6081) (cons (append (map (lambda (k$6083) k$6083) k$6072) (cons-source v$6080 (quote ()) (quote (v)))) #f) #f)) (cdr v.34$5566$6077))) v.35$5567$6079)) (car v.34$5566$6077)) #f)) (cdr v.32$5564$6073))) v.33$5565$6075)) (car v.32$5564$6073)) #f)) (cdr v.30$5562$6068))) v.31$5563$6070) #f)) (car v.30$5562$6068)) #f)) (cdr v.28$5560$6064)) #f)) (car v.28$5560$6064)) #f)) (cdr expr$5525$5711))))) ((lambda (v.37$5569$6040) (if (pair? v.37$5569$6040) ((lambda (v.38$5570$6042) (if (compare$5527$5709 v.38$5570$6042 (rename$5526$5710 (quote _))) ((lambda (v.39$5571$6044) (if (pair? v.39$5571$6044) ((lambda (v.40$5572$6046) (if (list? v.40$5572$6046) ((lambda (k$6048) ((lambda (v.41$5573$6049) (if (pair? v.41$5573$6049) ((lambda (v.42$5574$6051) ((lambda (i$6052) ((lambda (v.43$5575$6053) (if (pair? v.43$5575$6053) ((lambda (v.44$5576$6055) ((lambda (v$6056) ((lambda (v.45$5577$6057) (if (null? v.45$5577$6057) (cons (append (map (lambda (k$6059) k$6059) k$6048) (cons-source v$6056 (quote ()) (quote (v)))) #f) #f)) (cdr v.43$5575$6053))) v.44$5576$6055)) (car v.43$5575$6053)) #f)) (cdr v.41$5573$6049))) v.42$5574$6051)) (car v.41$5573$6049)) #f)) (cdr v.39$5571$6044))) v.40$5572$6046) #f)) (car v.39$5571$6044)) #f)) (cdr v.37$5569$6040)) #f)) (car v.37$5569$6040)) #f)) (cdr expr$5525$5711))))) ((lambda (v.46$5578$6027) (if (pair? v.46$5578$6027) ((lambda (v.47$5579$6029) (if (vector? v.47$5579$6029) ((lambda (v.48$5580$6031) (if (list? v.48$5580$6031) ((lambda (p$6033) ((lambda (v.49$5581$6034) ((lambda (x$6035) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6033 x$6035 (quote ((p ...) . x))) (quote (match-extract-vars (p ...) . x))) #f)) v.49$5581$6034)) (cdr v.46$5578$6027))) v.48$5580$6031) #f)) (vector->list v.47$5579$6029)) #f)) (car v.46$5578$6027)) #f)) (cdr expr$5525$5711))))) ((lambda (v.50$5582$6001) (if (pair? v.50$5582$6001) ((lambda (v.51$5583$6003) (if (pair? v.51$5583$6003) ((lambda (v.52$5584$6005) ((lambda (p$6006) ((lambda (v.53$5585$6007) ((lambda (q$6008) ((lambda (v.54$5586$6009) (if (pair? v.54$5586$6009) ((lambda (v.55$5587$6011) ((lambda (k$6012) ((lambda (v.56$5588$6013) (if (pair? v.56$5588$6013) ((lambda (v.57$5589$6015) ((lambda (i$6016) ((lambda (v.58$5590$6017) (if (pair? v.58$5590$6017) ((lambda (v.59$5591$6019) ((lambda (v$6020) ((lambda (v.60$5592$6021) (if (null? v.60$5592$6021) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6006 (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars-step)) (cons-source q$6008 (cons-source k$6012 (cons-source i$6016 (cons-source v$6020 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (q k i v))) (quote (match-extract-vars-step q k i v))) (cons-source i$6016 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step q k i v) i ()))) (quote (p (match-extract-vars-step q k i v) i ()))) (quote (match-extract-vars p (match-extract-vars-step q k i v) i ()))) #f) #f)) (cdr v.58$5590$6017))) v.59$5591$6019)) (car v.58$5590$6017)) #f)) (cdr v.56$5588$6013))) v.57$5589$6015)) (car v.56$5588$6013)) #f)) (cdr v.54$5586$6009))) v.55$5587$6011)) (car v.54$5586$6009)) #f)) (cdr v.50$5582$6001))) v.53$5585$6007)) (cdr v.51$5583$6003))) v.52$5584$6005)) (car v.51$5583$6003)) #f)) (car v.50$5582$6001)) #f)) (cdr expr$5525$5711))))) ((lambda (v.61$5593$5971) (if (pair? v.61$5593$5971) ((lambda (v.62$5594$5973) (if (pair? v.62$5594$5973) ((lambda (v.63$5595$5975) ((lambda (p$5976) ((lambda (v.64$5596$5977) (if (pair? v.64$5596$5977) ((lambda (v.65$5597$5979) ((lambda (q$5980) ((lambda (v.66$5598$5981) ((lambda (r$5982) ((lambda (v.67$5599$5983) (if (pair? v.67$5599$5983) ((lambda (v.68$5600$5985) ((lambda (k$5986) ((lambda (v.69$5601$5987) (if (pair? v.69$5601$5987) ((lambda (v.70$5602$5989) ((lambda (i$5990) ((lambda (v.71$5603$5991) (if (pair? v.71$5603$5991) ((lambda (v.72$5604$5993) ((lambda (v$5994) ((lambda (v.73$5605$5995) (if (null? v.73$5605$5995) (cons (cons-source (rename$5526$5710 (quote match-check-ellipsis)) (cons-source q$5980 (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source (cons-source p$5976 r$5982 (quote (p . r))) (cons-source k$5986 (cons-source i$5990 (cons-source v$5994 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((p . r) k i v))) (quote (match-extract-vars (p . r) k i v))) (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5976 (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars-step)) (cons-source (cons-source q$5980 r$5982 (quote (q . r))) (cons-source k$5986 (cons-source i$5990 (cons-source v$5994 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((q . r) k i v))) (quote (match-extract-vars-step (q . r) k i v))) (cons-source i$5990 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step (q . r) k i v) i ()))) (quote (p (match-extract-vars-step (q . r) k i v) i ()))) (quote (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ()))) (quote ()) (quote ((match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) (quote ((match-extract-vars (p . r) k i v) (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) (quote (q (match-extract-vars (p . r) k i v) (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) (quote (match-check-ellipsis q (match-extract-vars (p . r) k i v) (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) #f) #f)) (cdr v.71$5603$5991))) v.72$5604$5993)) (car v.71$5603$5991)) #f)) (cdr v.69$5601$5987))) v.70$5602$5989)) (car v.69$5601$5987)) #f)) (cdr v.67$5599$5983))) v.68$5600$5985)) (car v.67$5599$5983)) #f)) (cdr v.61$5593$5971))) v.66$5598$5981)) (cdr v.64$5596$5977))) v.65$5597$5979)) (car v.64$5596$5977)) #f)) (cdr v.62$5594$5973))) v.63$5595$5975)) (car v.62$5594$5973)) #f)) (car v.61$5593$5971)) #f)) (cdr expr$5525$5711))))) ((lambda (v.74$5606$5957) (if (pair? v.74$5606$5957) ((lambda (v.75$5607$5959) (if (pair? v.75$5607$5959) ((lambda (v.76$5608$5961) (if (compare$5527$5709 v.76$5608$5961 (rename$5526$5710 (quote not))) ((lambda (v.77$5609$5963) ((lambda (p$5964) ((lambda (v.78$5610$5965) ((lambda (x$5966) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5964 x$5966 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.78$5610$5965)) (cdr v.74$5606$5957))) v.77$5609$5963)) (cdr v.75$5607$5959)) #f)) (car v.75$5607$5959)) #f)) (car v.74$5606$5957)) #f)) (cdr expr$5525$5711))))) ((lambda (v.79$5611$5943) (if (pair? v.79$5611$5943) ((lambda (v.80$5612$5945) (if (pair? v.80$5612$5945) ((lambda (v.81$5613$5947) (if (compare$5527$5709 v.81$5613$5947 (rename$5526$5710 (quote or))) ((lambda (v.82$5614$5949) ((lambda (p$5950) ((lambda (v.83$5615$5951) ((lambda (x$5952) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5950 x$5952 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.83$5615$5951)) (cdr v.79$5611$5943))) v.82$5614$5949)) (cdr v.80$5612$5945)) #f)) (car v.80$5612$5945)) #f)) (car v.79$5611$5943)) #f)) (cdr expr$5525$5711))))) ((lambda (v.84$5616$5929) (if (pair? v.84$5616$5929) ((lambda (v.85$5617$5931) (if (pair? v.85$5617$5931) ((lambda (v.86$5618$5933) (if (compare$5527$5709 v.86$5618$5933 (rename$5526$5710 (quote and))) ((lambda (v.87$5619$5935) ((lambda (p$5936) ((lambda (v.88$5620$5937) ((lambda (x$5938) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5936 x$5938 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.88$5620$5937)) (cdr v.84$5616$5929))) v.87$5619$5935)) (cdr v.85$5617$5931)) #f)) (car v.85$5617$5931)) #f)) (car v.84$5616$5929)) #f)) (cdr expr$5525$5711))))) ((lambda (v.89$5621$5899) (if (pair? v.89$5621$5899) ((lambda (v.90$5622$5901) (if (pair? v.90$5622$5901) ((lambda (v.91$5623$5903) (if (compare$5527$5709 v.91$5623$5903 (rename$5526$5710 (quote quasiquote))) ((lambda (v.92$5624$5905) (if (pair? v.92$5624$5905) ((lambda (v.93$5625$5907) ((lambda (x$5908) ((lambda (v.94$5626$5909) (if (null? v.94$5626$5909) ((lambda (v.95$5627$5911) (if (pair? v.95$5627$5911) ((lambda (v.96$5628$5913) ((lambda (k$5914) ((lambda (v.97$5629$5915) (if (pair? v.97$5629$5915) ((lambda (v.98$5630$5917) ((lambda (i$5918) ((lambda (v.99$5631$5919) (if (pair? v.99$5631$5919) ((lambda (v.100$5632$5921) ((lambda (v$5922) ((lambda (v.101$5633$5923) (if (null? v.101$5633$5923) (cons (cons-source (rename$5526$5710 (quote match-extract-quasiquote-vars)) (cons-source x$5908 (cons-source k$5914 (cons-source i$5918 (cons-source v$5922 (cons-source (cons-source #t (quote ()) (quote (#t))) (quote ()) (quote ((#t)))) (quote (v (#t)))) (quote (i v (#t)))) (quote (k i v (#t)))) (quote (x k i v (#t)))) (quote (match-extract-quasiquote-vars x k i v (#t)))) #f) #f)) (cdr v.99$5631$5919))) v.100$5632$5921)) (car v.99$5631$5919)) #f)) (cdr v.97$5629$5915))) v.98$5630$5917)) (car v.97$5629$5915)) #f)) (cdr v.95$5627$5911))) v.96$5628$5913)) (car v.95$5627$5911)) #f)) (cdr v.89$5621$5899)) #f)) (cdr v.92$5624$5905))) v.93$5625$5907)) (car v.92$5624$5905)) #f)) (cdr v.90$5622$5901)) #f)) (car v.90$5622$5901)) #f)) (car v.89$5621$5899)) #f)) (cdr expr$5525$5711))))) ((lambda (v.102$5634$5867) (if (pair? v.102$5634$5867) ((lambda (v.103$5635$5869) (if (pair? v.103$5635$5869) ((lambda (v.104$5636$5871) (if (compare$5527$5709 v.104$5636$5871 (rename$5526$5710 (quote quote))) ((lambda (v.105$5637$5873) (if (pair? v.105$5637$5873) ((lambda (v.106$5638$5875) ((lambda (x$5876) ((lambda (v.107$5639$5877) (if (null? v.107$5639$5877) ((lambda (v.108$5640$5879) (if (pair? v.108$5640$5879) ((lambda (v.109$5641$5881) (if (list? v.109$5641$5881) ((lambda (k$5883) ((lambda (v.110$5642$5884) (if (pair? v.110$5642$5884) ((lambda (v.111$5643$5886) ((lambda (i$5887) ((lambda (v.112$5644$5888) (if (pair? v.112$5644$5888) ((lambda (v.113$5645$5890) ((lambda (v$5891) ((lambda (v.114$5646$5892) (if (null? v.114$5646$5892) (cons (append (map (lambda (k$5894) k$5894) k$5883) (cons-source v$5891 (quote ()) (quote (v)))) #f) #f)) (cdr v.112$5644$5888))) v.113$5645$5890)) (car v.112$5644$5888)) #f)) (cdr v.110$5642$5884))) v.111$5643$5886)) (car v.110$5642$5884)) #f)) (cdr v.108$5640$5879))) v.109$5641$5881) #f)) (car v.108$5640$5879)) #f)) (cdr v.102$5634$5867)) #f)) (cdr v.105$5637$5873))) v.106$5638$5875)) (car v.105$5637$5873)) #f)) (cdr v.103$5635$5869)) #f)) (car v.103$5635$5869)) #f)) (car v.102$5634$5867)) #f)) (cdr expr$5525$5711))))) ((lambda (v.115$5647$5845) (if (pair? v.115$5647$5845) ((lambda (v.116$5648$5847) (if (pair? v.116$5648$5847) ((lambda (v.117$5649$5849) (if (compare$5527$5709 v.117$5649$5849 (rename$5526$5710 (quote =))) ((lambda (v.118$5650$5851) (if (pair? v.118$5650$5851) ((lambda (v.119$5651$5853) ((lambda (proc$5854) ((lambda (v.120$5652$5855) (if (pair? v.120$5652$5855) ((lambda (v.121$5653$5857) ((lambda (p$5858) ((lambda (v.122$5654$5859) (if (null? v.122$5654$5859) ((lambda (v.123$5655$5861) ((lambda (x$5862) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5858 x$5862 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.123$5655$5861)) (cdr v.115$5647$5845)) #f)) (cdr v.120$5652$5855))) v.121$5653$5857)) (car v.120$5652$5855)) #f)) (cdr v.118$5650$5851))) v.119$5651$5853)) (car v.118$5650$5851)) #f)) (cdr v.116$5648$5847)) #f)) (car v.116$5648$5847)) #f)) (car v.115$5647$5845)) #f)) (cdr expr$5525$5711))))) ((lambda (v.124$5656$5807) (if (pair? v.124$5656$5807) ((lambda (v.125$5657$5809) (if (pair? v.125$5657$5809) ((lambda (v.126$5658$5811) (if (compare$5527$5709 v.126$5658$5811 (rename$5526$5710 (quote object))) ((lambda (v.127$5659$5813) (if (pair? v.127$5659$5813) ((lambda (v.128$5660$5815) ((lambda (rec$5816) ((lambda (v.129$5661$5817) ((lambda (w.130$5662$5821 f-ls133$5665$5820 p-ls132$5664$5819) ((lambda (lp.131$5663$5822) (set! lp.131$5663$5822 (lambda (w.130$5662$5825 f-ls133$5665$5824 p-ls132$5664$5823) (if (null? w.130$5662$5825) ((lambda (f$5827 p$5826) ((lambda (v.139$5671$5828) ((lambda (x$5829) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5826 x$5829 (quote ((p ...) . x))) (quote (match-extract-vars (p ...) . x))) #f)) v.139$5671$5828)) (cdr v.124$5656$5807))) (reverse f-ls133$5665$5824) (reverse p-ls132$5664$5823)) (if (pair? w.130$5662$5825) ((lambda (v.134$5666$5831) (if (pair? v.134$5666$5831) ((lambda (v.135$5667$5833) ((lambda (f$5834) ((lambda (v.136$5668$5835) (if (pair? v.136$5668$5835) ((lambda (v.137$5669$5837) ((lambda (p$5838) ((lambda (v.138$5670$5839) (if (null? v.138$5670$5839) (lp.131$5663$5822 (cdr w.130$5662$5825) (cons f$5834 f-ls133$5665$5824) (cons p$5838 p-ls132$5664$5823)) #f)) (cdr v.136$5668$5835))) v.137$5669$5837)) (car v.136$5668$5835)) #f)) (cdr v.134$5666$5831))) v.135$5667$5833)) (car v.134$5666$5831)) #f)) (car w.130$5662$5825)) #f)))) (lp.131$5663$5822 w.130$5662$5821 f-ls133$5665$5820 p-ls132$5664$5819)) #f)) v.129$5661$5817 (quote ()) (quote ()))) (cdr v.127$5659$5813))) v.128$5660$5815)) (car v.127$5659$5813)) #f)) (cdr v.125$5657$5809)) #f)) (car v.125$5657$5809)) #f)) (car v.124$5656$5807)) #f)) (cdr expr$5525$5711))))) ((lambda (v.140$5672$5769) (if (pair? v.140$5672$5769) ((lambda (v.141$5673$5771) (if (pair? v.141$5673$5771) ((lambda (v.142$5674$5773) (if (compare$5527$5709 v.142$5674$5773 (rename$5526$5710 (quote @))) ((lambda (v.143$5675$5775) (if (pair? v.143$5675$5775) ((lambda (v.144$5676$5777) ((lambda (rec$5778) ((lambda (v.145$5677$5779) ((lambda (w.146$5678$5783 f-ls149$5681$5782 p-ls148$5680$5781) ((lambda (lp.147$5679$5784) (set! lp.147$5679$5784 (lambda (w.146$5678$5787 f-ls149$5681$5786 p-ls148$5680$5785) (if (null? w.146$5678$5787) ((lambda (f$5789 p$5788) ((lambda (v.155$5687$5790) ((lambda (x$5791) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5788 x$5791 (quote ((p ...) . x))) (quote (match-extract-vars (p ...) . x))) #f)) v.155$5687$5790)) (cdr v.140$5672$5769))) (reverse f-ls149$5681$5786) (reverse p-ls148$5680$5785)) (if (pair? w.146$5678$5787) ((lambda (v.150$5682$5793) (if (pair? v.150$5682$5793) ((lambda (v.151$5683$5795) ((lambda (f$5796) ((lambda (v.152$5684$5797) (if (pair? v.152$5684$5797) ((lambda (v.153$5685$5799) ((lambda (p$5800) ((lambda (v.154$5686$5801) (if (null? v.154$5686$5801) (lp.147$5679$5784 (cdr w.146$5678$5787) (cons f$5796 f-ls149$5681$5786) (cons p$5800 p-ls148$5680$5785)) #f)) (cdr v.152$5684$5797))) v.153$5685$5799)) (car v.152$5684$5797)) #f)) (cdr v.150$5682$5793))) v.151$5683$5795)) (car v.150$5682$5793)) #f)) (car w.146$5678$5787)) #f)))) (lp.147$5679$5784 w.146$5678$5783 f-ls149$5681$5782 p-ls148$5680$5781)) #f)) v.145$5677$5779 (quote ()) (quote ()))) (cdr v.143$5675$5775))) v.144$5676$5777)) (car v.143$5675$5775)) #f)) (cdr v.141$5673$5771)) #f)) (car v.141$5673$5771)) #f)) (car v.140$5672$5769)) #f)) (cdr expr$5525$5711))))) ((lambda (v.156$5688$5751) (if (pair? v.156$5688$5751) ((lambda (v.157$5689$5753) (if (pair? v.157$5689$5753) ((lambda (v.158$5690$5755) (if (compare$5527$5709 v.158$5690$5755 (rename$5526$5710 (quote struct))) ((lambda (v.159$5691$5757) (if (pair? v.159$5691$5757) ((lambda (v.160$5692$5759) ((lambda (rec$5760) ((lambda (v.161$5693$5761) ((lambda (p$5762) ((lambda (v.162$5694$5763) ((lambda (x$5764) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5762 x$5764 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.162$5694$5763)) (cdr v.156$5688$5751))) v.161$5693$5761)) (cdr v.159$5691$5757))) v.160$5692$5759)) (car v.159$5691$5757)) #f)) (cdr v.157$5689$5753)) #f)) (car v.157$5689$5753)) #f)) (car v.156$5688$5751)) #f)) (cdr expr$5525$5711))))) ((lambda (v.163$5695$5733) (if (pair? v.163$5695$5733) ((lambda (v.164$5696$5735) (if (pair? v.164$5696$5735) ((lambda (v.165$5697$5737) (if (compare$5527$5709 v.165$5697$5737 (rename$5526$5710 (quote $))) ((lambda (v.166$5698$5739) (if (pair? v.166$5698$5739) ((lambda (v.167$5699$5741) ((lambda (rec$5742) ((lambda (v.168$5700$5743) ((lambda (p$5744) ((lambda (v.169$5701$5745) ((lambda (x$5746) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5744 x$5746 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.169$5701$5745)) (cdr v.163$5695$5733))) v.168$5700$5743)) (cdr v.166$5698$5739))) v.167$5699$5741)) (car v.166$5698$5739)) #f)) (cdr v.164$5696$5735)) #f)) (car v.164$5696$5735)) #f)) (car v.163$5695$5733)) #f)) (cdr expr$5525$5711))))) ((lambda (v.170$5702$5715) (if (pair? v.170$5702$5715) ((lambda (v.171$5703$5717) (if (pair? v.171$5703$5717) ((lambda (v.172$5704$5719) (if (compare$5527$5709 v.172$5704$5719 (rename$5526$5710 (quote ?))) ((lambda (v.173$5705$5721) (if (pair? v.173$5705$5721) ((lambda (v.174$5706$5723) ((lambda (pred$5724) ((lambda (v.175$5707$5725) ((lambda (p$5726) ((lambda (v.176$5708$5727) ((lambda (x$5728) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5726 x$5728 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.176$5708$5727)) (cdr v.170$5702$5715))) v.175$5707$5725)) (cdr v.173$5705$5721))) v.174$5706$5723)) (car v.173$5705$5721)) #f)) (cdr v.171$5703$5717)) #f)) (car v.171$5703$5717)) #f)) (car v.170$5702$5715)) #f)) (cdr expr$5525$5711))))) (match-record-named-refs lambda (expr$5335$5381 rename$5336$5380 compare$5337$5379) (car ((lambda (tmp$5383$5427) (if tmp$5383$5427 tmp$5383$5427 ((lambda (tmp$5429$5463) (if tmp$5429$5463 tmp$5429$5463 (cons (error "no expansion for" expr$5335$5381) #f))) ((lambda (v.1$5343$5431) (if (pair? v.1$5343$5431) ((lambda (v.2$5344$5433) ((lambda (v$5434) ((lambda (v.3$5345$5435) (if (pair? v.3$5345$5435) ((lambda (v.4$5346$5437) ((lambda (rec$5438) ((lambda (v.5$5347$5439) (if (pair? v.5$5347$5439) ((lambda (v.6$5348$5441) (if (null? v.6$5348$5441) ((lambda (v.7$5349$5443) (if (pair? v.7$5349$5443) ((lambda (v.8$5350$5445) ((lambda (g+s$5446) ((lambda (v.9$5351$5447) (if (pair? v.9$5351$5447) ((lambda (v.10$5352$5449) (if (list? v.10$5352$5449) ((lambda (sk$5451) ((lambda (v.11$5353$5452) (if (pair? v.11$5353$5452) ((lambda (v.12$5354$5454) ((lambda (fk$5455) ((lambda (v.13$5355$5456) (if (pair? v.13$5355$5456) ((lambda (v.14$5356$5458) ((lambda (i$5459) ((lambda (v.15$5357$5460) (if (null? v.15$5357$5460) (cons (append (map (lambda (sk$5462) sk$5462) sk$5451) (cons-source i$5459 (quote ()) (quote (i)))) #f) #f)) (cdr v.13$5355$5456))) v.14$5356$5458)) (car v.13$5355$5456)) #f)) (cdr v.11$5353$5452))) v.12$5354$5454)) (car v.11$5353$5452)) #f)) (cdr v.9$5351$5447))) v.10$5352$5449) #f)) (car v.9$5351$5447)) #f)) (cdr v.7$5349$5443))) v.8$5350$5445)) (car v.7$5349$5443)) #f)) (cdr v.5$5347$5439)) #f)) (car v.5$5347$5439)) #f)) (cdr v.3$5345$5435))) v.4$5346$5437)) (car v.3$5345$5435)) #f)) (cdr v.1$5343$5431))) v.2$5344$5433)) (car v.1$5343$5431)) #f)) (cdr expr$5335$5381))))) ((lambda (v.16$5358$5385) (if (pair? v.16$5358$5385) ((lambda (v.17$5359$5387) ((lambda (v$5388) ((lambda (v.18$5360$5389) (if (pair? v.18$5360$5389) ((lambda (v.19$5361$5391) ((lambda (rec$5392) ((lambda (v.20$5362$5393) (if (pair? v.20$5362$5393) ((lambda (v.21$5363$5395) (if (pair? v.21$5363$5395) ((lambda (v.22$5364$5397) (if (pair? v.22$5364$5397) ((lambda (v.23$5365$5399) ((lambda (f$5400) ((lambda (v.24$5366$5401) (if (pair? v.24$5366$5401) ((lambda (v.25$5367$5403) ((lambda (p$5404) ((lambda (v.26$5368$5405) (if (null? v.26$5368$5405) ((lambda (v.27$5369$5407) ((lambda (q$5408) ((lambda (v.28$5370$5409) (if (pair? v.28$5370$5409) ((lambda (v.29$5371$5411) ((lambda (g+s$5412) ((lambda (v.30$5372$5413) (if (pair? v.30$5372$5413) ((lambda (v.31$5373$5415) ((lambda (sk$5416) ((lambda (v.32$5374$5417) (if (pair? v.32$5374$5417) ((lambda (v.33$5375$5419) ((lambda (fk$5420) ((lambda (v.34$5376$5421) (if (pair? v.34$5376$5421) ((lambda (v.35$5377$5423) ((lambda (i$5424) ((lambda (v.36$5378$5425) (if (null? v.36$5378$5425) (cons (cons-source (rename$5336$5380 (quote let)) (cons-source (cons-source (cons-source (rename$5336$5380 (quote w)) (cons-source (cons-source (rename$5336$5380 (quote slot-ref)) (cons-source rec$5392 (cons-source v$5388 (cons-source (cons-source (rename$5336$5380 (quote quote)) (cons-source f$5400 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (quote ()) (quote ((slot-ref rec v (quote f))))) (quote (w (slot-ref rec v (quote f))))) (quote ()) (quote ((w (slot-ref rec v (quote f)))))) (cons-source (cons-source (rename$5336$5380 (quote match-one)) (cons-source (rename$5336$5380 (quote w)) (cons-source p$5404 (cons-source (cons-source (cons-source (rename$5336$5380 (quote slot-ref)) (cons-source rec$5392 (cons-source v$5388 (cons-source (cons-source (rename$5336$5380 (quote quote)) (cons-source f$5400 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (cons-source (cons-source (rename$5336$5380 (quote slot-set!)) (cons-source rec$5392 (cons-source v$5388 (cons-source (cons-source (rename$5336$5380 (quote quote)) (cons-source f$5400 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-set! rec v (quote f)))) (quote ()) (quote ((slot-set! rec v (quote f))))) (quote ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))))) (cons-source (cons-source (rename$5336$5380 (quote match-record-named-refs)) (cons-source v$5388 (cons-source rec$5392 (cons-source q$5408 (cons-source g+s$5412 (cons-source sk$5416 (cons-source fk$5420 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote (rec q g+s sk fk))) (quote (v rec q g+s sk fk))) (quote (match-record-named-refs v rec q g+s sk fk))) (cons-source fk$5420 (cons-source i$5424 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-named-refs v rec q g+s sk fk) fk i))) (quote (((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) #f) #f)) (cdr v.34$5376$5421))) v.35$5377$5423)) (car v.34$5376$5421)) #f)) (cdr v.32$5374$5417))) v.33$5375$5419)) (car v.32$5374$5417)) #f)) (cdr v.30$5372$5413))) v.31$5373$5415)) (car v.30$5372$5413)) #f)) (cdr v.28$5370$5409))) v.29$5371$5411)) (car v.28$5370$5409)) #f)) (cdr v.20$5362$5393))) v.27$5369$5407)) (cdr v.21$5363$5395)) #f)) (cdr v.24$5366$5401))) v.25$5367$5403)) (car v.24$5366$5401)) #f)) (cdr v.22$5364$5397))) v.23$5365$5399)) (car v.22$5364$5397)) #f)) (car v.21$5363$5395)) #f)) (car v.20$5362$5393)) #f)) (cdr v.18$5360$5389))) v.19$5361$5391)) (car v.18$5360$5389)) #f)) (cdr v.16$5358$5385))) v.17$5359$5387)) (car v.16$5358$5385)) #f)) (cdr expr$5335$5381))))) (match-record-refs lambda (expr$5144$5190 rename$5145$5189 compare$5146$5188) (car ((lambda (tmp$5192$5232) (if tmp$5192$5232 tmp$5192$5232 ((lambda (tmp$5234$5272) (if tmp$5234$5272 tmp$5234$5272 (cons (error "no expansion for" expr$5144$5190) #f))) ((lambda (v.1$5152$5236) (if (pair? v.1$5152$5236) ((lambda (v.2$5153$5238) ((lambda (v$5239) ((lambda (v.3$5154$5240) (if (pair? v.3$5154$5240) ((lambda (v.4$5155$5242) ((lambda (rec$5243) ((lambda (v.5$5156$5244) (if (pair? v.5$5156$5244) ((lambda (v.6$5157$5246) ((lambda (n$5247) ((lambda (v.7$5158$5248) (if (pair? v.7$5158$5248) ((lambda (v.8$5159$5250) (if (null? v.8$5159$5250) ((lambda (v.9$5160$5252) (if (pair? v.9$5160$5252) ((lambda (v.10$5161$5254) ((lambda (g+s$5255) ((lambda (v.11$5162$5256) (if (pair? v.11$5162$5256) ((lambda (v.12$5163$5258) (if (list? v.12$5163$5258) ((lambda (sk$5260) ((lambda (v.13$5164$5261) (if (pair? v.13$5164$5261) ((lambda (v.14$5165$5263) ((lambda (fk$5264) ((lambda (v.15$5166$5265) (if (pair? v.15$5166$5265) ((lambda (v.16$5167$5267) ((lambda (i$5268) ((lambda (v.17$5168$5269) (if (null? v.17$5168$5269) (cons (append (map (lambda (sk$5271) sk$5271) sk$5260) (cons-source i$5268 (quote ()) (quote (i)))) #f) #f)) (cdr v.15$5166$5265))) v.16$5167$5267)) (car v.15$5166$5265)) #f)) (cdr v.13$5164$5261))) v.14$5165$5263)) (car v.13$5164$5261)) #f)) (cdr v.11$5162$5256))) v.12$5163$5258) #f)) (car v.11$5162$5256)) #f)) (cdr v.9$5160$5252))) v.10$5161$5254)) (car v.9$5160$5252)) #f)) (cdr v.7$5158$5248)) #f)) (car v.7$5158$5248)) #f)) (cdr v.5$5156$5244))) v.6$5157$5246)) (car v.5$5156$5244)) #f)) (cdr v.3$5154$5240))) v.4$5155$5242)) (car v.3$5154$5240)) #f)) (cdr v.1$5152$5236))) v.2$5153$5238)) (car v.1$5152$5236)) #f)) (cdr expr$5144$5190))))) ((lambda (v.18$5169$5194) (if (pair? v.18$5169$5194) ((lambda (v.19$5170$5196) ((lambda (v$5197) ((lambda (v.20$5171$5198) (if (pair? v.20$5171$5198) ((lambda (v.21$5172$5200) ((lambda (rec$5201) ((lambda (v.22$5173$5202) (if (pair? v.22$5173$5202) ((lambda (v.23$5174$5204) ((lambda (n$5205) ((lambda (v.24$5175$5206) (if (pair? v.24$5175$5206) ((lambda (v.25$5176$5208) (if (pair? v.25$5176$5208) ((lambda (v.26$5177$5210) ((lambda (p$5211) ((lambda (v.27$5178$5212) ((lambda (q$5213) ((lambda (v.28$5179$5214) (if (pair? v.28$5179$5214) ((lambda (v.29$5180$5216) ((lambda (g+s$5217) ((lambda (v.30$5181$5218) (if (pair? v.30$5181$5218) ((lambda (v.31$5182$5220) ((lambda (sk$5221) ((lambda (v.32$5183$5222) (if (pair? v.32$5183$5222) ((lambda (v.33$5184$5224) ((lambda (fk$5225) ((lambda (v.34$5185$5226) (if (pair? v.34$5185$5226) ((lambda (v.35$5186$5228) ((lambda (i$5229) ((lambda (v.36$5187$5230) (if (null? v.36$5187$5230) (cons (cons-source (rename$5145$5189 (quote let)) (cons-source (cons-source (cons-source (rename$5145$5189 (quote w)) (cons-source (cons-source (rename$5145$5189 (quote slot-ref)) (cons-source rec$5201 (cons-source v$5197 (cons-source n$5205 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (quote ()) (quote ((slot-ref rec v n)))) (quote (w (slot-ref rec v n)))) (quote ()) (quote ((w (slot-ref rec v n))))) (cons-source (cons-source (rename$5145$5189 (quote match-one)) (cons-source (rename$5145$5189 (quote w)) (cons-source p$5211 (cons-source (cons-source (cons-source (rename$5145$5189 (quote slot-ref)) (cons-source rec$5201 (cons-source v$5197 (cons-source n$5205 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (cons-source (cons-source (rename$5145$5189 (quote slot-set!)) (cons-source rec$5201 (cons-source v$5197 (cons-source n$5205 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-set! rec v n))) (quote ()) (quote ((slot-set! rec v n)))) (quote ((slot-ref rec v n) (slot-set! rec v n)))) (cons-source (cons-source (rename$5145$5189 (quote match-record-refs)) (cons-source v$5197 (cons-source rec$5201 (cons-source (cons-source (rename$5145$5189 (quote +)) (cons-source n$5205 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source q$5213 (cons-source g+s$5217 (cons-source sk$5221 (cons-source fk$5225 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote ((+ n 1) q g+s sk fk))) (quote (rec (+ n 1) q g+s sk fk))) (quote (v rec (+ n 1) q g+s sk fk))) (quote (match-record-refs v rec (+ n 1) q g+s sk fk))) (cons-source fk$5225 (cons-source i$5229 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) #f) #f)) (cdr v.34$5185$5226))) v.35$5186$5228)) (car v.34$5185$5226)) #f)) (cdr v.32$5183$5222))) v.33$5184$5224)) (car v.32$5183$5222)) #f)) (cdr v.30$5181$5218))) v.31$5182$5220)) (car v.30$5181$5218)) #f)) (cdr v.28$5179$5214))) v.29$5180$5216)) (car v.28$5179$5214)) #f)) (cdr v.24$5175$5206))) v.27$5178$5212)) (cdr v.25$5176$5208))) v.26$5177$5210)) (car v.25$5176$5208)) #f)) (car v.24$5175$5206)) #f)) (cdr v.22$5173$5202))) v.23$5174$5204)) (car v.22$5173$5202)) #f)) (cdr v.20$5171$5198))) v.21$5172$5200)) (car v.20$5171$5198)) #f)) (cdr v.18$5169$5194))) v.19$5170$5196)) (car v.18$5169$5194)) #f)) (cdr expr$5144$5190))))) (match-vector-tail-two lambda (expr$4988$5024 rename$4989$5023 compare$4990$5022) (car ((lambda (tmp$5026$5089) (if tmp$5026$5089 tmp$5026$5089 (cons (error "no expansion for" expr$4988$5024) #f))) ((lambda (v.1$4996$5028) (if (pair? v.1$4996$5028) ((lambda (v.2$4997$5030) ((lambda (v$5031) ((lambda (v.3$4998$5032) (if (pair? v.3$4998$5032) ((lambda (v.4$4999$5034) ((lambda (p$5035) ((lambda (v.5$5000$5036) (if (pair? v.5$5000$5036) ((lambda (v.6$5001$5038) ((lambda (n$5039) ((lambda (v.7$5002$5040) (if (pair? v.7$5002$5040) ((lambda (v.8$5003$5042) ((lambda (len$5043) ((lambda (v.9$5004$5044) (if (pair? v.9$5004$5044) ((lambda (v.10$5005$5046) (if (list? v.10$5005$5046) ((lambda (sk$5048) ((lambda (v.11$5006$5049) (if (pair? v.11$5006$5049) ((lambda (v.12$5007$5051) ((lambda (fk$5052) ((lambda (v.13$5008$5053) (if (pair? v.13$5008$5053) ((lambda (v.14$5009$5055) ((lambda (i$5056) ((lambda (v.15$5010$5057) (if (pair? v.15$5010$5057) ((lambda (v.16$5011$5059) ((lambda (w.17$5012$5063 id-ls20$5015$5062 id-ls-ls19$5014$5061) ((lambda (lp.18$5013$5064) (set! lp.18$5013$5064 (lambda (w.17$5012$5067 id-ls20$5015$5066 id-ls-ls19$5014$5065) (if (null? w.17$5012$5067) ((lambda (id$5069 id-ls$5068) ((lambda (v.26$5021$5070) (if (null? v.26$5021$5070) (cons (cons-source (rename$4989$5023 (quote let)) (cons-source (rename$4989$5023 (quote loop)) (cons-source (cons-source (cons-source (rename$4989$5023 (quote j)) (cons-source n$5039 (quote ()) (quote (n))) (quote (j n))) (map (lambda (id-ls$5077) (cons-source id-ls$5077 (cons-source (cons-source (rename$4989$5023 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$5068) (quote ((j n) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$4989$5023 (quote if)) (cons-source (cons-source (rename$4989$5023 (quote >=)) (cons-source (rename$4989$5023 (quote j)) (cons-source len$5043 (quote ()) (quote (len))) (quote (j len))) (quote (>= j len))) (cons-source (cons-source (rename$4989$5023 (quote let)) (cons-source (map (lambda (id$5076 id-ls$5075) (cons-source id$5076 (cons-source (cons-source (rename$4989$5023 (quote reverse)) (cons-source id-ls$5075 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$5069 id-ls$5068) (cons-source (append (map (lambda (sk$5074) sk$5074) sk$5048) (cons-source i$5056 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (cons-source (cons-source (rename$4989$5023 (quote let)) (cons-source (cons-source (cons-source (rename$4989$5023 (quote w)) (cons-source (cons-source (rename$4989$5023 (quote vector-ref)) (cons-source v$5031 (cons-source (rename$4989$5023 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (quote ()) (quote ((vector-ref v j)))) (quote (w (vector-ref v j)))) (quote ()) (quote ((w (vector-ref v j))))) (cons-source (cons-source (rename$4989$5023 (quote match-one)) (cons-source (rename$4989$5023 (quote w)) (cons-source p$5035 (cons-source (cons-source (cons-source (rename$4989$5023 (quote vector-ref)) (cons-source v$5031 (cons-source (rename$4989$5023 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (cons-source (cons-source (rename$4989$5023 (quote vector-set!)) (cons-source v$5031 (cons-source (rename$4989$5023 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-set! v j))) (quote ()) (quote ((vector-set! v j)))) (quote ((vector-ref v j) (vector-set! v j)))) (cons-source (cons-source (rename$4989$5023 (quote match-drop-ids)) (cons-source (cons-source (rename$4989$5023 (quote loop)) (cons-source (cons-source (rename$4989$5023 (quote +)) (cons-source (rename$4989$5023 (quote j)) (cons-source 1 (quote ()) (quote (1))) (quote (j 1))) (quote (+ j 1))) (map (lambda (id$5073 id-ls$5072) (cons-source (rename$4989$5023 (quote cons)) (cons-source id$5073 (cons-source id-ls$5072 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$5069 id-ls$5068) (quote ((+ j 1) (cons id id-ls) ...))) (quote (loop (+ j 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (+ j 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)))) (cons-source fk$5052 (cons-source i$5056 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ()) (quote ((if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (let loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) #f) #f)) (cdr v.15$5010$5057))) (reverse id-ls20$5015$5066) (reverse id-ls-ls19$5014$5065)) (if (pair? w.17$5012$5067) ((lambda (v.21$5016$5079) (if (pair? v.21$5016$5079) ((lambda (v.22$5017$5081) ((lambda (id$5082) ((lambda (v.23$5018$5083) (if (pair? v.23$5018$5083) ((lambda (v.24$5019$5085) ((lambda (id-ls$5086) ((lambda (v.25$5020$5087) (if (null? v.25$5020$5087) (lp.18$5013$5064 (cdr w.17$5012$5067) (cons id$5082 id-ls20$5015$5066) (cons id-ls$5086 id-ls-ls19$5014$5065)) #f)) (cdr v.23$5018$5083))) v.24$5019$5085)) (car v.23$5018$5083)) #f)) (cdr v.21$5016$5079))) v.22$5017$5081)) (car v.21$5016$5079)) #f)) (car w.17$5012$5067)) #f)))) (lp.18$5013$5064 w.17$5012$5063 id-ls20$5015$5062 id-ls-ls19$5014$5061)) #f)) v.16$5011$5059 (quote ()) (quote ()))) (car v.15$5010$5057)) #f)) (cdr v.13$5008$5053))) v.14$5009$5055)) (car v.13$5008$5053)) #f)) (cdr v.11$5006$5049))) v.12$5007$5051)) (car v.11$5006$5049)) #f)) (cdr v.9$5004$5044))) v.10$5005$5046) #f)) (car v.9$5004$5044)) #f)) (cdr v.7$5002$5040))) v.8$5003$5042)) (car v.7$5002$5040)) #f)) (cdr v.5$5000$5036))) v.6$5001$5038)) (car v.5$5000$5036)) #f)) (cdr v.3$4998$5032))) v.4$4999$5034)) (car v.3$4998$5032)) #f)) (cdr v.1$4996$5028))) v.2$4997$5030)) (car v.1$4996$5028)) #f)) (cdr expr$4988$5024))))) (match-vector-tail lambda (expr$4898$4923 rename$4899$4922 compare$4900$4921) (car ((lambda (tmp$4925$4957) (if tmp$4925$4957 tmp$4925$4957 (cons (error "no expansion for" expr$4898$4923) #f))) ((lambda (v.1$4906$4927) (if (pair? v.1$4906$4927) ((lambda (v.2$4907$4929) ((lambda (v$4930) ((lambda (v.3$4908$4931) (if (pair? v.3$4908$4931) ((lambda (v.4$4909$4933) ((lambda (p$4934) ((lambda (v.5$4910$4935) (if (pair? v.5$4910$4935) ((lambda (v.6$4911$4937) ((lambda (n$4938) ((lambda (v.7$4912$4939) (if (pair? v.7$4912$4939) ((lambda (v.8$4913$4941) ((lambda (len$4942) ((lambda (v.9$4914$4943) (if (pair? v.9$4914$4943) ((lambda (v.10$4915$4945) ((lambda (sk$4946) ((lambda (v.11$4916$4947) (if (pair? v.11$4916$4947) ((lambda (v.12$4917$4949) ((lambda (fk$4950) ((lambda (v.13$4918$4951) (if (pair? v.13$4918$4951) ((lambda (v.14$4919$4953) ((lambda (i$4954) ((lambda (v.15$4920$4955) (if (null? v.15$4920$4955) (cons (cons-source (rename$4899$4922 (quote match-extract-vars)) (cons-source p$4934 (cons-source (cons-source (rename$4899$4922 (quote match-vector-tail-two)) (cons-source v$4930 (cons-source p$4934 (cons-source n$4938 (cons-source len$4942 (cons-source sk$4946 (cons-source fk$4950 (cons-source i$4954 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (len sk fk i))) (quote (n len sk fk i))) (quote (p n len sk fk i))) (quote (v p n len sk fk i))) (quote (match-vector-tail-two v p n len sk fk i))) (cons-source i$4954 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-vector-tail-two v p n len sk fk i) i ()))) (quote (p (match-vector-tail-two v p n len sk fk i) i ()))) (quote (match-extract-vars p (match-vector-tail-two v p n len sk fk i) i ()))) #f) #f)) (cdr v.13$4918$4951))) v.14$4919$4953)) (car v.13$4918$4951)) #f)) (cdr v.11$4916$4947))) v.12$4917$4949)) (car v.11$4916$4947)) #f)) (cdr v.9$4914$4943))) v.10$4915$4945)) (car v.9$4914$4943)) #f)) (cdr v.7$4912$4939))) v.8$4913$4941)) (car v.7$4912$4939)) #f)) (cdr v.5$4910$4935))) v.6$4911$4937)) (car v.5$4910$4935)) #f)) (cdr v.3$4908$4931))) v.4$4909$4933)) (car v.3$4908$4931)) #f)) (cdr v.1$4906$4927))) v.2$4907$4929)) (car v.1$4906$4927)) #f)) (cdr expr$4898$4923))))) (match-gen-vector-ellipsis lambda (expr$4760$4794 rename$4761$4793 compare$4762$4792) (car ((lambda (tmp$4796$4850) (if tmp$4796$4850 tmp$4796$4850 (cons (error "no expansion for" expr$4760$4794) #f))) ((lambda (v.1$4768$4798) (if (pair? v.1$4768$4798) ((lambda (v.2$4769$4800) ((lambda (v$4801) ((lambda (v.3$4770$4802) (if (pair? v.3$4770$4802) ((lambda (v.4$4771$4804) ((lambda (n$4805) ((lambda (v.5$4772$4806) (if (pair? v.5$4772$4806) ((lambda (v.6$4773$4808) ((lambda (w.7$4774$4812 pat-ls10$4777$4811 index-ls9$4776$4810) ((lambda (lp.8$4775$4813) (set! lp.8$4775$4813 (lambda (w.7$4774$4816 pat-ls10$4777$4815 index-ls9$4776$4814) (if (null? w.7$4774$4816) ((lambda (pat$4818 index$4817) ((lambda (v.16$4783$4819) (if (pair? v.16$4783$4819) ((lambda (v.17$4784$4821) ((lambda (p$4822) ((lambda (v.18$4785$4823) (if (pair? v.18$4785$4823) ((lambda (v.19$4786$4825) ((lambda (sk$4826) ((lambda (v.20$4787$4827) (if (pair? v.20$4787$4827) ((lambda (v.21$4788$4829) ((lambda (fk$4830) ((lambda (v.22$4789$4831) (if (pair? v.22$4789$4831) ((lambda (v.23$4790$4833) ((lambda (i$4834) ((lambda (v.24$4791$4835) (if (null? v.24$4791$4835) (cons (cons-source (rename$4761$4793 (quote if)) (cons-source (cons-source (rename$4761$4793 (quote vector?)) (cons-source v$4801 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$4761$4793 (quote let)) (cons-source (cons-source (cons-source (rename$4761$4793 (quote len)) (cons-source (cons-source (rename$4761$4793 (quote vector-length)) (cons-source v$4801 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$4761$4793 (quote if)) (cons-source (cons-source (rename$4761$4793 (quote >=)) (cons-source (rename$4761$4793 (quote len)) (cons-source n$4805 (quote ()) (quote (n))) (quote (len n))) (quote (>= len n))) (cons-source (cons-source (rename$4761$4793 (quote match-vector-step)) (cons-source v$4801 (cons-source (map (lambda (pat$4838 index$4837) (cons-source pat$4838 (cons-source index$4837 (quote ()) (quote (index))) (quote (pat index)))) pat$4818 index$4817) (cons-source (cons-source (rename$4761$4793 (quote match-vector-tail)) (cons-source v$4801 (cons-source p$4822 (cons-source n$4805 (cons-source (rename$4761$4793 (quote len)) (cons-source sk$4826 (cons-source fk$4830 (quote ()) (quote (fk))) (quote (sk fk))) (quote (len sk fk))) (quote (n len sk fk))) (quote (p n len sk fk))) (quote (v p n len sk fk))) (quote (match-vector-tail v p n len sk fk))) (cons-source fk$4830 (cons-source i$4834 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-tail v p n len sk fk) fk i))) (quote (((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (cons-source fk$4830 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ((>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ()) (quote ((if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (cons-source fk$4830 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) #f) #f)) (cdr v.22$4789$4831))) v.23$4790$4833)) (car v.22$4789$4831)) #f)) (cdr v.20$4787$4827))) v.21$4788$4829)) (car v.20$4787$4827)) #f)) (cdr v.18$4785$4823))) v.19$4786$4825)) (car v.18$4785$4823)) #f)) (cdr v.16$4783$4819))) v.17$4784$4821)) (car v.16$4783$4819)) #f)) (cdr v.5$4772$4806))) (reverse pat-ls10$4777$4815) (reverse index-ls9$4776$4814)) (if (pair? w.7$4774$4816) ((lambda (v.11$4778$4840) (if (pair? v.11$4778$4840) ((lambda (v.12$4779$4842) ((lambda (pat$4843) ((lambda (v.13$4780$4844) (if (pair? v.13$4780$4844) ((lambda (v.14$4781$4846) ((lambda (index$4847) ((lambda (v.15$4782$4848) (if (null? v.15$4782$4848) (lp.8$4775$4813 (cdr w.7$4774$4816) (cons pat$4843 pat-ls10$4777$4815) (cons index$4847 index-ls9$4776$4814)) #f)) (cdr v.13$4780$4844))) v.14$4781$4846)) (car v.13$4780$4844)) #f)) (cdr v.11$4778$4840))) v.12$4779$4842)) (car v.11$4778$4840)) #f)) (car w.7$4774$4816)) #f)))) (lp.8$4775$4813 w.7$4774$4812 pat-ls10$4777$4811 index-ls9$4776$4810)) #f)) v.6$4773$4808 (quote ()) (quote ()))) (car v.5$4772$4806)) #f)) (cdr v.3$4770$4802))) v.4$4771$4804)) (car v.3$4770$4802)) #f)) (cdr v.1$4768$4798))) v.2$4769$4800)) (car v.1$4768$4798)) #f)) (cdr expr$4760$4794))))) (match-vector-step lambda (expr$4606$4644 rename$4607$4643 compare$4608$4642) (car ((lambda (tmp$4646$4672) (if tmp$4646$4672 tmp$4646$4672 ((lambda (tmp$4674$4710) (if tmp$4674$4710 tmp$4674$4710 (cons (error "no expansion for" expr$4606$4644) #f))) ((lambda (v.1$4614$4676) (if (pair? v.1$4614$4676) ((lambda (v.2$4615$4678) ((lambda (v$4679) ((lambda (v.3$4616$4680) (if (pair? v.3$4616$4680) ((lambda (v.4$4617$4682) (if (pair? v.4$4617$4682) ((lambda (v.5$4618$4684) (if (pair? v.5$4618$4684) ((lambda (v.6$4619$4686) ((lambda (pat$4687) ((lambda (v.7$4620$4688) (if (pair? v.7$4620$4688) ((lambda (v.8$4621$4690) ((lambda (index$4691) ((lambda (v.9$4622$4692) (if (null? v.9$4622$4692) ((lambda (v.10$4623$4694) ((lambda (rest$4695) ((lambda (v.11$4624$4696) (if (pair? v.11$4624$4696) ((lambda (v.12$4625$4698) ((lambda (sk$4699) ((lambda (v.13$4626$4700) (if (pair? v.13$4626$4700) ((lambda (v.14$4627$4702) ((lambda (fk$4703) ((lambda (v.15$4628$4704) (if (pair? v.15$4628$4704) ((lambda (v.16$4629$4706) ((lambda (i$4707) ((lambda (v.17$4630$4708) (if (null? v.17$4630$4708) (cons (cons-source (rename$4607$4643 (quote let)) (cons-source (cons-source (cons-source (rename$4607$4643 (quote w)) (cons-source (cons-source (rename$4607$4643 (quote vector-ref)) (cons-source v$4679 (cons-source index$4691 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (quote ()) (quote ((vector-ref v index)))) (quote (w (vector-ref v index)))) (quote ()) (quote ((w (vector-ref v index))))) (cons-source (cons-source (rename$4607$4643 (quote match-one)) (cons-source (rename$4607$4643 (quote w)) (cons-source pat$4687 (cons-source (cons-source (cons-source (rename$4607$4643 (quote vector-ref)) (cons-source v$4679 (cons-source index$4691 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (cons-source (cons-source (rename$4607$4643 (quote vector-set!)) (cons-source v$4679 (cons-source index$4691 (quote ()) (quote (index))) (quote (v index))) (quote (vector-set! v index))) (quote ()) (quote ((vector-set! v index)))) (quote ((vector-ref v index) (vector-set! v index)))) (cons-source (cons-source (rename$4607$4643 (quote match-vector-step)) (cons-source v$4679 (cons-source rest$4695 (cons-source sk$4699 (cons-source fk$4703 (quote ()) (quote (fk))) (quote (sk fk))) (quote (rest sk fk))) (quote (v rest sk fk))) (quote (match-vector-step v rest sk fk))) (cons-source fk$4703 (cons-source i$4707 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-step v rest sk fk) fk i))) (quote (((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote ()) (quote ((match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (let ((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) #f) #f)) (cdr v.15$4628$4704))) v.16$4629$4706)) (car v.15$4628$4704)) #f)) (cdr v.13$4626$4700))) v.14$4627$4702)) (car v.13$4626$4700)) #f)) (cdr v.11$4624$4696))) v.12$4625$4698)) (car v.11$4624$4696)) #f)) (cdr v.3$4616$4680))) v.10$4623$4694)) (cdr v.4$4617$4682)) #f)) (cdr v.7$4620$4688))) v.8$4621$4690)) (car v.7$4620$4688)) #f)) (cdr v.5$4618$4684))) v.6$4619$4686)) (car v.5$4618$4684)) #f)) (car v.4$4617$4682)) #f)) (car v.3$4616$4680)) #f)) (cdr v.1$4614$4676))) v.2$4615$4678)) (car v.1$4614$4676)) #f)) (cdr expr$4606$4644))))) ((lambda (v.18$4631$4648) (if (pair? v.18$4631$4648) ((lambda (v.19$4632$4650) ((lambda (v$4651) ((lambda (v.20$4633$4652) (if (pair? v.20$4633$4652) ((lambda (v.21$4634$4654) (if (null? v.21$4634$4654) ((lambda (v.22$4635$4656) (if (pair? v.22$4635$4656) ((lambda (v.23$4636$4658) (if (list? v.23$4636$4658) ((lambda (sk$4660) ((lambda (v.24$4637$4661) (if (pair? v.24$4637$4661) ((lambda (v.25$4638$4663) ((lambda (fk$4664) ((lambda (v.26$4639$4665) (if (pair? v.26$4639$4665) ((lambda (v.27$4640$4667) ((lambda (i$4668) ((lambda (v.28$4641$4669) (if (null? v.28$4641$4669) (cons (append (map (lambda (sk$4671) sk$4671) sk$4660) (cons-source i$4668 (quote ()) (quote (i)))) #f) #f)) (cdr v.26$4639$4665))) v.27$4640$4667)) (car v.26$4639$4665)) #f)) (cdr v.24$4637$4661))) v.25$4638$4663)) (car v.24$4637$4661)) #f)) (cdr v.22$4635$4656))) v.23$4636$4658) #f)) (car v.22$4635$4656)) #f)) (cdr v.20$4633$4652)) #f)) (car v.20$4633$4652)) #f)) (cdr v.18$4631$4648))) v.19$4632$4650)) (car v.18$4631$4648)) #f)) (cdr expr$4606$4644))))) (match-vector-two lambda (expr$4411$4456 rename$4412$4455 compare$4413$4454) (car ((lambda (tmp$4458$4512) (if tmp$4458$4512 tmp$4458$4512 ((lambda (tmp$4514$4540) (if tmp$4514$4540 tmp$4514$4540 (cons (error "no expansion for" expr$4411$4456) #f))) ((lambda (v.1$4419$4516) (if (pair? v.1$4419$4516) ((lambda (v.2$4420$4518) ((lambda (v$4519) ((lambda (v.3$4421$4520) (if (pair? v.3$4421$4520) ((lambda (v.4$4422$4522) ((lambda (n$4523) ((lambda (v.5$4423$4524) (if (pair? v.5$4423$4524) ((lambda (v.6$4424$4526) (if (list? v.6$4424$4526) ((lambda (pats$4528) ((lambda (v.7$4425$4529) (if (pair? v.7$4425$4529) ((lambda (v.8$4426$4531) (if (pair? v.8$4426$4531) ((lambda (v.9$4427$4533) ((lambda (p$4534) ((lambda (v.10$4428$4535) ((lambda (q$4536) ((lambda (v.11$4429$4537) ((lambda (x$4538) (cons (cons-source (rename$4412$4455 (quote match-vector)) (cons-source v$4519 (cons-source (cons-source (rename$4412$4455 (quote +)) (cons-source n$4523 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source (append (map (lambda (pats$4539) pats$4539) pats$4528) (cons-source (cons-source p$4534 (cons-source n$4523 (quote ()) (quote (n))) (quote (p n))) (quote ()) (quote ((p n))))) (cons-source q$4536 x$4538 (quote (q . x))) (quote ((pats ... (p n)) q . x))) (quote ((+ n 1) (pats ... (p n)) q . x))) (quote (v (+ n 1) (pats ... (p n)) q . x))) (quote (match-vector v (+ n 1) (pats ... (p n)) q . x))) #f)) v.11$4429$4537)) (cdr v.7$4425$4529))) v.10$4428$4535)) (cdr v.8$4426$4531))) v.9$4427$4533)) (car v.8$4426$4531)) #f)) (car v.7$4425$4529)) #f)) (cdr v.5$4423$4524))) v.6$4424$4526) #f)) (car v.5$4423$4524)) #f)) (cdr v.3$4421$4520))) v.4$4422$4522)) (car v.3$4421$4520)) #f)) (cdr v.1$4419$4516))) v.2$4420$4518)) (car v.1$4419$4516)) #f)) (cdr expr$4411$4456))))) ((lambda (v.12$4430$4460) (if (pair? v.12$4430$4460) ((lambda (v.13$4431$4462) ((lambda (v$4463) ((lambda (v.14$4432$4464) (if (pair? v.14$4432$4464) ((lambda (v.15$4433$4466) ((lambda (n$4467) ((lambda (v.16$4434$4468) (if (pair? v.16$4434$4468) ((lambda (v.17$4435$4470) ((lambda (w.18$4436$4474 pat-ls21$4439$4473 index-ls20$4438$4472) ((lambda (lp.19$4437$4475) (set! lp.19$4437$4475 (lambda (w.18$4436$4478 pat-ls21$4439$4477 index-ls20$4438$4476) (if (null? w.18$4436$4478) ((lambda (pat$4480 index$4479) ((lambda (v.27$4445$4481) (if (pair? v.27$4445$4481) ((lambda (v.28$4446$4483) (if (null? v.28$4446$4483) ((lambda (v.29$4447$4485) (if (pair? v.29$4447$4485) ((lambda (v.30$4448$4487) ((lambda (sk$4488) ((lambda (v.31$4449$4489) (if (pair? v.31$4449$4489) ((lambda (v.32$4450$4491) ((lambda (fk$4492) ((lambda (v.33$4451$4493) (if (pair? v.33$4451$4493) ((lambda (v.34$4452$4495) ((lambda (i$4496) ((lambda (v.35$4453$4497) (if (null? v.35$4453$4497) (cons (cons-source (rename$4412$4455 (quote if)) (cons-source (cons-source (rename$4412$4455 (quote vector?)) (cons-source v$4463 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$4412$4455 (quote let)) (cons-source (cons-source (cons-source (rename$4412$4455 (quote len)) (cons-source (cons-source (rename$4412$4455 (quote vector-length)) (cons-source v$4463 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$4412$4455 (quote if)) (cons-source (cons-source (rename$4412$4455 (quote =)) (cons-source (rename$4412$4455 (quote len)) (cons-source n$4467 (quote ()) (quote (n))) (quote (len n))) (quote (= len n))) (cons-source (cons-source (rename$4412$4455 (quote match-vector-step)) (cons-source v$4463 (cons-source (map (lambda (pat$4500 index$4499) (cons-source pat$4500 (cons-source index$4499 (quote ()) (quote (index))) (quote (pat index)))) pat$4480 index$4479) (cons-source sk$4488 (cons-source fk$4492 (cons-source i$4496 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((pat index) ...) sk fk i))) (quote (v ((pat index) ...) sk fk i))) (quote (match-vector-step v ((pat index) ...) sk fk i))) (cons-source fk$4492 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ((= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ()) (quote ((if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (cons-source fk$4492 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) #f) #f)) (cdr v.33$4451$4493))) v.34$4452$4495)) (car v.33$4451$4493)) #f)) (cdr v.31$4449$4489))) v.32$4450$4491)) (car v.31$4449$4489)) #f)) (cdr v.29$4447$4485))) v.30$4448$4487)) (car v.29$4447$4485)) #f)) (cdr v.27$4445$4481)) #f)) (car v.27$4445$4481)) #f)) (cdr v.16$4434$4468))) (reverse pat-ls21$4439$4477) (reverse index-ls20$4438$4476)) (if (pair? w.18$4436$4478) ((lambda (v.22$4440$4502) (if (pair? v.22$4440$4502) ((lambda (v.23$4441$4504) ((lambda (pat$4505) ((lambda (v.24$4442$4506) (if (pair? v.24$4442$4506) ((lambda (v.25$4443$4508) ((lambda (index$4509) ((lambda (v.26$4444$4510) (if (null? v.26$4444$4510) (lp.19$4437$4475 (cdr w.18$4436$4478) (cons pat$4505 pat-ls21$4439$4477) (cons index$4509 index-ls20$4438$4476)) #f)) (cdr v.24$4442$4506))) v.25$4443$4508)) (car v.24$4442$4506)) #f)) (cdr v.22$4440$4502))) v.23$4441$4504)) (car v.22$4440$4502)) #f)) (car w.18$4436$4478)) #f)))) (lp.19$4437$4475 w.18$4436$4474 pat-ls21$4439$4473 index-ls20$4438$4472)) #f)) v.17$4435$4470 (quote ()) (quote ()))) (car v.16$4434$4468)) #f)) (cdr v.14$4432$4464))) v.15$4433$4466)) (car v.14$4432$4464)) #f)) (cdr v.12$4430$4460))) v.13$4431$4462)) (car v.12$4430$4460)) #f)) (cdr expr$4411$4456))))) (match-vector lambda (expr$4232$4275 rename$4233$4274 compare$4234$4273) (car ((lambda (tmp$4277$4305) (if tmp$4277$4305 tmp$4277$4305 ((lambda (tmp$4307$4347) (if tmp$4307$4347 tmp$4307$4347 ((lambda (tmp$4349$4353) (if tmp$4349$4353 tmp$4349$4353 (cons (error "no expansion for" expr$4232$4275) #f))) ((lambda (v.1$4240$4351) ((lambda (x$4352) (cons (cons-source (rename$4233$4274 (quote match-vector-two)) x$4352 (quote (match-vector-two . x))) #f)) v.1$4240$4351)) (cdr expr$4232$4275))))) ((lambda (v.2$4241$4309) (if (pair? v.2$4241$4309) ((lambda (v.3$4242$4311) ((lambda (v$4312) ((lambda (v.4$4243$4313) (if (pair? v.4$4243$4313) ((lambda (v.5$4244$4315) ((lambda (n$4316) ((lambda (v.6$4245$4317) (if (pair? v.6$4245$4317) ((lambda (v.7$4246$4319) ((lambda (pats$4320) ((lambda (v.8$4247$4321) (if (pair? v.8$4247$4321) ((lambda (v.9$4248$4323) (if (pair? v.9$4248$4323) ((lambda (v.10$4249$4325) ((lambda (p$4326) ((lambda (v.11$4250$4327) (if (pair? v.11$4250$4327) ((lambda (v.12$4251$4329) (if (compare$4234$4273 v.12$4251$4329 (rename$4233$4274 (quote ___))) ((lambda (v.13$4252$4331) (if (null? v.13$4252$4331) ((lambda (v.14$4253$4333) (if (pair? v.14$4253$4333) ((lambda (v.15$4254$4335) ((lambda (sk$4336) ((lambda (v.16$4255$4337) (if (pair? v.16$4255$4337) ((lambda (v.17$4256$4339) ((lambda (fk$4340) ((lambda (v.18$4257$4341) (if (pair? v.18$4257$4341) ((lambda (v.19$4258$4343) ((lambda (i$4344) ((lambda (v.20$4259$4345) (if (null? v.20$4259$4345) (cons (cons-source (rename$4233$4274 (quote match-gen-vector-ellipsis)) (cons-source v$4312 (cons-source n$4316 (cons-source pats$4320 (cons-source p$4326 (cons-source sk$4336 (cons-source fk$4340 (cons-source i$4344 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (p sk fk i))) (quote (pats p sk fk i))) (quote (n pats p sk fk i))) (quote (v n pats p sk fk i))) (quote (match-gen-vector-ellipsis v n pats p sk fk i))) #f) #f)) (cdr v.18$4257$4341))) v.19$4258$4343)) (car v.18$4257$4341)) #f)) (cdr v.16$4255$4337))) v.17$4256$4339)) (car v.16$4255$4337)) #f)) (cdr v.14$4253$4333))) v.15$4254$4335)) (car v.14$4253$4333)) #f)) (cdr v.8$4247$4321)) #f)) (cdr v.11$4250$4327)) #f)) (car v.11$4250$4327)) #f)) (cdr v.9$4248$4323))) v.10$4249$4325)) (car v.9$4248$4323)) #f)) (car v.8$4247$4321)) #f)) (cdr v.6$4245$4317))) v.7$4246$4319)) (car v.6$4245$4317)) #f)) (cdr v.4$4243$4313))) v.5$4244$4315)) (car v.4$4243$4313)) #f)) (cdr v.2$4241$4309))) v.3$4242$4311)) (car v.2$4241$4309)) #f)) (cdr expr$4232$4275))))) ((lambda (v.21$4260$4279) (if (pair? v.21$4260$4279) ((lambda (v.22$4261$4281) ((lambda (v$4282) ((lambda (v.23$4262$4283) (if (pair? v.23$4262$4283) ((lambda (v.24$4263$4285) ((lambda (n$4286) ((lambda (v.25$4264$4287) (if (pair? v.25$4264$4287) ((lambda (v.26$4265$4289) ((lambda (pats$4290) ((lambda (v.27$4266$4291) (if (pair? v.27$4266$4291) ((lambda (v.28$4267$4293) (if (pair? v.28$4267$4293) ((lambda (v.29$4268$4295) ((lambda (p$4296) ((lambda (v.30$4269$4297) (if (pair? v.30$4269$4297) ((lambda (v.31$4270$4299) ((lambda (q$4300) ((lambda (v.32$4271$4301) (if (null? v.32$4271$4301) ((lambda (v.33$4272$4303) ((lambda (x$4304) (cons (cons-source (rename$4233$4274 (quote match-check-ellipsis)) (cons-source q$4300 (cons-source (cons-source (rename$4233$4274 (quote match-gen-vector-ellipsis)) (cons-source v$4282 (cons-source n$4286 (cons-source pats$4290 (cons-source p$4296 x$4304 (quote (p . x))) (quote (pats p . x))) (quote (n pats p . x))) (quote (v n pats p . x))) (quote (match-gen-vector-ellipsis v n pats p . x))) (cons-source (cons-source (rename$4233$4274 (quote match-vector-two)) (cons-source v$4282 (cons-source n$4286 (cons-source pats$4290 (cons-source (cons-source p$4296 (cons-source q$4300 (quote ()) (quote (q))) (quote (p q))) x$4304 (quote ((p q) . x))) (quote (pats (p q) . x))) (quote (n pats (p q) . x))) (quote (v n pats (p q) . x))) (quote (match-vector-two v n pats (p q) . x))) (quote ()) (quote ((match-vector-two v n pats (p q) . x)))) (quote ((match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (match-check-ellipsis q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) #f)) v.33$4272$4303)) (cdr v.27$4266$4291)) #f)) (cdr v.30$4269$4297))) v.31$4270$4299)) (car v.30$4269$4297)) #f)) (cdr v.28$4267$4293))) v.29$4268$4295)) (car v.28$4267$4293)) #f)) (car v.27$4266$4291)) #f)) (cdr v.25$4264$4287))) v.26$4265$4289)) (car v.25$4264$4287)) #f)) (cdr v.23$4262$4283))) v.24$4263$4285)) (car v.23$4262$4283)) #f)) (cdr v.21$4260$4279))) v.22$4261$4281)) (car v.21$4260$4279)) #f)) (cdr expr$4232$4275))))) (match-gen-search lambda (expr$4079$4115 rename$4080$4114 compare$4081$4113) (car ((lambda (tmp$4117$4178) (if tmp$4117$4178 tmp$4117$4178 (cons (error "no expansion for" expr$4079$4115) #f))) ((lambda (v.1$4087$4119) (if (pair? v.1$4087$4119) ((lambda (v.2$4088$4121) ((lambda (v$4122) ((lambda (v.3$4089$4123) (if (pair? v.3$4089$4123) ((lambda (v.4$4090$4125) ((lambda (p$4126) ((lambda (v.5$4091$4127) (if (pair? v.5$4091$4127) ((lambda (v.6$4092$4129) ((lambda (q$4130) ((lambda (v.7$4093$4131) (if (pair? v.7$4093$4131) ((lambda (v.8$4094$4133) ((lambda (g+s$4134) ((lambda (v.9$4095$4135) (if (pair? v.9$4095$4135) ((lambda (v.10$4096$4137) ((lambda (sk$4138) ((lambda (v.11$4097$4139) (if (pair? v.11$4097$4139) ((lambda (v.12$4098$4141) ((lambda (fk$4142) ((lambda (v.13$4099$4143) (if (pair? v.13$4099$4143) ((lambda (v.14$4100$4145) ((lambda (i$4146) ((lambda (v.15$4101$4147) (if (pair? v.15$4101$4147) ((lambda (v.16$4102$4149) ((lambda (w.17$4103$4153 id-ls20$4106$4152 id-ls-ls19$4105$4151) ((lambda (lp.18$4104$4154) (set! lp.18$4104$4154 (lambda (w.17$4103$4157 id-ls20$4106$4156 id-ls-ls19$4105$4155) (if (null? w.17$4103$4157) ((lambda (id$4159 id-ls$4158) ((lambda (v.26$4112$4160) (if (null? v.26$4112$4160) (cons (cons-source (rename$4080$4114 (quote letrec)) (cons-source (cons-source (cons-source (rename$4080$4114 (quote try)) (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (cons-source (rename$4080$4114 (quote w)) (cons-source (rename$4080$4114 (quote fail)) id-ls$4158 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4080$4114 (quote match-one)) (cons-source (rename$4080$4114 (quote w)) (cons-source q$4130 (cons-source g+s$4134 (cons-source (cons-source (rename$4080$4114 (quote match-tuck-ids)) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (map (lambda (id$4166 id-ls$4165) (cons-source id$4166 (cons-source (cons-source (rename$4080$4114 (quote reverse)) (cons-source id-ls$4165 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4159 id-ls$4158) (cons-source sk$4138 (quote ()) (quote (sk))) (quote (((id (reverse id-ls)) ...) sk))) (quote (let ((id (reverse id-ls)) ...) sk))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) sk)))) (quote (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)))) (cons-source (cons-source (rename$4080$4114 (quote next)) (cons-source (rename$4080$4114 (quote w)) (cons-source (rename$4080$4114 (quote fail)) id-ls$4158 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (quote (next w fail id-ls ...))) (cons-source i$4146 (quote ()) (quote (i))) (quote ((next w fail id-ls ...) i))) (quote ((match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote ()) (quote ((match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ((w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ()) (quote ((lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (quote (try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (cons-source (cons-source (rename$4080$4114 (quote next)) (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (cons-source (rename$4080$4114 (quote w)) (cons-source (rename$4080$4114 (quote fail)) id-ls$4158 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4080$4114 (quote if)) (cons-source (cons-source (rename$4080$4114 (quote not)) (cons-source (cons-source (rename$4080$4114 (quote pair?)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (pair? w))) (quote ()) (quote ((pair? w)))) (quote (not (pair? w)))) (cons-source (cons-source (rename$4080$4114 (quote fail)) (quote ()) (quote (fail))) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (cons-source (cons-source (rename$4080$4114 (quote u)) (cons-source (cons-source (rename$4080$4114 (quote car)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (car w))) (quote ()) (quote ((car w)))) (quote (u (car w)))) (quote ()) (quote ((u (car w))))) (cons-source (cons-source (rename$4080$4114 (quote match-one)) (cons-source (rename$4080$4114 (quote u)) (cons-source p$4126 (cons-source (cons-source (cons-source (rename$4080$4114 (quote car)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (car w))) (cons-source (cons-source (rename$4080$4114 (quote set-car!)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (set-car! w))) (quote ()) (quote ((set-car! w)))) (quote ((car w) (set-car! w)))) (cons-source (cons-source (rename$4080$4114 (quote match-drop-ids)) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (map (lambda (id$4164 id-ls$4163) (cons-source id-ls$4163 (cons-source (cons-source (rename$4080$4114 (quote cons)) (cons-source id$4164 (cons-source id-ls$4163 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls))) (quote ()) (quote ((cons id id-ls)))) (quote (id-ls (cons id id-ls))))) id$4159 id-ls$4158) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (rename$4080$4114 (quote lp)) (cons-source (cons-source (cons-source (rename$4080$4114 (quote ls)) (cons-source (cons-source (rename$4080$4114 (quote cdr)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (cdr w))) (quote ()) (quote ((cdr w)))) (quote (ls (cdr w)))) (quote ()) (quote ((ls (cdr w))))) (cons-source (cons-source (rename$4080$4114 (quote if)) (cons-source (cons-source (rename$4080$4114 (quote pair?)) (cons-source (rename$4080$4114 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4080$4114 (quote try)) (cons-source (cons-source (rename$4080$4114 (quote car)) (cons-source (rename$4080$4114 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$4080$4114 (quote lp)) (cons-source (cons-source (rename$4080$4114 (quote cdr)) (cons-source (rename$4080$4114 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (quote ()) (quote ((cdr ls)))) (quote (lp (cdr ls)))) (quote ()) (quote ((lp (cdr ls))))) (quote (() (lp (cdr ls))))) (quote (lambda () (lp (cdr ls))))) id-ls$4158 (quote ((lambda () (lp (cdr ls))) id-ls ...))) (quote ((car ls) (lambda () (lp (cdr ls))) id-ls ...))) (quote (try (car ls) (lambda () (lp (cdr ls))) id-ls ...))) (cons-source (cons-source (rename$4080$4114 (quote fail)) (quote ()) (quote (fail))) (quote ()) (quote ((fail)))) (quote ((try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ((pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ()) (quote ((if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote ()) (quote ((let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote ()) (quote ((let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (quote (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (cons-source (cons-source (rename$4080$4114 (quote fail)) (quote ()) (quote (fail))) (cons-source i$4146 (quote ()) (quote (i))) (quote ((fail) i))) (quote ((match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote ()) (quote ((match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote ()) (quote ((let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ()) (quote ((if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ((w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ()) (quote ((lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote ()) (quote ((next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (quote ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (map (lambda (id-ls$4162) (cons-source id-ls$4162 (cons-source (cons-source (rename$4080$4114 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4158) (cons-source (cons-source (rename$4080$4114 (quote try)) (cons-source v$4122 (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (quote ()) (cons-source fk$4142 (quote ()) (quote (fk))) (quote (() fk))) (quote (lambda () fk))) id-ls$4158 (quote ((lambda () fk) id-ls ...))) (quote (v (lambda () fk) id-ls ...))) (quote (try v (lambda () fk) id-ls ...))) (quote ()) (quote ((try v (lambda () fk) id-ls ...)))) (quote (((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote ()) (quote ((let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (letrec ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) #f) #f)) (cdr v.15$4101$4147))) (reverse id-ls20$4106$4156) (reverse id-ls-ls19$4105$4155)) (if (pair? w.17$4103$4157) ((lambda (v.21$4107$4168) (if (pair? v.21$4107$4168) ((lambda (v.22$4108$4170) ((lambda (id$4171) ((lambda (v.23$4109$4172) (if (pair? v.23$4109$4172) ((lambda (v.24$4110$4174) ((lambda (id-ls$4175) ((lambda (v.25$4111$4176) (if (null? v.25$4111$4176) (lp.18$4104$4154 (cdr w.17$4103$4157) (cons id$4171 id-ls20$4106$4156) (cons id-ls$4175 id-ls-ls19$4105$4155)) #f)) (cdr v.23$4109$4172))) v.24$4110$4174)) (car v.23$4109$4172)) #f)) (cdr v.21$4107$4168))) v.22$4108$4170)) (car v.21$4107$4168)) #f)) (car w.17$4103$4157)) #f)))) (lp.18$4104$4154 w.17$4103$4153 id-ls20$4106$4152 id-ls-ls19$4105$4151)) #f)) v.16$4102$4149 (quote ()) (quote ()))) (car v.15$4101$4147)) #f)) (cdr v.13$4099$4143))) v.14$4100$4145)) (car v.13$4099$4143)) #f)) (cdr v.11$4097$4139))) v.12$4098$4141)) (car v.11$4097$4139)) #f)) (cdr v.9$4095$4135))) v.10$4096$4137)) (car v.9$4095$4135)) #f)) (cdr v.7$4093$4131))) v.8$4094$4133)) (car v.7$4093$4131)) #f)) (cdr v.5$4091$4127))) v.6$4092$4129)) (car v.5$4091$4127)) #f)) (cdr v.3$4089$4123))) v.4$4090$4125)) (car v.3$4089$4123)) #f)) (cdr v.1$4087$4119))) v.2$4088$4121)) (car v.1$4087$4119)) #f)) (cdr expr$4079$4115))))) (match-verify-no-ellipsis lambda (expr$3972$3999 rename$3973$3998 compare$3974$3997) (car ((lambda (tmp$4001$4017) (if tmp$4001$4017 tmp$4001$4017 ((lambda (tmp$4019$4031) (if tmp$4019$4031 tmp$4019$4031 ((lambda (tmp$4033$4045) (if tmp$4033$4045 tmp$4033$4045 (cons (error "no expansion for" expr$3972$3999) #f))) ((lambda (v.1$3980$4035) (if (pair? v.1$3980$4035) ((lambda (v.2$3981$4037) ((lambda (x$4038) ((lambda (v.3$3982$4039) (if (pair? v.3$3982$4039) ((lambda (v.4$3983$4041) ((lambda (sk$4042) ((lambda (v.5$3984$4043) (if (null? v.5$3984$4043) (cons (cons-source (rename$3973$3998 (quote match-syntax-error)) (cons-source "dotted tail not allowed after ellipsis" (cons-source x$4038 (quote ()) (quote (x))) (quote ("dotted tail not allowed after ellipsis" x))) (quote (match-syntax-error "dotted tail not allowed after ellipsis" x))) #f) #f)) (cdr v.3$3982$4039))) v.4$3983$4041)) (car v.3$3982$4039)) #f)) (cdr v.1$3980$4035))) v.2$3981$4037)) (car v.1$3980$4035)) #f)) (cdr expr$3972$3999))))) ((lambda (v.6$3985$4021) (if (pair? v.6$3985$4021) ((lambda (v.7$3986$4023) (if (null? v.7$3986$4023) ((lambda (v.8$3987$4025) (if (pair? v.8$3987$4025) ((lambda (v.9$3988$4027) ((lambda (sk$4028) ((lambda (v.10$3989$4029) (if (null? v.10$3989$4029) (cons sk$4028 #f) #f)) (cdr v.8$3987$4025))) v.9$3988$4027)) (car v.8$3987$4025)) #f)) (cdr v.6$3985$4021)) #f)) (car v.6$3985$4021)) #f)) (cdr expr$3972$3999))))) ((lambda (v.11$3990$4003) (if (pair? v.11$3990$4003) ((lambda (v.12$3991$4005) (if (pair? v.12$3991$4005) ((lambda (v.13$3992$4007) ((lambda (x$4008) ((lambda (v.14$3993$4009) ((lambda (y$4010) ((lambda (v.15$3994$4011) (if (pair? v.15$3994$4011) ((lambda (v.16$3995$4013) ((lambda (sk$4014) ((lambda (v.17$3996$4015) (if (null? v.17$3996$4015) (cons (cons-source (rename$3973$3998 (quote match-check-ellipsis)) (cons-source x$4008 (cons-source (cons-source (rename$3973$3998 (quote match-syntax-error)) (cons-source "multiple ellipsis patterns not allowed at same level" (quote ()) (quote ("multiple ellipsis patterns not allowed at same level"))) (quote (match-syntax-error "multiple ellipsis patterns not allowed at same level"))) (cons-source (cons-source (rename$3973$3998 (quote match-verify-no-ellipsis)) (cons-source y$4010 (cons-source sk$4014 (quote ()) (quote (sk))) (quote (y sk))) (quote (match-verify-no-ellipsis y sk))) (quote ()) (quote ((match-verify-no-ellipsis y sk)))) (quote ((match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (match-check-ellipsis x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) #f) #f)) (cdr v.15$3994$4011))) v.16$3995$4013)) (car v.15$3994$4011)) #f)) (cdr v.11$3990$4003))) v.14$3993$4009)) (cdr v.12$3991$4005))) v.13$3992$4007)) (car v.12$3991$4005)) #f)) (car v.11$3990$4003)) #f)) (cdr expr$3972$3999))))) (match-gen-ellipsis lambda (expr$3679$3741 rename$3680$3740 compare$3681$3739) (car ((lambda (tmp$3743$3807) (if tmp$3743$3807 tmp$3743$3807 ((lambda (tmp$3809$3871) (if tmp$3809$3871 tmp$3809$3871 (cons (error "no expansion for" expr$3679$3741) #f))) ((lambda (v.1$3687$3811) (if (pair? v.1$3687$3811) ((lambda (v.2$3688$3813) ((lambda (v$3814) ((lambda (v.3$3689$3815) (if (pair? v.3$3689$3815) ((lambda (v.4$3690$3817) ((lambda (p$3818) ((lambda (v.5$3691$3819) (if (pair? v.5$3691$3819) ((lambda (v.6$3692$3821) ((lambda (r$3822) ((lambda (v.7$3693$3823) (if (pair? v.7$3693$3823) ((lambda (v.8$3694$3825) ((lambda (g+s$3826) ((lambda (v.9$3695$3827) (if (pair? v.9$3695$3827) ((lambda (v.10$3696$3829) (if (list? v.10$3696$3829) ((lambda (sk$3831) ((lambda (v.11$3697$3832) (if (pair? v.11$3697$3832) ((lambda (v.12$3698$3834) ((lambda (fk$3835) ((lambda (v.13$3699$3836) (if (pair? v.13$3699$3836) ((lambda (v.14$3700$3838) ((lambda (i$3839) ((lambda (v.15$3701$3840) (if (pair? v.15$3701$3840) ((lambda (v.16$3702$3842) ((lambda (w.17$3703$3846 id-ls20$3706$3845 id-ls-ls19$3705$3844) ((lambda (lp.18$3704$3847) (set! lp.18$3704$3847 (lambda (w.17$3703$3850 id-ls20$3706$3849 id-ls-ls19$3705$3848) (if (null? w.17$3703$3850) ((lambda (id$3852 id-ls$3851) ((lambda (v.26$3712$3853) (if (null? v.26$3712$3853) (cons (cons-source (rename$3680$3740 (quote match-verify-no-ellipsis)) (cons-source r$3822 (cons-source (cons-source (rename$3680$3740 (quote let*)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote tail-len)) (cons-source (cons-source (rename$3680$3740 (quote length)) (cons-source (cons-source (rename$3680$3740 (quote quote)) (cons-source r$3822 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$3680$3740 (quote ls)) (cons-source v$3814 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$3680$3740 (quote len)) (cons-source (cons-source (rename$3680$3740 (quote and)) (cons-source (cons-source (rename$3680$3740 (quote list?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$3680$3740 (quote length)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (quote ()) (quote ((length ls)))) (quote ((list? ls) (length ls)))) (quote (and (list? ls) (length ls)))) (quote ()) (quote ((and (list? ls) (length ls))))) (quote (len (and (list? ls) (length ls))))) (quote ()) (quote ((len (and (list? ls) (length ls)))))) (quote ((ls v) (len (and (list? ls) (length ls)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))))) (cons-source (cons-source (rename$3680$3740 (quote if)) (cons-source (cons-source (rename$3680$3740 (quote or)) (cons-source (cons-source (rename$3680$3740 (quote not)) (cons-source (rename$3680$3740 (quote len)) (quote ()) (quote (len))) (quote (not len))) (cons-source (cons-source (rename$3680$3740 (quote <)) (cons-source (rename$3680$3740 (quote len)) (cons-source (rename$3680$3740 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (len tail-len))) (quote (< len tail-len))) (quote ()) (quote ((< len tail-len)))) (quote ((not len) (< len tail-len)))) (quote (or (not len) (< len tail-len)))) (cons-source fk$3835 (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote ls)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$3680$3740 (quote n)) (cons-source (rename$3680$3740 (quote len)) (quote ()) (quote (len))) (quote (n len))) (map (lambda (id-ls$3859) (cons-source id-ls$3859 (cons-source (cons-source (rename$3680$3740 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$3851) (quote ((n len) (id-ls (quote ())) ...))) (quote ((ls ls) (n len) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3680$3740 (quote cond)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote =)) (cons-source (rename$3680$3740 (quote n)) (cons-source (rename$3680$3740 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (n tail-len))) (quote (= n tail-len))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (map (lambda (id$3858 id-ls$3857) (cons-source id$3858 (cons-source (cons-source (rename$3680$3740 (quote reverse)) (cons-source id-ls$3857 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$3852 id-ls$3851) (cons-source (cons-source (rename$3680$3740 (quote match-one)) (cons-source (rename$3680$3740 (quote ls)) (cons-source r$3822 (cons-source (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (cons-source sk$3831 (cons-source fk$3835 (cons-source i$3839 (quote ()) (quote (i))) (quote (fk i))) (quote ((sk ...) fk i))) (quote ((#f #f) (sk ...) fk i))) (quote (r (#f #f) (sk ...) fk i))) (quote (ls r (#f #f) (sk ...) fk i))) (quote (match-one ls r (#f #f) (sk ...) fk i))) (quote ()) (quote ((match-one ls r (#f #f) (sk ...) fk i)))) (quote (((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i)))) (quote (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i)))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))))) (quote ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))))) (cons-source (cons-source (cons-source (rename$3680$3740 (quote pair?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote w)) (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3680$3740 (quote match-one)) (cons-source (rename$3680$3740 (quote w)) (cons-source p$3818 (cons-source (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3680$3740 (quote set-car!)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3680$3740 (quote match-drop-ids)) (cons-source (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (rename$3680$3740 (quote cdr)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$3680$3740 (quote -)) (cons-source (rename$3680$3740 (quote n)) (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (- n 1))) (map (lambda (id$3856 id-ls$3855) (cons-source (rename$3680$3740 (quote cons)) (cons-source id$3856 (cons-source id-ls$3855 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$3852 id-ls$3851) (quote ((- n 1) (cons id id-ls) ...))) (quote ((cdr ls) (- n 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (- n 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (cons-source fk$3835 (cons-source i$3839 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i)))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i)))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))))) (cons-source (cons-source (rename$3680$3740 (quote else)) (cons-source fk$3835 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))) (quote ()) (quote ((cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote ()) (quote ((let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ((or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ()) (quote ((if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))))) (quote (((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))))) (quote (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))))) (quote ()) (quote ((let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))))) (quote (r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))))) (quote (match-verify-no-ellipsis r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))))) #f) #f)) (cdr v.15$3701$3840))) (reverse id-ls20$3706$3849) (reverse id-ls-ls19$3705$3848)) (if (pair? w.17$3703$3850) ((lambda (v.21$3707$3861) (if (pair? v.21$3707$3861) ((lambda (v.22$3708$3863) ((lambda (id$3864) ((lambda (v.23$3709$3865) (if (pair? v.23$3709$3865) ((lambda (v.24$3710$3867) ((lambda (id-ls$3868) ((lambda (v.25$3711$3869) (if (null? v.25$3711$3869) (lp.18$3704$3847 (cdr w.17$3703$3850) (cons id$3864 id-ls20$3706$3849) (cons id-ls$3868 id-ls-ls19$3705$3848)) #f)) (cdr v.23$3709$3865))) v.24$3710$3867)) (car v.23$3709$3865)) #f)) (cdr v.21$3707$3861))) v.22$3708$3863)) (car v.21$3707$3861)) #f)) (car w.17$3703$3850)) #f)))) (lp.18$3704$3847 w.17$3703$3846 id-ls20$3706$3845 id-ls-ls19$3705$3844)) #f)) v.16$3702$3842 (quote ()) (quote ()))) (car v.15$3701$3840)) #f)) (cdr v.13$3699$3836))) v.14$3700$3838)) (car v.13$3699$3836)) #f)) (cdr v.11$3697$3832))) v.12$3698$3834)) (car v.11$3697$3832)) #f)) (cdr v.9$3695$3827))) v.10$3696$3829) #f)) (car v.9$3695$3827)) #f)) (cdr v.7$3693$3823))) v.8$3694$3825)) (car v.7$3693$3823)) #f)) (cdr v.5$3691$3819))) v.6$3692$3821)) (car v.5$3691$3819)) #f)) (cdr v.3$3689$3815))) v.4$3690$3817)) (car v.3$3689$3815)) #f)) (cdr v.1$3687$3811))) v.2$3688$3813)) (car v.1$3687$3811)) #f)) (cdr expr$3679$3741))))) ((lambda (v.27$3713$3745) (if (pair? v.27$3713$3745) ((lambda (v.28$3714$3747) ((lambda (v$3748) ((lambda (v.29$3715$3749) (if (pair? v.29$3715$3749) ((lambda (v.30$3716$3751) ((lambda (p$3752) ((lambda (v.31$3717$3753) (if (pair? v.31$3717$3753) ((lambda (v.32$3718$3755) (if (null? v.32$3718$3755) ((lambda (v.33$3719$3757) (if (pair? v.33$3719$3757) ((lambda (v.34$3720$3759) ((lambda (g+s$3760) ((lambda (v.35$3721$3761) (if (pair? v.35$3721$3761) ((lambda (v.36$3722$3763) (if (list? v.36$3722$3763) ((lambda (sk$3765) ((lambda (v.37$3723$3766) (if (pair? v.37$3723$3766) ((lambda (v.38$3724$3768) ((lambda (fk$3769) ((lambda (v.39$3725$3770) (if (pair? v.39$3725$3770) ((lambda (v.40$3726$3772) ((lambda (i$3773) ((lambda (v.41$3727$3774) (if (pair? v.41$3727$3774) ((lambda (v.42$3728$3776) ((lambda (w.43$3729$3780 id-ls46$3732$3779 id-ls-ls45$3731$3778) ((lambda (lp.44$3730$3781) (set! lp.44$3730$3781 (lambda (w.43$3729$3784 id-ls46$3732$3783 id-ls-ls45$3731$3782) (if (null? w.43$3729$3784) ((lambda (id$3786 id-ls$3785) ((lambda (v.52$3738$3787) (if (null? v.52$3738$3787) (cons (cons-source (rename$3680$3740 (quote match-check-identifier)) (cons-source p$3752 (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (cons-source (cons-source p$3752 (cons-source v$3748 (quote ()) (quote (v))) (quote (p v))) (quote ()) (quote ((p v)))) (cons-source (cons-source (rename$3680$3740 (quote if)) (cons-source (cons-source (rename$3680$3740 (quote list?)) (cons-source p$3752 (quote ()) (quote (p))) (quote (list? p))) (cons-source (append (map (lambda (sk$3795) sk$3795) sk$3765) (cons-source i$3773 (quote ()) (quote (i)))) (cons-source fk$3769 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((list? p) (sk ... i) fk))) (quote (if (list? p) (sk ... i) fk))) (quote ()) (quote ((if (list? p) (sk ... i) fk)))) (quote (((p v)) (if (list? p) (sk ... i) fk)))) (quote (let ((p v)) (if (list? p) (sk ... i) fk)))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote ls)) (cons-source v$3748 (quote ()) (quote (v))) (quote (ls v))) (map (lambda (id-ls$3794) (cons-source id-ls$3794 (cons-source (cons-source (rename$3680$3740 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$3785) (quote ((ls v) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3680$3740 (quote cond)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote null?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (null? ls))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (map (lambda (id$3793 id-ls$3792) (cons-source id$3793 (cons-source (cons-source (rename$3680$3740 (quote reverse)) (cons-source id-ls$3792 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$3786 id-ls$3785) (cons-source (append (map (lambda (sk$3791) sk$3791) sk$3765) (cons-source i$3773 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (sk ... i))))) (quote ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))))) (cons-source (cons-source (cons-source (rename$3680$3740 (quote pair?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote w)) (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3680$3740 (quote match-one)) (cons-source (rename$3680$3740 (quote w)) (cons-source p$3752 (cons-source (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3680$3740 (quote set-car!)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3680$3740 (quote match-drop-ids)) (cons-source (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (rename$3680$3740 (quote cdr)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (map (lambda (id$3790 id-ls$3789) (cons-source (rename$3680$3740 (quote cons)) (cons-source id$3790 (cons-source id-ls$3789 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$3786 id-ls$3785) (quote ((cdr ls) (cons id id-ls) ...))) (quote (loop (cdr ls) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)))) (cons-source fk$3769 (cons-source i$3773 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (cons-source (cons-source (rename$3680$3740 (quote else)) (cons-source fk$3769 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote ()) (quote ((cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote ()) (quote ((let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ((let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (match-check-identifier p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) #f) #f)) (cdr v.41$3727$3774))) (reverse id-ls46$3732$3783) (reverse id-ls-ls45$3731$3782)) (if (pair? w.43$3729$3784) ((lambda (v.47$3733$3797) (if (pair? v.47$3733$3797) ((lambda (v.48$3734$3799) ((lambda (id$3800) ((lambda (v.49$3735$3801) (if (pair? v.49$3735$3801) ((lambda (v.50$3736$3803) ((lambda (id-ls$3804) ((lambda (v.51$3737$3805) (if (null? v.51$3737$3805) (lp.44$3730$3781 (cdr w.43$3729$3784) (cons id$3800 id-ls46$3732$3783) (cons id-ls$3804 id-ls-ls45$3731$3782)) #f)) (cdr v.49$3735$3801))) v.50$3736$3803)) (car v.49$3735$3801)) #f)) (cdr v.47$3733$3797))) v.48$3734$3799)) (car v.47$3733$3797)) #f)) (car w.43$3729$3784)) #f)))) (lp.44$3730$3781 w.43$3729$3780 id-ls46$3732$3779 id-ls-ls45$3731$3778)) #f)) v.42$3728$3776 (quote ()) (quote ()))) (car v.41$3727$3774)) #f)) (cdr v.39$3725$3770))) v.40$3726$3772)) (car v.39$3725$3770)) #f)) (cdr v.37$3723$3766))) v.38$3724$3768)) (car v.37$3723$3766)) #f)) (cdr v.35$3721$3761))) v.36$3722$3763) #f)) (car v.35$3721$3761)) #f)) (cdr v.33$3719$3757))) v.34$3720$3759)) (car v.33$3719$3757)) #f)) (cdr v.31$3717$3753)) #f)) (car v.31$3717$3753)) #f)) (cdr v.29$3715$3749))) v.30$3716$3751)) (car v.29$3715$3749)) #f)) (cdr v.27$3713$3745))) v.28$3714$3747)) (car v.27$3713$3745)) #f)) (cdr expr$3679$3741))))) (match-gen-or-step lambda (expr$3499$3542 rename$3500$3541 compare$3501$3540) (car ((lambda (tmp$3544$3568) (if tmp$3544$3568 tmp$3544$3568 ((lambda (tmp$3570$3586) (if tmp$3570$3586 tmp$3570$3586 ((lambda (tmp$3588$3620) (if tmp$3588$3620 tmp$3588$3620 (cons (error "no expansion for" expr$3499$3542) #f))) ((lambda (v.1$3507$3590) (if (pair? v.1$3507$3590) ((lambda (v.2$3508$3592) ((lambda (v$3593) ((lambda (v.3$3509$3594) (if (pair? v.3$3509$3594) ((lambda (v.4$3510$3596) (if (pair? v.4$3510$3596) ((lambda (v.5$3511$3598) ((lambda (p$3599) ((lambda (v.6$3512$3600) ((lambda (q$3601) ((lambda (v.7$3513$3602) (if (pair? v.7$3513$3602) ((lambda (v.8$3514$3604) ((lambda (g+s$3605) ((lambda (v.9$3515$3606) (if (pair? v.9$3515$3606) ((lambda (v.10$3516$3608) ((lambda (sk$3609) ((lambda (v.11$3517$3610) (if (pair? v.11$3517$3610) ((lambda (v.12$3518$3612) ((lambda (fk$3613) ((lambda (v.13$3519$3614) (if (pair? v.13$3519$3614) ((lambda (v.14$3520$3616) ((lambda (i$3617) ((lambda (v.15$3521$3618) (if (null? v.15$3521$3618) (cons (cons-source (rename$3500$3541 (quote let)) (cons-source (cons-source (cons-source (rename$3500$3541 (quote fk2)) (cons-source (cons-source (rename$3500$3541 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$3500$3541 (quote match-gen-or-step)) (cons-source v$3593 (cons-source q$3601 (cons-source g+s$3605 (cons-source sk$3609 (cons-source fk$3613 (cons-source i$3617 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (v q g+s sk fk i))) (quote (match-gen-or-step v q g+s sk fk i))) (quote ()) (quote ((match-gen-or-step v q g+s sk fk i)))) (quote (() (match-gen-or-step v q g+s sk fk i)))) (quote (lambda () (match-gen-or-step v q g+s sk fk i)))) (quote ()) (quote ((lambda () (match-gen-or-step v q g+s sk fk i))))) (quote (fk2 (lambda () (match-gen-or-step v q g+s sk fk i))))) (quote ()) (quote ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))))) (cons-source (cons-source (rename$3500$3541 (quote match-one)) (cons-source v$3593 (cons-source p$3599 (cons-source g+s$3605 (cons-source sk$3609 (cons-source (cons-source (rename$3500$3541 (quote fk2)) (quote ()) (quote (fk2))) (cons-source i$3617 (quote ()) (quote (i))) (quote ((fk2) i))) (quote (sk (fk2) i))) (quote (g+s sk (fk2) i))) (quote (p g+s sk (fk2) i))) (quote (v p g+s sk (fk2) i))) (quote (match-one v p g+s sk (fk2) i))) (quote ()) (quote ((match-one v p g+s sk (fk2) i)))) (quote (((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) (quote (let ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) #f) #f)) (cdr v.13$3519$3614))) v.14$3520$3616)) (car v.13$3519$3614)) #f)) (cdr v.11$3517$3610))) v.12$3518$3612)) (car v.11$3517$3610)) #f)) (cdr v.9$3515$3606))) v.10$3516$3608)) (car v.9$3515$3606)) #f)) (cdr v.7$3513$3602))) v.8$3514$3604)) (car v.7$3513$3602)) #f)) (cdr v.3$3509$3594))) v.6$3512$3600)) (cdr v.4$3510$3596))) v.5$3511$3598)) (car v.4$3510$3596)) #f)) (car v.3$3509$3594)) #f)) (cdr v.1$3507$3590))) v.2$3508$3592)) (car v.1$3507$3590)) #f)) (cdr expr$3499$3542))))) ((lambda (v.16$3522$3572) (if (pair? v.16$3522$3572) ((lambda (v.17$3523$3574) ((lambda (v$3575) ((lambda (v.18$3524$3576) (if (pair? v.18$3524$3576) ((lambda (v.19$3525$3578) (if (pair? v.19$3525$3578) ((lambda (v.20$3526$3580) ((lambda (p$3581) ((lambda (v.21$3527$3582) (if (null? v.21$3527$3582) ((lambda (v.22$3528$3584) ((lambda (x$3585) (cons (cons-source (rename$3500$3541 (quote match-one)) (cons-source v$3575 (cons-source p$3581 x$3585 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.22$3528$3584)) (cdr v.18$3524$3576)) #f)) (cdr v.19$3525$3578))) v.20$3526$3580)) (car v.19$3525$3578)) #f)) (car v.18$3524$3576)) #f)) (cdr v.16$3522$3572))) v.17$3523$3574)) (car v.16$3522$3572)) #f)) (cdr expr$3499$3542))))) ((lambda (v.23$3529$3546) (if (pair? v.23$3529$3546) ((lambda (v.24$3530$3548) ((lambda (v$3549) ((lambda (v.25$3531$3550) (if (pair? v.25$3531$3550) ((lambda (v.26$3532$3552) (if (null? v.26$3532$3552) ((lambda (v.27$3533$3554) (if (pair? v.27$3533$3554) ((lambda (v.28$3534$3556) ((lambda (g+s$3557) ((lambda (v.29$3535$3558) (if (pair? v.29$3535$3558) ((lambda (v.30$3536$3560) ((lambda (sk$3561) ((lambda (v.31$3537$3562) (if (pair? v.31$3537$3562) ((lambda (v.32$3538$3564) ((lambda (fk$3565) ((lambda (v.33$3539$3566) ((lambda (x$3567) (cons fk$3565 #f)) v.33$3539$3566)) (cdr v.31$3537$3562))) v.32$3538$3564)) (car v.31$3537$3562)) #f)) (cdr v.29$3535$3558))) v.30$3536$3560)) (car v.29$3535$3558)) #f)) (cdr v.27$3533$3554))) v.28$3534$3556)) (car v.27$3533$3554)) #f)) (cdr v.25$3531$3550)) #f)) (car v.25$3531$3550)) #f)) (cdr v.23$3529$3546))) v.24$3530$3548)) (car v.23$3529$3546)) #f)) (cdr expr$3499$3542))))) (match-gen-or lambda (expr$3359$3393 rename$3360$3392 compare$3361$3391) (car ((lambda (tmp$3395$3451) (if tmp$3395$3451 tmp$3395$3451 (cons (error "no expansion for" expr$3359$3393) #f))) ((lambda (v.1$3367$3397) (if (pair? v.1$3367$3397) ((lambda (v.2$3368$3399) ((lambda (v$3400) ((lambda (v.3$3369$3401) (if (pair? v.3$3369$3401) ((lambda (v.4$3370$3403) ((lambda (p$3404) ((lambda (v.5$3371$3405) (if (pair? v.5$3371$3405) ((lambda (v.6$3372$3407) ((lambda (g+s$3408) ((lambda (v.7$3373$3409) (if (pair? v.7$3373$3409) ((lambda (v.8$3374$3411) (if (list? v.8$3374$3411) ((lambda (sk$3413) ((lambda (v.9$3375$3414) (if (pair? v.9$3375$3414) ((lambda (v.10$3376$3416) ((lambda (fk$3417) ((lambda (v.11$3377$3418) (if (pair? v.11$3377$3418) ((lambda (v.12$3378$3420) (if (list? v.12$3378$3420) ((lambda (i$3422) ((lambda (v.13$3379$3423) (if (pair? v.13$3379$3423) ((lambda (v.14$3380$3425) ((lambda (w.15$3381$3429 id-ls18$3384$3428 id-ls-ls17$3383$3427) ((lambda (lp.16$3382$3430) (set! lp.16$3382$3430 (lambda (w.15$3381$3433 id-ls18$3384$3432 id-ls-ls17$3383$3431) (if (null? w.15$3381$3433) ((lambda (id$3435 id-ls$3434) ((lambda (v.24$3390$3436) (if (null? v.24$3390$3436) (cons (cons-source (rename$3360$3392 (quote let)) (cons-source (cons-source (cons-source (rename$3360$3392 (quote sk2)) (cons-source (cons-source (rename$3360$3392 (quote lambda)) (cons-source id$3435 (cons-source (append (map (lambda (sk$3439) sk$3439) sk$3413) (cons-source (append (map (lambda (i$3438) i$3438) i$3422) id$3435) (quote ()) (quote ((i ... id ...))))) (quote ()) (quote ((sk ... (i ... id ...))))) (quote ((id ...) (sk ... (i ... id ...))))) (quote (lambda (id ...) (sk ... (i ... id ...))))) (quote ()) (quote ((lambda (id ...) (sk ... (i ... id ...)))))) (quote (sk2 (lambda (id ...) (sk ... (i ... id ...)))))) (quote ()) (quote ((sk2 (lambda (id ...) (sk ... (i ... id ...))))))) (cons-source (cons-source (rename$3360$3392 (quote match-gen-or-step)) (cons-source v$3400 (cons-source p$3404 (cons-source g+s$3408 (cons-source (cons-source (rename$3360$3392 (quote match-drop-ids)) (cons-source (cons-source (rename$3360$3392 (quote sk2)) id$3435 (quote (sk2 id ...))) (quote ()) (quote ((sk2 id ...)))) (quote (match-drop-ids (sk2 id ...)))) (cons-source fk$3417 (cons-source i$3422 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote ()) (quote ((match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (((sk2 (lambda (id ...) (sk ... (i ... id ...))))) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (let ((sk2 (lambda (id ...) (sk ... (i ... id ...))))) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) #f) #f)) (cdr v.13$3379$3423))) (reverse id-ls18$3384$3432) (reverse id-ls-ls17$3383$3431)) (if (pair? w.15$3381$3433) ((lambda (v.19$3385$3441) (if (pair? v.19$3385$3441) ((lambda (v.20$3386$3443) ((lambda (id$3444) ((lambda (v.21$3387$3445) (if (pair? v.21$3387$3445) ((lambda (v.22$3388$3447) ((lambda (id-ls$3448) ((lambda (v.23$3389$3449) (if (null? v.23$3389$3449) (lp.16$3382$3430 (cdr w.15$3381$3433) (cons id$3444 id-ls18$3384$3432) (cons id-ls$3448 id-ls-ls17$3383$3431)) #f)) (cdr v.21$3387$3445))) v.22$3388$3447)) (car v.21$3387$3445)) #f)) (cdr v.19$3385$3441))) v.20$3386$3443)) (car v.19$3385$3441)) #f)) (car w.15$3381$3433)) #f)))) (lp.16$3382$3430 w.15$3381$3429 id-ls18$3384$3428 id-ls-ls17$3383$3427)) #f)) v.14$3380$3425 (quote ()) (quote ()))) (car v.13$3379$3423)) #f)) (cdr v.11$3377$3418))) v.12$3378$3420) #f)) (car v.11$3377$3418)) #f)) (cdr v.9$3375$3414))) v.10$3376$3416)) (car v.9$3375$3414)) #f)) (cdr v.7$3373$3409))) v.8$3374$3411) #f)) (car v.7$3373$3409)) #f)) (cdr v.5$3371$3405))) v.6$3372$3407)) (car v.5$3371$3405)) #f)) (cdr v.3$3369$3401))) v.4$3370$3403)) (car v.3$3369$3401)) #f)) (cdr v.1$3367$3397))) v.2$3368$3399)) (car v.1$3367$3397)) #f)) (cdr expr$3359$3393))))) (match-drop-first-arg lambda (expr$3314$3329 rename$3315$3328 compare$3316$3327) (car ((lambda (tmp$3331$3343) (if tmp$3331$3343 tmp$3331$3343 (cons (error "no expansion for" expr$3314$3329) #f))) ((lambda (v.1$3322$3333) (if (pair? v.1$3322$3333) ((lambda (v.2$3323$3335) ((lambda (arg$3336) ((lambda (v.3$3324$3337) (if (pair? v.3$3324$3337) ((lambda (v.4$3325$3339) ((lambda (expr$3340) ((lambda (v.5$3326$3341) (if (null? v.5$3326$3341) (cons expr$3340 #f) #f)) (cdr v.3$3324$3337))) v.4$3325$3339)) (car v.3$3324$3337)) #f)) (cdr v.1$3322$3333))) v.2$3323$3335)) (car v.1$3322$3333)) #f)) (cdr expr$3314$3329))))) (match-tuck-ids lambda (expr$3247$3266 rename$3248$3265 compare$3249$3264) (car ((lambda (tmp$3268$3291) (if tmp$3268$3291 tmp$3268$3291 (cons (error "no expansion for" expr$3247$3266) #f))) ((lambda (v.1$3255$3270) (if (pair? v.1$3255$3270) ((lambda (v.2$3256$3272) (if (pair? v.2$3256$3272) ((lambda (v.3$3257$3274) ((lambda (letish$3275) ((lambda (v.4$3258$3276) (if (pair? v.4$3258$3276) ((lambda (v.5$3259$3278) ((lambda (args$3279) ((lambda (v.6$3260$3280) (if (pair? v.6$3260$3280) ((lambda (v.7$3261$3282) (if (list? v.7$3261$3282) ((lambda (expr$3284) ((lambda (v.8$3262$3285) (if (null? v.8$3262$3285) ((lambda (v.9$3263$3287) (if (list? v.9$3263$3287) ((lambda (ids$3289) (cons (cons-source letish$3275 (cons-source args$3279 (cons-source (append (map (lambda (expr$3290) expr$3290) expr$3284) ids$3289) (quote ()) (quote ((expr ... ids ...)))) (quote (args (expr ... ids ...)))) (quote (letish args (expr ... ids ...)))) #f)) v.9$3263$3287) #f)) (cdr v.1$3255$3270)) #f)) (cdr v.6$3260$3280))) v.7$3261$3282) #f)) (car v.6$3260$3280)) #f)) (cdr v.4$3258$3276))) v.5$3259$3278)) (car v.4$3258$3276)) #f)) (cdr v.2$3256$3272))) v.3$3257$3274)) (car v.2$3256$3272)) #f)) (car v.1$3255$3270)) #f)) (cdr expr$3247$3266))))) (match-drop-ids lambda (expr$3209$3222 rename$3210$3221 compare$3211$3220) (car ((lambda (tmp$3224$3233) (if tmp$3224$3233 tmp$3224$3233 (cons (error "no expansion for" expr$3209$3222) #f))) ((lambda (v.1$3217$3226) (if (pair? v.1$3217$3226) ((lambda (v.2$3218$3228) ((lambda (expr$3229) ((lambda (v.3$3219$3230) (if (list? v.3$3219$3230) ((lambda (ids$3232) (cons expr$3229 #f)) v.3$3219$3230) #f)) (cdr v.1$3217$3226))) v.2$3218$3228)) (car v.1$3217$3226)) #f)) (cdr expr$3209$3222))))) (match-quasiquote-step lambda (expr$3119$3144 rename$3120$3143 compare$3121$3142) (car ((lambda (tmp$3146$3178) (if tmp$3146$3178 tmp$3146$3178 (cons (error "no expansion for" expr$3119$3144) #f))) ((lambda (v.1$3127$3148) (if (pair? v.1$3127$3148) ((lambda (v.2$3128$3150) ((lambda (x$3151) ((lambda (v.3$3129$3152) (if (pair? v.3$3129$3152) ((lambda (v.4$3130$3154) ((lambda (q$3155) ((lambda (v.5$3131$3156) (if (pair? v.5$3131$3156) ((lambda (v.6$3132$3158) ((lambda (g+s$3159) ((lambda (v.7$3133$3160) (if (pair? v.7$3133$3160) ((lambda (v.8$3134$3162) ((lambda (sk$3163) ((lambda (v.9$3135$3164) (if (pair? v.9$3135$3164) ((lambda (v.10$3136$3166) ((lambda (fk$3167) ((lambda (v.11$3137$3168) (if (pair? v.11$3137$3168) ((lambda (v.12$3138$3170) ((lambda (depth$3171) ((lambda (v.13$3139$3172) (if (pair? v.13$3139$3172) ((lambda (v.14$3140$3174) ((lambda (i$3175) ((lambda (v.15$3141$3176) (if (null? v.15$3141$3176) (cons (cons-source (rename$3120$3143 (quote match-quasiquote)) (cons-source x$3151 (cons-source q$3155 (cons-source g+s$3159 (cons-source sk$3163 (cons-source fk$3167 (cons-source i$3175 depth$3171 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (q g+s sk fk i . depth))) (quote (x q g+s sk fk i . depth))) (quote (match-quasiquote x q g+s sk fk i . depth))) #f) #f)) (cdr v.13$3139$3172))) v.14$3140$3174)) (car v.13$3139$3172)) #f)) (cdr v.11$3137$3168))) v.12$3138$3170)) (car v.11$3137$3168)) #f)) (cdr v.9$3135$3164))) v.10$3136$3166)) (car v.9$3135$3164)) #f)) (cdr v.7$3133$3160))) v.8$3134$3162)) (car v.7$3133$3160)) #f)) (cdr v.5$3131$3156))) v.6$3132$3158)) (car v.5$3131$3156)) #f)) (cdr v.3$3129$3152))) v.4$3130$3154)) (car v.3$3129$3152)) #f)) (cdr v.1$3127$3148))) v.2$3128$3150)) (car v.1$3127$3148)) #f)) (cdr expr$3119$3144))))) (match-quasiquote lambda (expr$2470$2613 rename$2471$2612 compare$2472$2611) (car ((lambda (tmp$2615$2651) (if tmp$2615$2651 tmp$2615$2651 ((lambda (tmp$2653$2693) (if tmp$2653$2693 tmp$2653$2693 ((lambda (tmp$2695$2731) (if tmp$2695$2731 tmp$2695$2731 ((lambda (tmp$2733$2773) (if tmp$2733$2773 tmp$2733$2773 ((lambda (tmp$2775$2815) (if tmp$2775$2815 tmp$2775$2815 ((lambda (tmp$2817$2849) (if tmp$2817$2849 tmp$2817$2849 ((lambda (tmp$2851$2882) (if tmp$2851$2882 tmp$2851$2882 ((lambda (tmp$2884$2912) (if tmp$2884$2912 tmp$2884$2912 (cons (error "no expansion for" expr$2470$2613) #f))) ((lambda (v.1$2478$2886) (if (pair? v.1$2478$2886) ((lambda (v.2$2479$2888) ((lambda (v$2889) ((lambda (v.3$2480$2890) (if (pair? v.3$2480$2890) ((lambda (v.4$2481$2892) ((lambda (x$2893) ((lambda (v.5$2482$2894) (if (pair? v.5$2482$2894) ((lambda (v.6$2483$2896) ((lambda (g+s$2897) ((lambda (v.7$2484$2898) (if (pair? v.7$2484$2898) ((lambda (v.8$2485$2900) ((lambda (sk$2901) ((lambda (v.9$2486$2902) (if (pair? v.9$2486$2902) ((lambda (v.10$2487$2904) ((lambda (fk$2905) ((lambda (v.11$2488$2906) (if (pair? v.11$2488$2906) ((lambda (v.12$2489$2908) ((lambda (i$2909) ((lambda (v.13$2490$2910) ((lambda (depth$2911) (cons (cons-source (rename$2471$2612 (quote match-one)) (cons-source v$2889 (cons-source (cons-source (rename$2471$2612 (quote quote)) (cons-source x$2893 (quote ()) (quote (x))) (quote (quote x))) (cons-source g+s$2897 (cons-source sk$2901 (cons-source fk$2905 (cons-source i$2909 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((quote x) g+s sk fk i))) (quote (v (quote x) g+s sk fk i))) (quote (match-one v (quote x) g+s sk fk i))) #f)) v.13$2490$2910)) (cdr v.11$2488$2906))) v.12$2489$2908)) (car v.11$2488$2906)) #f)) (cdr v.9$2486$2902))) v.10$2487$2904)) (car v.9$2486$2902)) #f)) (cdr v.7$2484$2898))) v.8$2485$2900)) (car v.7$2484$2898)) #f)) (cdr v.5$2482$2894))) v.6$2483$2896)) (car v.5$2482$2894)) #f)) (cdr v.3$2480$2890))) v.4$2481$2892)) (car v.3$2480$2890)) #f)) (cdr v.1$2478$2886))) v.2$2479$2888)) (car v.1$2478$2886)) #f)) (cdr expr$2470$2613))))) ((lambda (v.14$2491$2853) (if (pair? v.14$2491$2853) ((lambda (v.15$2492$2855) ((lambda (v$2856) ((lambda (v.16$2493$2857) (if (pair? v.16$2493$2857) ((lambda (v.17$2494$2859) (if (vector? v.17$2494$2859) ((lambda (v.18$2495$2861) (if (list? v.18$2495$2861) ((lambda (elt$2863) ((lambda (v.19$2496$2864) (if (pair? v.19$2496$2864) ((lambda (v.20$2497$2866) ((lambda (g+s$2867) ((lambda (v.21$2498$2868) (if (pair? v.21$2498$2868) ((lambda (v.22$2499$2870) ((lambda (sk$2871) ((lambda (v.23$2500$2872) (if (pair? v.23$2500$2872) ((lambda (v.24$2501$2874) ((lambda (fk$2875) ((lambda (v.25$2502$2876) (if (pair? v.25$2502$2876) ((lambda (v.26$2503$2878) ((lambda (i$2879) ((lambda (v.27$2504$2880) ((lambda (depth$2881) (cons (cons-source (rename$2471$2612 (quote if)) (cons-source (cons-source (rename$2471$2612 (quote vector?)) (cons-source v$2856 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$2471$2612 (quote let)) (cons-source (cons-source (cons-source (rename$2471$2612 (quote ls)) (cons-source (cons-source (rename$2471$2612 (quote vector->list)) (cons-source v$2856 (quote ()) (quote (v))) (quote (vector->list v))) (quote ()) (quote ((vector->list v)))) (quote (ls (vector->list v)))) (quote ()) (quote ((ls (vector->list v))))) (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source (rename$2471$2612 (quote ls)) (cons-source elt$2863 (cons-source g+s$2867 (cons-source sk$2871 (cons-source fk$2875 (cons-source i$2879 depth$2881 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote ((elt ...) g+s sk fk i . depth))) (quote (ls (elt ...) g+s sk fk i . depth))) (quote (match-quasiquote ls (elt ...) g+s sk fk i . depth))) (quote ()) (quote ((match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (cons-source fk$2875 (quote ()) (quote (fk))) (quote ((let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote ((vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote (if (vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) #f)) v.27$2504$2880)) (cdr v.25$2502$2876))) v.26$2503$2878)) (car v.25$2502$2876)) #f)) (cdr v.23$2500$2872))) v.24$2501$2874)) (car v.23$2500$2872)) #f)) (cdr v.21$2498$2868))) v.22$2499$2870)) (car v.21$2498$2868)) #f)) (cdr v.19$2496$2864))) v.20$2497$2866)) (car v.19$2496$2864)) #f)) (cdr v.16$2493$2857))) v.18$2495$2861) #f)) (vector->list v.17$2494$2859)) #f)) (car v.16$2493$2857)) #f)) (cdr v.14$2491$2853))) v.15$2492$2855)) (car v.14$2491$2853)) #f)) (cdr expr$2470$2613))))) ((lambda (v.28$2505$2819) (if (pair? v.28$2505$2819) ((lambda (v.29$2506$2821) ((lambda (v$2822) ((lambda (v.30$2507$2823) (if (pair? v.30$2507$2823) ((lambda (v.31$2508$2825) (if (pair? v.31$2508$2825) ((lambda (v.32$2509$2827) ((lambda (p$2828) ((lambda (v.33$2510$2829) ((lambda (q$2830) ((lambda (v.34$2511$2831) (if (pair? v.34$2511$2831) ((lambda (v.35$2512$2833) ((lambda (g+s$2834) ((lambda (v.36$2513$2835) (if (pair? v.36$2513$2835) ((lambda (v.37$2514$2837) ((lambda (sk$2838) ((lambda (v.38$2515$2839) (if (pair? v.38$2515$2839) ((lambda (v.39$2516$2841) ((lambda (fk$2842) ((lambda (v.40$2517$2843) (if (pair? v.40$2517$2843) ((lambda (v.41$2518$2845) ((lambda (i$2846) ((lambda (v.42$2519$2847) ((lambda (depth$2848) (cons (cons-source (rename$2471$2612 (quote if)) (cons-source (cons-source (rename$2471$2612 (quote pair?)) (cons-source v$2822 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$2471$2612 (quote let)) (cons-source (cons-source (cons-source (rename$2471$2612 (quote w)) (cons-source (cons-source (rename$2471$2612 (quote car)) (cons-source v$2822 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$2471$2612 (quote x)) (cons-source (cons-source (rename$2471$2612 (quote cdr)) (cons-source v$2822 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source (rename$2471$2612 (quote w)) (cons-source p$2828 (cons-source g+s$2834 (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote-step)) (cons-source (rename$2471$2612 (quote x)) (cons-source q$2830 (cons-source g+s$2834 (cons-source sk$2838 (cons-source fk$2842 (cons-source depth$2848 (quote ()) (quote (depth))) (quote (fk depth))) (quote (sk fk depth))) (quote (g+s sk fk depth))) (quote (q g+s sk fk depth))) (quote (x q g+s sk fk depth))) (quote (match-quasiquote-step x q g+s sk fk depth))) (cons-source fk$2842 (cons-source i$2846 depth$2848 (quote (i . depth))) (quote (fk i . depth))) (quote ((match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote ()) (quote ((match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (cons-source fk$2842 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) #f)) v.42$2519$2847)) (cdr v.40$2517$2843))) v.41$2518$2845)) (car v.40$2517$2843)) #f)) (cdr v.38$2515$2839))) v.39$2516$2841)) (car v.38$2515$2839)) #f)) (cdr v.36$2513$2835))) v.37$2514$2837)) (car v.36$2513$2835)) #f)) (cdr v.34$2511$2831))) v.35$2512$2833)) (car v.34$2511$2831)) #f)) (cdr v.30$2507$2823))) v.33$2510$2829)) (cdr v.31$2508$2825))) v.32$2509$2827)) (car v.31$2508$2825)) #f)) (car v.30$2507$2823)) #f)) (cdr v.28$2505$2819))) v.29$2506$2821)) (car v.28$2505$2819)) #f)) (cdr expr$2470$2613))))) ((lambda (v.43$2520$2777) (if (pair? v.43$2520$2777) ((lambda (v.44$2521$2779) ((lambda (v$2780) ((lambda (v.45$2522$2781) (if (pair? v.45$2522$2781) ((lambda (v.46$2523$2783) (if (pair? v.46$2523$2783) ((lambda (v.47$2524$2785) (if (compare$2472$2611 v.47$2524$2785 (rename$2471$2612 (quote unquote-splicing))) ((lambda (v.48$2525$2787) (if (pair? v.48$2525$2787) ((lambda (v.49$2526$2789) ((lambda (p$2790) ((lambda (v.50$2527$2791) (if (null? v.50$2527$2791) ((lambda (v.51$2528$2793) (if (pair? v.51$2528$2793) ((lambda (v.52$2529$2795) ((lambda (g+s$2796) ((lambda (v.53$2530$2797) (if (pair? v.53$2530$2797) ((lambda (v.54$2531$2799) ((lambda (sk$2800) ((lambda (v.55$2532$2801) (if (pair? v.55$2532$2801) ((lambda (v.56$2533$2803) ((lambda (fk$2804) ((lambda (v.57$2534$2805) (if (pair? v.57$2534$2805) ((lambda (v.58$2535$2807) ((lambda (i$2808) ((lambda (v.59$2536$2809) (if (pair? v.59$2536$2809) ((lambda (v.60$2537$2811) ((lambda (x$2812) ((lambda (v.61$2538$2813) ((lambda (depth$2814) (cons (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source v$2780 (cons-source p$2790 (cons-source g+s$2796 (cons-source sk$2800 (cons-source fk$2804 (cons-source i$2808 depth$2814 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.61$2538$2813)) (cdr v.59$2536$2809))) v.60$2537$2811)) (car v.59$2536$2809)) #f)) (cdr v.57$2534$2805))) v.58$2535$2807)) (car v.57$2534$2805)) #f)) (cdr v.55$2532$2801))) v.56$2533$2803)) (car v.55$2532$2801)) #f)) (cdr v.53$2530$2797))) v.54$2531$2799)) (car v.53$2530$2797)) #f)) (cdr v.51$2528$2793))) v.52$2529$2795)) (car v.51$2528$2793)) #f)) (cdr v.45$2522$2781)) #f)) (cdr v.48$2525$2787))) v.49$2526$2789)) (car v.48$2525$2787)) #f)) (cdr v.46$2523$2783)) #f)) (car v.46$2523$2783)) #f)) (car v.45$2522$2781)) #f)) (cdr v.43$2520$2777))) v.44$2521$2779)) (car v.43$2520$2777)) #f)) (cdr expr$2470$2613))))) ((lambda (v.62$2539$2735) (if (pair? v.62$2539$2735) ((lambda (v.63$2540$2737) ((lambda (v$2738) ((lambda (v.64$2541$2739) (if (pair? v.64$2541$2739) ((lambda (v.65$2542$2741) (if (pair? v.65$2542$2741) ((lambda (v.66$2543$2743) (if (compare$2472$2611 v.66$2543$2743 (rename$2471$2612 (quote unquote))) ((lambda (v.67$2544$2745) (if (pair? v.67$2544$2745) ((lambda (v.68$2545$2747) ((lambda (p$2748) ((lambda (v.69$2546$2749) (if (null? v.69$2546$2749) ((lambda (v.70$2547$2751) (if (pair? v.70$2547$2751) ((lambda (v.71$2548$2753) ((lambda (g+s$2754) ((lambda (v.72$2549$2755) (if (pair? v.72$2549$2755) ((lambda (v.73$2550$2757) ((lambda (sk$2758) ((lambda (v.74$2551$2759) (if (pair? v.74$2551$2759) ((lambda (v.75$2552$2761) ((lambda (fk$2762) ((lambda (v.76$2553$2763) (if (pair? v.76$2553$2763) ((lambda (v.77$2554$2765) ((lambda (i$2766) ((lambda (v.78$2555$2767) (if (pair? v.78$2555$2767) ((lambda (v.79$2556$2769) ((lambda (x$2770) ((lambda (v.80$2557$2771) ((lambda (depth$2772) (cons (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source v$2738 (cons-source p$2748 (cons-source g+s$2754 (cons-source sk$2758 (cons-source fk$2762 (cons-source i$2766 depth$2772 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.80$2557$2771)) (cdr v.78$2555$2767))) v.79$2556$2769)) (car v.78$2555$2767)) #f)) (cdr v.76$2553$2763))) v.77$2554$2765)) (car v.76$2553$2763)) #f)) (cdr v.74$2551$2759))) v.75$2552$2761)) (car v.74$2551$2759)) #f)) (cdr v.72$2549$2755))) v.73$2550$2757)) (car v.72$2549$2755)) #f)) (cdr v.70$2547$2751))) v.71$2548$2753)) (car v.70$2547$2751)) #f)) (cdr v.64$2541$2739)) #f)) (cdr v.67$2544$2745))) v.68$2545$2747)) (car v.67$2544$2745)) #f)) (cdr v.65$2542$2741)) #f)) (car v.65$2542$2741)) #f)) (car v.64$2541$2739)) #f)) (cdr v.62$2539$2735))) v.63$2540$2737)) (car v.62$2539$2735)) #f)) (cdr expr$2470$2613))))) ((lambda (v.81$2558$2697) (if (pair? v.81$2558$2697) ((lambda (v.82$2559$2699) ((lambda (v$2700) ((lambda (v.83$2560$2701) (if (pair? v.83$2560$2701) ((lambda (v.84$2561$2703) (if (pair? v.84$2561$2703) ((lambda (v.85$2562$2705) (if (compare$2472$2611 v.85$2562$2705 (rename$2471$2612 (quote quasiquote))) ((lambda (v.86$2563$2707) (if (pair? v.86$2563$2707) ((lambda (v.87$2564$2709) ((lambda (p$2710) ((lambda (v.88$2565$2711) (if (null? v.88$2565$2711) ((lambda (v.89$2566$2713) (if (pair? v.89$2566$2713) ((lambda (v.90$2567$2715) ((lambda (g+s$2716) ((lambda (v.91$2568$2717) (if (pair? v.91$2568$2717) ((lambda (v.92$2569$2719) ((lambda (sk$2720) ((lambda (v.93$2570$2721) (if (pair? v.93$2570$2721) ((lambda (v.94$2571$2723) ((lambda (fk$2724) ((lambda (v.95$2572$2725) (if (pair? v.95$2572$2725) ((lambda (v.96$2573$2727) ((lambda (i$2728) ((lambda (v.97$2574$2729) ((lambda (depth$2730) (cons (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source v$2700 (cons-source p$2710 (cons-source g+s$2716 (cons-source sk$2720 (cons-source fk$2724 (cons-source i$2728 (cons-source #f depth$2730 (quote (#f . depth))) (quote (i #f . depth))) (quote (fk i #f . depth))) (quote (sk fk i #f . depth))) (quote (g+s sk fk i #f . depth))) (quote (p g+s sk fk i #f . depth))) (quote (v p g+s sk fk i #f . depth))) (quote (match-quasiquote v p g+s sk fk i #f . depth))) #f)) v.97$2574$2729)) (cdr v.95$2572$2725))) v.96$2573$2727)) (car v.95$2572$2725)) #f)) (cdr v.93$2570$2721))) v.94$2571$2723)) (car v.93$2570$2721)) #f)) (cdr v.91$2568$2717))) v.92$2569$2719)) (car v.91$2568$2717)) #f)) (cdr v.89$2566$2713))) v.90$2567$2715)) (car v.89$2566$2713)) #f)) (cdr v.83$2560$2701)) #f)) (cdr v.86$2563$2707))) v.87$2564$2709)) (car v.86$2563$2707)) #f)) (cdr v.84$2561$2703)) #f)) (car v.84$2561$2703)) #f)) (car v.83$2560$2701)) #f)) (cdr v.81$2558$2697))) v.82$2559$2699)) (car v.81$2558$2697)) #f)) (cdr expr$2470$2613))))) ((lambda (v.98$2575$2655) (if (pair? v.98$2575$2655) ((lambda (v.99$2576$2657) ((lambda (v$2658) ((lambda (v.100$2577$2659) (if (pair? v.100$2577$2659) ((lambda (v.101$2578$2661) (if (pair? v.101$2578$2661) ((lambda (v.102$2579$2663) (if (pair? v.102$2579$2663) ((lambda (v.103$2580$2665) (if (compare$2472$2611 v.103$2580$2665 (rename$2471$2612 (quote unquote-splicing))) ((lambda (v.104$2581$2667) (if (pair? v.104$2581$2667) ((lambda (v.105$2582$2669) ((lambda (p$2670) ((lambda (v.106$2583$2671) (if (null? v.106$2583$2671) ((lambda (v.107$2584$2673) ((lambda (rest$2674) ((lambda (v.108$2585$2675) (if (pair? v.108$2585$2675) ((lambda (v.109$2586$2677) ((lambda (g+s$2678) ((lambda (v.110$2587$2679) (if (pair? v.110$2587$2679) ((lambda (v.111$2588$2681) ((lambda (sk$2682) ((lambda (v.112$2589$2683) (if (pair? v.112$2589$2683) ((lambda (v.113$2590$2685) ((lambda (fk$2686) ((lambda (v.114$2591$2687) (if (pair? v.114$2591$2687) ((lambda (v.115$2592$2689) ((lambda (i$2690) ((lambda (v.116$2593$2691) (if (null? v.116$2593$2691) (cons (cons-source (rename$2471$2612 (quote if)) (cons-source (cons-source (rename$2471$2612 (quote pair?)) (cons-source v$2658 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$2471$2612 (quote match-one)) (cons-source v$2658 (cons-source (cons-source p$2670 (rename$2471$2612 (quote tmp)) (quote (p . tmp))) (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source (rename$2471$2612 (quote tmp)) (cons-source rest$2674 (cons-source g+s$2678 (cons-source sk$2682 (cons-source fk$2686 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (rest g+s sk fk))) (quote (tmp rest g+s sk fk))) (quote (match-quasiquote tmp rest g+s sk fk))) (cons-source fk$2686 (cons-source i$2690 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-quasiquote tmp rest g+s sk fk) fk i))) (quote ((p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i))) (quote (v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i))) (quote (match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i))) (cons-source fk$2686 (quote ()) (quote (fk))) (quote ((match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i) fk))) (quote ((pair? v) (match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i) fk))) (quote (if (pair? v) (match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i) fk))) #f) #f)) (cdr v.114$2591$2687))) v.115$2592$2689)) (car v.114$2591$2687)) #f)) (cdr v.112$2589$2683))) v.113$2590$2685)) (car v.112$2589$2683)) #f)) (cdr v.110$2587$2679))) v.111$2588$2681)) (car v.110$2587$2679)) #f)) (cdr v.108$2585$2675))) v.109$2586$2677)) (car v.108$2585$2675)) #f)) (cdr v.100$2577$2659))) v.107$2584$2673)) (cdr v.101$2578$2661)) #f)) (cdr v.104$2581$2667))) v.105$2582$2669)) (car v.104$2581$2667)) #f)) (cdr v.102$2579$2663)) #f)) (car v.102$2579$2663)) #f)) (car v.101$2578$2661)) #f)) (car v.100$2577$2659)) #f)) (cdr v.98$2575$2655))) v.99$2576$2657)) (car v.98$2575$2655)) #f)) (cdr expr$2470$2613))))) ((lambda (v.117$2594$2617) (if (pair? v.117$2594$2617) ((lambda (v.118$2595$2619) ((lambda (v$2620) ((lambda (v.119$2596$2621) (if (pair? v.119$2596$2621) ((lambda (v.120$2597$2623) (if (pair? v.120$2597$2623) ((lambda (v.121$2598$2625) (if (compare$2472$2611 v.121$2598$2625 (rename$2471$2612 (quote unquote))) ((lambda (v.122$2599$2627) (if (pair? v.122$2599$2627) ((lambda (v.123$2600$2629) ((lambda (p$2630) ((lambda (v.124$2601$2631) (if (null? v.124$2601$2631) ((lambda (v.125$2602$2633) (if (pair? v.125$2602$2633) ((lambda (v.126$2603$2635) ((lambda (g+s$2636) ((lambda (v.127$2604$2637) (if (pair? v.127$2604$2637) ((lambda (v.128$2605$2639) ((lambda (sk$2640) ((lambda (v.129$2606$2641) (if (pair? v.129$2606$2641) ((lambda (v.130$2607$2643) ((lambda (fk$2644) ((lambda (v.131$2608$2645) (if (pair? v.131$2608$2645) ((lambda (v.132$2609$2647) ((lambda (i$2648) ((lambda (v.133$2610$2649) (if (null? v.133$2610$2649) (cons (cons-source (rename$2471$2612 (quote match-one)) (cons-source v$2620 (cons-source p$2630 (cons-source g+s$2636 (cons-source sk$2640 (cons-source fk$2644 (cons-source i$2648 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (p g+s sk fk i))) (quote (v p g+s sk fk i))) (quote (match-one v p g+s sk fk i))) #f) #f)) (cdr v.131$2608$2645))) v.132$2609$2647)) (car v.131$2608$2645)) #f)) (cdr v.129$2606$2641))) v.130$2607$2643)) (car v.129$2606$2641)) #f)) (cdr v.127$2604$2637))) v.128$2605$2639)) (car v.127$2604$2637)) #f)) (cdr v.125$2602$2633))) v.126$2603$2635)) (car v.125$2602$2633)) #f)) (cdr v.119$2596$2621)) #f)) (cdr v.122$2599$2627))) v.123$2600$2629)) (car v.122$2599$2627)) #f)) (cdr v.120$2597$2623)) #f)) (car v.120$2597$2623)) #f)) (car v.119$2596$2621)) #f)) (cdr v.117$2594$2617))) v.118$2595$2619)) (car v.117$2594$2617)) #f)) (cdr expr$2470$2613))))) (match-two lambda (expr$531$940 rename$532$939 compare$533$938) (car ((lambda (tmp$942$972) (if tmp$942$972 tmp$942$972 ((lambda (tmp$974$1012) (if tmp$974$1012 tmp$974$1012 ((lambda (tmp$1014$1034) (if tmp$1014$1034 tmp$1014$1034 ((lambda (tmp$1036$1070) (if tmp$1036$1070 tmp$1036$1070 ((lambda (tmp$1072$1109) (if tmp$1072$1109 tmp$1072$1109 ((lambda (tmp$1111$1143) (if tmp$1111$1143 tmp$1111$1143 ((lambda (tmp$1145$1165) (if tmp$1145$1165 tmp$1145$1165 ((lambda (tmp$1167$1200) (if tmp$1167$1200 tmp$1167$1200 ((lambda (tmp$1202$1240) (if tmp$1202$1240 tmp$1202$1240 ((lambda (tmp$1242$1288) (if tmp$1242$1288 tmp$1242$1288 ((lambda (tmp$1290$1338) (if tmp$1290$1338 tmp$1290$1338 ((lambda (tmp$1340$1376) (if tmp$1340$1376 tmp$1340$1376 ((lambda (tmp$1378$1402) (if tmp$1378$1402 tmp$1378$1402 ((lambda (tmp$1404$1440) (if tmp$1404$1440 tmp$1404$1440 ((lambda (tmp$1442$1474) (if tmp$1442$1474 tmp$1442$1474 ((lambda (tmp$1476$1516) (if tmp$1476$1516 tmp$1476$1516 ((lambda (tmp$1518$1554) (if tmp$1518$1554 tmp$1518$1554 ((lambda (tmp$1556$1592) (if tmp$1556$1592 tmp$1556$1592 ((lambda (tmp$1594$1631) (if tmp$1594$1631 tmp$1594$1631 ((lambda (tmp$1633$1670) (if tmp$1633$1670 tmp$1633$1670 ((lambda (tmp$1672$1709) (if tmp$1672$1709 tmp$1672$1709 ((lambda (tmp$1711$1748) (if tmp$1711$1748 tmp$1711$1748 ((lambda (tmp$1750$1782) (if tmp$1750$1782 tmp$1750$1782 ((lambda (tmp$1784$1803) (if tmp$1784$1803 tmp$1784$1803 ((lambda (tmp$1805$1835) (if tmp$1805$1835 tmp$1805$1835 ((lambda (tmp$1837$1871) (if tmp$1837$1871 tmp$1837$1871 (cons (error "no expansion for" expr$531$940) #f))) ((lambda (v.1$539$1839) (if (pair? v.1$539$1839) ((lambda (v.2$540$1841) ((lambda (v$1842) ((lambda (v.3$541$1843) (if (pair? v.3$541$1843) ((lambda (v.4$542$1845) ((lambda (x$1846) ((lambda (v.5$543$1847) (if (pair? v.5$543$1847) ((lambda (v.6$544$1849) ((lambda (g+s$1850) ((lambda (v.7$545$1851) (if (pair? v.7$545$1851) ((lambda (v.8$546$1853) (if (list? v.8$546$1853) ((lambda (sk$1855) ((lambda (v.9$547$1856) (if (pair? v.9$547$1856) ((lambda (v.10$548$1858) ((lambda (fk$1859) ((lambda (v.11$549$1860) (if (pair? v.11$549$1860) ((lambda (v.12$550$1862) (if (list? v.12$550$1862) ((lambda (id$1864) ((lambda (v.13$551$1865) (if (null? v.13$551$1865) (cons (cons-source (rename$532$939 (quote match-check-identifier)) (cons-source x$1846 (cons-source (cons-source (rename$532$939 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source (cons-source (rename$532$939 (quote syntax-rules)) (cons-source id$1864 (cons-source (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source x$1846 (cons-source (rename$532$939 (quote sk2)) (cons-source (rename$532$939 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (x sk2 fk2))) (quote (new-sym? x sk2 fk2))) (cons-source (rename$532$939 (quote sk2)) (quote ()) (quote (sk2))) (quote ((new-sym? x sk2 fk2) sk2))) (cons-source (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source (rename$532$939 (quote y)) (cons-source (rename$532$939 (quote sk2)) (cons-source (rename$532$939 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (y sk2 fk2))) (quote (new-sym? y sk2 fk2))) (cons-source (rename$532$939 (quote fk2)) (quote ()) (quote (fk2))) (quote ((new-sym? y sk2 fk2) fk2))) (quote ()) (quote (((new-sym? y sk2 fk2) fk2)))) (quote (((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ((id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ()) (quote ((syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote (new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote ()) (quote ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))))) (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source (rename$532$939 (quote random-sym-to-match)) (cons-source (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source x$1846 (cons-source v$1842 (quote ()) (quote (v))) (quote (x v))) (quote ()) (quote ((x v)))) (cons-source (append (map (lambda (sk$1870) sk$1870) sk$1855) (cons-source (append (map (lambda (id$1869) id$1869) id$1864) (cons-source x$1846 (quote ()) (quote (x)))) (quote ()) (quote ((id ... x))))) (quote ()) (quote ((sk ... (id ... x))))) (quote (((x v)) (sk ... (id ... x))))) (quote (let ((x v)) (sk ... (id ... x))))) (cons-source (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote equal?)) (cons-source v$1842 (cons-source x$1846 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1868) sk$1868) sk$1855) (cons-source id$1864 (quote ()) (quote ((id ...))))) (cons-source fk$1859 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote ()) (quote ((new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (cons-source (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote equal?)) (cons-source v$1842 (cons-source x$1846 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1867) sk$1867) sk$1855) (cons-source id$1864 (quote ()) (quote ((id ...))))) (cons-source fk$1859 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (match-check-identifier x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) #f) #f)) (cdr v.11$549$1860))) v.12$550$1862) #f)) (car v.11$549$1860)) #f)) (cdr v.9$547$1856))) v.10$548$1858)) (car v.9$547$1856)) #f)) (cdr v.7$545$1851))) v.8$546$1853) #f)) (car v.7$545$1851)) #f)) (cdr v.5$543$1847))) v.6$544$1849)) (car v.5$543$1847)) #f)) (cdr v.3$541$1843))) v.4$542$1845)) (car v.3$541$1843)) #f)) (cdr v.1$539$1839))) v.2$540$1841)) (car v.1$539$1839)) #f)) (cdr expr$531$940))))) ((lambda (v.14$552$1807) (if (pair? v.14$552$1807) ((lambda (v.15$553$1809) ((lambda (v$1810) ((lambda (v.16$554$1811) (if (pair? v.16$554$1811) ((lambda (v.17$555$1813) (if (compare$533$938 v.17$555$1813 (rename$532$939 (quote _))) ((lambda (v.18$556$1815) (if (pair? v.18$556$1815) ((lambda (v.19$557$1817) ((lambda (g+s$1818) ((lambda (v.20$558$1819) (if (pair? v.20$558$1819) ((lambda (v.21$559$1821) (if (list? v.21$559$1821) ((lambda (sk$1823) ((lambda (v.22$560$1824) (if (pair? v.22$560$1824) ((lambda (v.23$561$1826) ((lambda (fk$1827) ((lambda (v.24$562$1828) (if (pair? v.24$562$1828) ((lambda (v.25$563$1830) ((lambda (i$1831) ((lambda (v.26$564$1832) (if (null? v.26$564$1832) (cons (append (map (lambda (sk$1834) sk$1834) sk$1823) (cons-source i$1831 (quote ()) (quote (i)))) #f) #f)) (cdr v.24$562$1828))) v.25$563$1830)) (car v.24$562$1828)) #f)) (cdr v.22$560$1824))) v.23$561$1826)) (car v.22$560$1824)) #f)) (cdr v.20$558$1819))) v.21$559$1821) #f)) (car v.20$558$1819)) #f)) (cdr v.18$556$1815))) v.19$557$1817)) (car v.18$556$1815)) #f)) (cdr v.16$554$1811)) #f)) (car v.16$554$1811)) #f)) (cdr v.14$552$1807))) v.15$553$1809)) (car v.14$552$1807)) #f)) (cdr expr$531$940))))) ((lambda (v.27$565$1786) (if (pair? v.27$565$1786) ((lambda (v.28$566$1788) ((lambda (v$1789) ((lambda (v.29$567$1790) (if (pair? v.29$567$1790) ((lambda (v.30$568$1792) (if (vector? v.30$568$1792) ((lambda (v.31$569$1794) (if (list? v.31$569$1794) ((lambda (p$1796) ((lambda (v.32$570$1797) (if (pair? v.32$570$1797) ((lambda (v.33$571$1799) ((lambda (g+s$1800) ((lambda (v.34$572$1801) ((lambda (x$1802) (cons (cons-source (rename$532$939 (quote match-vector)) (cons-source v$1789 (cons-source 0 (cons-source (quote ()) (cons-source p$1796 x$1802 (quote ((p ...) . x))) (quote (() (p ...) . x))) (quote (0 () (p ...) . x))) (quote (v 0 () (p ...) . x))) (quote (match-vector v 0 () (p ...) . x))) #f)) v.34$572$1801)) (cdr v.32$570$1797))) v.33$571$1799)) (car v.32$570$1797)) #f)) (cdr v.29$567$1790))) v.31$569$1794) #f)) (vector->list v.30$568$1792)) #f)) (car v.29$567$1790)) #f)) (cdr v.27$565$1786))) v.28$566$1788)) (car v.27$565$1786)) #f)) (cdr expr$531$940))))) ((lambda (v.35$573$1752) (if (pair? v.35$573$1752) ((lambda (v.36$574$1754) ((lambda (v$1755) ((lambda (v.37$575$1756) (if (pair? v.37$575$1756) ((lambda (v.38$576$1758) (if (pair? v.38$576$1758) ((lambda (v.39$577$1760) ((lambda (p$1761) ((lambda (v.40$578$1762) ((lambda (q$1763) ((lambda (v.41$579$1764) (if (pair? v.41$579$1764) ((lambda (v.42$580$1766) ((lambda (g+s$1767) ((lambda (v.43$581$1768) (if (pair? v.43$581$1768) ((lambda (v.44$582$1770) ((lambda (sk$1771) ((lambda (v.45$583$1772) (if (pair? v.45$583$1772) ((lambda (v.46$584$1774) ((lambda (fk$1775) ((lambda (v.47$585$1776) (if (pair? v.47$585$1776) ((lambda (v.48$586$1778) ((lambda (i$1779) ((lambda (v.49$587$1780) (if (null? v.49$587$1780) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote pair?)) (cons-source v$1755 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source (rename$532$939 (quote w)) (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1755 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$532$939 (quote x)) (cons-source (cons-source (rename$532$939 (quote cdr)) (cons-source v$1755 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote w)) (cons-source p$1761 (cons-source (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1755 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$532$939 (quote set-car!)) (cons-source v$1755 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote x)) (cons-source q$1763 (cons-source (cons-source (cons-source (rename$532$939 (quote cdr)) (cons-source v$1755 (quote ()) (quote (v))) (quote (cdr v))) (cons-source (cons-source (rename$532$939 (quote set-cdr!)) (cons-source v$1755 (quote ()) (quote (v))) (quote (set-cdr! v))) (quote ()) (quote ((set-cdr! v)))) (quote ((cdr v) (set-cdr! v)))) (cons-source sk$1771 (cons-source fk$1775 (quote ()) (quote (fk))) (quote (sk fk))) (quote (((cdr v) (set-cdr! v)) sk fk))) (quote (q ((cdr v) (set-cdr! v)) sk fk))) (quote (x q ((cdr v) (set-cdr! v)) sk fk))) (quote (match-one x q ((cdr v) (set-cdr! v)) sk fk))) (cons-source fk$1775 (cons-source i$1779 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (cons-source fk$1775 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) #f) #f)) (cdr v.47$585$1776))) v.48$586$1778)) (car v.47$585$1776)) #f)) (cdr v.45$583$1772))) v.46$584$1774)) (car v.45$583$1772)) #f)) (cdr v.43$581$1768))) v.44$582$1770)) (car v.43$581$1768)) #f)) (cdr v.41$579$1764))) v.42$580$1766)) (car v.41$579$1764)) #f)) (cdr v.37$575$1756))) v.40$578$1762)) (cdr v.38$576$1758))) v.39$577$1760)) (car v.38$576$1758)) #f)) (car v.37$575$1756)) #f)) (cdr v.35$573$1752))) v.36$574$1754)) (car v.35$573$1752)) #f)) (cdr expr$531$940))))) ((lambda (v.50$588$1713) (if (pair? v.50$588$1713) ((lambda (v.51$589$1715) ((lambda (v$1716) ((lambda (v.52$590$1717) (if (pair? v.52$590$1717) ((lambda (v.53$591$1719) (if (pair? v.53$591$1719) ((lambda (v.54$592$1721) (if (compare$533$938 v.54$592$1721 (rename$532$939 (quote object))) ((lambda (v.55$593$1723) (if (pair? v.55$593$1723) ((lambda (v.56$594$1725) ((lambda (rec$1726) ((lambda (v.57$595$1727) (if (list? v.57$595$1727) ((lambda (p$1729) ((lambda (v.58$596$1730) (if (pair? v.58$596$1730) ((lambda (v.59$597$1732) ((lambda (g+s$1733) ((lambda (v.60$598$1734) (if (pair? v.60$598$1734) ((lambda (v.61$599$1736) ((lambda (sk$1737) ((lambda (v.62$600$1738) (if (pair? v.62$600$1738) ((lambda (v.63$601$1740) ((lambda (fk$1741) ((lambda (v.64$602$1742) (if (pair? v.64$602$1742) ((lambda (v.65$603$1744) ((lambda (i$1745) ((lambda (v.66$604$1746) (if (null? v.66$604$1746) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1716 (cons-source rec$1726 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-named-refs)) (cons-source v$1716 (cons-source rec$1726 (cons-source p$1729 (cons-source g+s$1733 (cons-source sk$1737 (cons-source fk$1741 (cons-source i$1745 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (rec (p ...) g+s sk fk i))) (quote (v rec (p ...) g+s sk fk i))) (quote (match-record-named-refs v rec (p ...) g+s sk fk i))) (cons-source fk$1741 (quote ()) (quote (fk))) (quote ((match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.64$602$1742))) v.65$603$1744)) (car v.64$602$1742)) #f)) (cdr v.62$600$1738))) v.63$601$1740)) (car v.62$600$1738)) #f)) (cdr v.60$598$1734))) v.61$599$1736)) (car v.60$598$1734)) #f)) (cdr v.58$596$1730))) v.59$597$1732)) (car v.58$596$1730)) #f)) (cdr v.52$590$1717))) v.57$595$1727) #f)) (cdr v.55$593$1723))) v.56$594$1725)) (car v.55$593$1723)) #f)) (cdr v.53$591$1719)) #f)) (car v.53$591$1719)) #f)) (car v.52$590$1717)) #f)) (cdr v.50$588$1713))) v.51$589$1715)) (car v.50$588$1713)) #f)) (cdr expr$531$940))))) ((lambda (v.67$605$1674) (if (pair? v.67$605$1674) ((lambda (v.68$606$1676) ((lambda (v$1677) ((lambda (v.69$607$1678) (if (pair? v.69$607$1678) ((lambda (v.70$608$1680) (if (pair? v.70$608$1680) ((lambda (v.71$609$1682) (if (compare$533$938 v.71$609$1682 (rename$532$939 (quote @))) ((lambda (v.72$610$1684) (if (pair? v.72$610$1684) ((lambda (v.73$611$1686) ((lambda (rec$1687) ((lambda (v.74$612$1688) (if (list? v.74$612$1688) ((lambda (p$1690) ((lambda (v.75$613$1691) (if (pair? v.75$613$1691) ((lambda (v.76$614$1693) ((lambda (g+s$1694) ((lambda (v.77$615$1695) (if (pair? v.77$615$1695) ((lambda (v.78$616$1697) ((lambda (sk$1698) ((lambda (v.79$617$1699) (if (pair? v.79$617$1699) ((lambda (v.80$618$1701) ((lambda (fk$1702) ((lambda (v.81$619$1703) (if (pair? v.81$619$1703) ((lambda (v.82$620$1705) ((lambda (i$1706) ((lambda (v.83$621$1707) (if (null? v.83$621$1707) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1677 (cons-source rec$1687 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-named-refs)) (cons-source v$1677 (cons-source rec$1687 (cons-source p$1690 (cons-source g+s$1694 (cons-source sk$1698 (cons-source fk$1702 (cons-source i$1706 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (rec (p ...) g+s sk fk i))) (quote (v rec (p ...) g+s sk fk i))) (quote (match-record-named-refs v rec (p ...) g+s sk fk i))) (cons-source fk$1702 (quote ()) (quote (fk))) (quote ((match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.81$619$1703))) v.82$620$1705)) (car v.81$619$1703)) #f)) (cdr v.79$617$1699))) v.80$618$1701)) (car v.79$617$1699)) #f)) (cdr v.77$615$1695))) v.78$616$1697)) (car v.77$615$1695)) #f)) (cdr v.75$613$1691))) v.76$614$1693)) (car v.75$613$1691)) #f)) (cdr v.69$607$1678))) v.74$612$1688) #f)) (cdr v.72$610$1684))) v.73$611$1686)) (car v.72$610$1684)) #f)) (cdr v.70$608$1680)) #f)) (car v.70$608$1680)) #f)) (car v.69$607$1678)) #f)) (cdr v.67$605$1674))) v.68$606$1676)) (car v.67$605$1674)) #f)) (cdr expr$531$940))))) ((lambda (v.84$622$1635) (if (pair? v.84$622$1635) ((lambda (v.85$623$1637) ((lambda (v$1638) ((lambda (v.86$624$1639) (if (pair? v.86$624$1639) ((lambda (v.87$625$1641) (if (pair? v.87$625$1641) ((lambda (v.88$626$1643) (if (compare$533$938 v.88$626$1643 (rename$532$939 (quote struct))) ((lambda (v.89$627$1645) (if (pair? v.89$627$1645) ((lambda (v.90$628$1647) ((lambda (rec$1648) ((lambda (v.91$629$1649) (if (list? v.91$629$1649) ((lambda (p$1651) ((lambda (v.92$630$1652) (if (pair? v.92$630$1652) ((lambda (v.93$631$1654) ((lambda (g+s$1655) ((lambda (v.94$632$1656) (if (pair? v.94$632$1656) ((lambda (v.95$633$1658) ((lambda (sk$1659) ((lambda (v.96$634$1660) (if (pair? v.96$634$1660) ((lambda (v.97$635$1662) ((lambda (fk$1663) ((lambda (v.98$636$1664) (if (pair? v.98$636$1664) ((lambda (v.99$637$1666) ((lambda (i$1667) ((lambda (v.100$638$1668) (if (null? v.100$638$1668) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1638 (cons-source rec$1648 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-refs)) (cons-source v$1638 (cons-source rec$1648 (cons-source 0 (cons-source p$1651 (cons-source g+s$1655 (cons-source sk$1659 (cons-source fk$1663 (cons-source i$1667 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1663 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.98$636$1664))) v.99$637$1666)) (car v.98$636$1664)) #f)) (cdr v.96$634$1660))) v.97$635$1662)) (car v.96$634$1660)) #f)) (cdr v.94$632$1656))) v.95$633$1658)) (car v.94$632$1656)) #f)) (cdr v.92$630$1652))) v.93$631$1654)) (car v.92$630$1652)) #f)) (cdr v.86$624$1639))) v.91$629$1649) #f)) (cdr v.89$627$1645))) v.90$628$1647)) (car v.89$627$1645)) #f)) (cdr v.87$625$1641)) #f)) (car v.87$625$1641)) #f)) (car v.86$624$1639)) #f)) (cdr v.84$622$1635))) v.85$623$1637)) (car v.84$622$1635)) #f)) (cdr expr$531$940))))) ((lambda (v.101$639$1596) (if (pair? v.101$639$1596) ((lambda (v.102$640$1598) ((lambda (v$1599) ((lambda (v.103$641$1600) (if (pair? v.103$641$1600) ((lambda (v.104$642$1602) (if (pair? v.104$642$1602) ((lambda (v.105$643$1604) (if (compare$533$938 v.105$643$1604 (rename$532$939 (quote $))) ((lambda (v.106$644$1606) (if (pair? v.106$644$1606) ((lambda (v.107$645$1608) ((lambda (rec$1609) ((lambda (v.108$646$1610) (if (list? v.108$646$1610) ((lambda (p$1612) ((lambda (v.109$647$1613) (if (pair? v.109$647$1613) ((lambda (v.110$648$1615) ((lambda (g+s$1616) ((lambda (v.111$649$1617) (if (pair? v.111$649$1617) ((lambda (v.112$650$1619) ((lambda (sk$1620) ((lambda (v.113$651$1621) (if (pair? v.113$651$1621) ((lambda (v.114$652$1623) ((lambda (fk$1624) ((lambda (v.115$653$1625) (if (pair? v.115$653$1625) ((lambda (v.116$654$1627) ((lambda (i$1628) ((lambda (v.117$655$1629) (if (null? v.117$655$1629) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1599 (cons-source rec$1609 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-refs)) (cons-source v$1599 (cons-source rec$1609 (cons-source 0 (cons-source p$1612 (cons-source g+s$1616 (cons-source sk$1620 (cons-source fk$1624 (cons-source i$1628 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1624 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.115$653$1625))) v.116$654$1627)) (car v.115$653$1625)) #f)) (cdr v.113$651$1621))) v.114$652$1623)) (car v.113$651$1621)) #f)) (cdr v.111$649$1617))) v.112$650$1619)) (car v.111$649$1617)) #f)) (cdr v.109$647$1613))) v.110$648$1615)) (car v.109$647$1613)) #f)) (cdr v.103$641$1600))) v.108$646$1610) #f)) (cdr v.106$644$1606))) v.107$645$1608)) (car v.106$644$1606)) #f)) (cdr v.104$642$1602)) #f)) (car v.104$642$1602)) #f)) (car v.103$641$1600)) #f)) (cdr v.101$639$1596))) v.102$640$1598)) (car v.101$639$1596)) #f)) (cdr expr$531$940))))) ((lambda (v.118$656$1558) (if (pair? v.118$656$1558) ((lambda (v.119$657$1560) ((lambda (v$1561) ((lambda (v.120$658$1562) (if (pair? v.120$658$1562) ((lambda (v.121$659$1564) (if (pair? v.121$659$1564) ((lambda (v.122$660$1566) ((lambda (p$1567) ((lambda (v.123$661$1568) (if (pair? v.123$661$1568) ((lambda (v.124$662$1570) (if (compare$533$938 v.124$662$1570 (rename$532$939 (quote ..1))) ((lambda (v.125$663$1572) (if (null? v.125$663$1572) ((lambda (v.126$664$1574) (if (pair? v.126$664$1574) ((lambda (v.127$665$1576) ((lambda (g+s$1577) ((lambda (v.128$666$1578) (if (pair? v.128$666$1578) ((lambda (v.129$667$1580) ((lambda (sk$1581) ((lambda (v.130$668$1582) (if (pair? v.130$668$1582) ((lambda (v.131$669$1584) ((lambda (fk$1585) ((lambda (v.132$670$1586) (if (pair? v.132$670$1586) ((lambda (v.133$671$1588) ((lambda (i$1589) ((lambda (v.134$672$1590) (if (null? v.134$672$1590) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote pair?)) (cons-source v$1561 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source v$1561 (cons-source (cons-source p$1567 (cons-source (rename$532$939 (quote ___)) (quote ()) (quote (___))) (quote (p ___))) (cons-source g+s$1577 (cons-source sk$1581 (cons-source fk$1585 (cons-source i$1589 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ___) g+s sk fk i))) (quote (v (p ___) g+s sk fk i))) (quote (match-one v (p ___) g+s sk fk i))) (cons-source fk$1585 (quote ()) (quote (fk))) (quote ((match-one v (p ___) g+s sk fk i) fk))) (quote ((pair? v) (match-one v (p ___) g+s sk fk i) fk))) (quote (if (pair? v) (match-one v (p ___) g+s sk fk i) fk))) #f) #f)) (cdr v.132$670$1586))) v.133$671$1588)) (car v.132$670$1586)) #f)) (cdr v.130$668$1582))) v.131$669$1584)) (car v.130$668$1582)) #f)) (cdr v.128$666$1578))) v.129$667$1580)) (car v.128$666$1578)) #f)) (cdr v.126$664$1574))) v.127$665$1576)) (car v.126$664$1574)) #f)) (cdr v.120$658$1562)) #f)) (cdr v.123$661$1568)) #f)) (car v.123$661$1568)) #f)) (cdr v.121$659$1564))) v.122$660$1566)) (car v.121$659$1564)) #f)) (car v.120$658$1562)) #f)) (cdr v.118$656$1558))) v.119$657$1560)) (car v.118$656$1558)) #f)) (cdr expr$531$940))))) ((lambda (v.135$673$1520) (if (pair? v.135$673$1520) ((lambda (v.136$674$1522) ((lambda (v$1523) ((lambda (v.137$675$1524) (if (pair? v.137$675$1524) ((lambda (v.138$676$1526) (if (pair? v.138$676$1526) ((lambda (v.139$677$1528) ((lambda (p$1529) ((lambda (v.140$678$1530) (if (pair? v.140$678$1530) ((lambda (v.141$679$1532) (if (compare$533$938 v.141$679$1532 (rename$532$939 (quote ***))) ((lambda (v.142$680$1534) ((lambda (q$1535) ((lambda (v.143$681$1536) (if (pair? v.143$681$1536) ((lambda (v.144$682$1538) ((lambda (g+s$1539) ((lambda (v.145$683$1540) (if (pair? v.145$683$1540) ((lambda (v.146$684$1542) ((lambda (sk$1543) ((lambda (v.147$685$1544) (if (pair? v.147$685$1544) ((lambda (v.148$686$1546) ((lambda (fk$1547) ((lambda (v.149$687$1548) (if (pair? v.149$687$1548) ((lambda (v.150$688$1550) ((lambda (i$1551) ((lambda (v.151$689$1552) (if (null? v.151$689$1552) (cons (cons-source (rename$532$939 (quote match-syntax-error)) (cons-source "invalid use of ***" (cons-source (cons-source p$1529 (cons-source (rename$532$939 (quote ***)) q$1535 (quote (*** . q))) (quote (p *** . q))) (quote ()) (quote ((p *** . q)))) (quote ("invalid use of ***" (p *** . q)))) (quote (match-syntax-error "invalid use of ***" (p *** . q)))) #f) #f)) (cdr v.149$687$1548))) v.150$688$1550)) (car v.149$687$1548)) #f)) (cdr v.147$685$1544))) v.148$686$1546)) (car v.147$685$1544)) #f)) (cdr v.145$683$1540))) v.146$684$1542)) (car v.145$683$1540)) #f)) (cdr v.143$681$1536))) v.144$682$1538)) (car v.143$681$1536)) #f)) (cdr v.137$675$1524))) v.142$680$1534)) (cdr v.140$678$1530)) #f)) (car v.140$678$1530)) #f)) (cdr v.138$676$1526))) v.139$677$1528)) (car v.138$676$1526)) #f)) (car v.137$675$1524)) #f)) (cdr v.135$673$1520))) v.136$674$1522)) (car v.135$673$1520)) #f)) (cdr expr$531$940))))) ((lambda (v.152$690$1478) (if (pair? v.152$690$1478) ((lambda (v.153$691$1480) ((lambda (v$1481) ((lambda (v.154$692$1482) (if (pair? v.154$692$1482) ((lambda (v.155$693$1484) (if (pair? v.155$693$1484) ((lambda (v.156$694$1486) ((lambda (p$1487) ((lambda (v.157$695$1488) (if (pair? v.157$695$1488) ((lambda (v.158$696$1490) (if (compare$533$938 v.158$696$1490 (rename$532$939 (quote ***))) ((lambda (v.159$697$1492) (if (pair? v.159$697$1492) ((lambda (v.160$698$1494) ((lambda (q$1495) ((lambda (v.161$699$1496) (if (null? v.161$699$1496) ((lambda (v.162$700$1498) (if (pair? v.162$700$1498) ((lambda (v.163$701$1500) ((lambda (g+s$1501) ((lambda (v.164$702$1502) (if (pair? v.164$702$1502) ((lambda (v.165$703$1504) ((lambda (sk$1505) ((lambda (v.166$704$1506) (if (pair? v.166$704$1506) ((lambda (v.167$705$1508) ((lambda (fk$1509) ((lambda (v.168$706$1510) (if (pair? v.168$706$1510) ((lambda (v.169$707$1512) ((lambda (i$1513) ((lambda (v.170$708$1514) (if (null? v.170$708$1514) (cons (cons-source (rename$532$939 (quote match-extract-vars)) (cons-source p$1487 (cons-source (cons-source (rename$532$939 (quote match-gen-search)) (cons-source v$1481 (cons-source p$1487 (cons-source q$1495 (cons-source g+s$1501 (cons-source sk$1505 (cons-source fk$1509 (cons-source i$1513 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (p q g+s sk fk i))) (quote (v p q g+s sk fk i))) (quote (match-gen-search v p q g+s sk fk i))) (cons-source i$1513 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-search v p q g+s sk fk i) i ()))) (quote (p (match-gen-search v p q g+s sk fk i) i ()))) (quote (match-extract-vars p (match-gen-search v p q g+s sk fk i) i ()))) #f) #f)) (cdr v.168$706$1510))) v.169$707$1512)) (car v.168$706$1510)) #f)) (cdr v.166$704$1506))) v.167$705$1508)) (car v.166$704$1506)) #f)) (cdr v.164$702$1502))) v.165$703$1504)) (car v.164$702$1502)) #f)) (cdr v.162$700$1498))) v.163$701$1500)) (car v.162$700$1498)) #f)) (cdr v.154$692$1482)) #f)) (cdr v.159$697$1492))) v.160$698$1494)) (car v.159$697$1492)) #f)) (cdr v.157$695$1488)) #f)) (car v.157$695$1488)) #f)) (cdr v.155$693$1484))) v.156$694$1486)) (car v.155$693$1484)) #f)) (car v.154$692$1482)) #f)) (cdr v.152$690$1478))) v.153$691$1480)) (car v.152$690$1478)) #f)) (cdr expr$531$940))))) ((lambda (v.171$709$1444) (if (pair? v.171$709$1444) ((lambda (v.172$710$1446) ((lambda (v$1447) ((lambda (v.173$711$1448) (if (pair? v.173$711$1448) ((lambda (v.174$712$1450) (if (pair? v.174$712$1450) ((lambda (v.175$713$1452) ((lambda (p$1453) ((lambda (v.176$714$1454) (if (null? v.176$714$1454) ((lambda (v.177$715$1456) (if (pair? v.177$715$1456) ((lambda (v.178$716$1458) ((lambda (g+s$1459) ((lambda (v.179$717$1460) (if (pair? v.179$717$1460) ((lambda (v.180$718$1462) ((lambda (sk$1463) ((lambda (v.181$719$1464) (if (pair? v.181$719$1464) ((lambda (v.182$720$1466) ((lambda (fk$1467) ((lambda (v.183$721$1468) (if (pair? v.183$721$1468) ((lambda (v.184$722$1470) ((lambda (i$1471) ((lambda (v.185$723$1472) (if (null? v.185$723$1472) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote and)) (cons-source (cons-source (rename$532$939 (quote pair?)) (cons-source v$1447 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$532$939 (quote null?)) (cons-source (cons-source (rename$532$939 (quote cdr)) (cons-source v$1447 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (null? (cdr v)))) (quote ()) (quote ((null? (cdr v))))) (quote ((pair? v) (null? (cdr v))))) (quote (and (pair? v) (null? (cdr v))))) (cons-source (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source (rename$532$939 (quote w)) (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1447 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (quote ()) (quote ((w (car v))))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote w)) (cons-source p$1453 (cons-source (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1447 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$532$939 (quote set-car!)) (cons-source v$1447 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source sk$1463 (cons-source fk$1467 (cons-source i$1471 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((car v) (set-car! v)) sk fk i))) (quote (p ((car v) (set-car! v)) sk fk i))) (quote (w p ((car v) (set-car! v)) sk fk i))) (quote (match-one w p ((car v) (set-car! v)) sk fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (cons-source fk$1467 (quote ()) (quote (fk))) (quote ((let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote ((and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote (if (and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) #f) #f)) (cdr v.183$721$1468))) v.184$722$1470)) (car v.183$721$1468)) #f)) (cdr v.181$719$1464))) v.182$720$1466)) (car v.181$719$1464)) #f)) (cdr v.179$717$1460))) v.180$718$1462)) (car v.179$717$1460)) #f)) (cdr v.177$715$1456))) v.178$716$1458)) (car v.177$715$1456)) #f)) (cdr v.173$711$1448)) #f)) (cdr v.174$712$1450))) v.175$713$1452)) (car v.174$712$1450)) #f)) (car v.173$711$1448)) #f)) (cdr v.171$709$1444))) v.172$710$1446)) (car v.171$709$1444)) #f)) (cdr expr$531$940))))) ((lambda (v.186$724$1406) (if (pair? v.186$724$1406) ((lambda (v.187$725$1408) ((lambda (v$1409) ((lambda (v.188$726$1410) (if (pair? v.188$726$1410) ((lambda (v.189$727$1412) (if (pair? v.189$727$1412) ((lambda (v.190$728$1414) ((lambda (p$1415) ((lambda (v.191$729$1416) (if (pair? v.191$729$1416) ((lambda (v.192$730$1418) (if (compare$533$938 v.192$730$1418 (rename$532$939 (quote ___))) ((lambda (v.193$731$1420) ((lambda (r$1421) ((lambda (v.194$732$1422) (if (pair? v.194$732$1422) ((lambda (v.195$733$1424) ((lambda (g+s$1425) ((lambda (v.196$734$1426) (if (pair? v.196$734$1426) ((lambda (v.197$735$1428) ((lambda (sk$1429) ((lambda (v.198$736$1430) (if (pair? v.198$736$1430) ((lambda (v.199$737$1432) ((lambda (fk$1433) ((lambda (v.200$738$1434) (if (pair? v.200$738$1434) ((lambda (v.201$739$1436) ((lambda (i$1437) ((lambda (v.202$740$1438) (if (null? v.202$740$1438) (cons (cons-source (rename$532$939 (quote match-extract-vars)) (cons-source p$1415 (cons-source (cons-source (rename$532$939 (quote match-gen-ellipsis)) (cons-source v$1409 (cons-source p$1415 (cons-source r$1421 (cons-source g+s$1425 (cons-source sk$1429 (cons-source fk$1433 (cons-source i$1437 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$1437 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.200$738$1434))) v.201$739$1436)) (car v.200$738$1434)) #f)) (cdr v.198$736$1430))) v.199$737$1432)) (car v.198$736$1430)) #f)) (cdr v.196$734$1426))) v.197$735$1428)) (car v.196$734$1426)) #f)) (cdr v.194$732$1422))) v.195$733$1424)) (car v.194$732$1422)) #f)) (cdr v.188$726$1410))) v.193$731$1420)) (cdr v.191$729$1416)) #f)) (car v.191$729$1416)) #f)) (cdr v.189$727$1412))) v.190$728$1414)) (car v.189$727$1412)) #f)) (car v.188$726$1410)) #f)) (cdr v.186$724$1406))) v.187$725$1408)) (car v.186$724$1406)) #f)) (cdr expr$531$940))))) ((lambda (v.203$741$1380) (if (pair? v.203$741$1380) ((lambda (v.204$742$1382) ((lambda (v$1383) ((lambda (v.205$743$1384) (if (pair? v.205$743$1384) ((lambda (v.206$744$1386) (if (pair? v.206$744$1386) ((lambda (v.207$745$1388) (if (compare$533$938 v.207$745$1388 (rename$532$939 (quote =))) ((lambda (v.208$746$1390) (if (pair? v.208$746$1390) ((lambda (v.209$747$1392) ((lambda (proc$1393) ((lambda (v.210$748$1394) (if (pair? v.210$748$1394) ((lambda (v.211$749$1396) ((lambda (p$1397) ((lambda (v.212$750$1398) (if (null? v.212$750$1398) ((lambda (v.213$751$1400) ((lambda (x$1401) (cons (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source (rename$532$939 (quote w)) (cons-source (cons-source proc$1393 (cons-source v$1383 (quote ()) (quote (v))) (quote (proc v))) (quote ()) (quote ((proc v)))) (quote (w (proc v)))) (quote ()) (quote ((w (proc v))))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote w)) (cons-source p$1397 x$1401 (quote (p . x))) (quote (w p . x))) (quote (match-one w p . x))) (quote ()) (quote ((match-one w p . x)))) (quote (((w (proc v))) (match-one w p . x)))) (quote (let ((w (proc v))) (match-one w p . x)))) #f)) v.213$751$1400)) (cdr v.205$743$1384)) #f)) (cdr v.210$748$1394))) v.211$749$1396)) (car v.210$748$1394)) #f)) (cdr v.208$746$1390))) v.209$747$1392)) (car v.208$746$1390)) #f)) (cdr v.206$744$1386)) #f)) (car v.206$744$1386)) #f)) (car v.205$743$1384)) #f)) (cdr v.203$741$1380))) v.204$742$1382)) (car v.203$741$1380)) #f)) (cdr expr$531$940))))) ((lambda (v.214$752$1342) (if (pair? v.214$752$1342) ((lambda (v.215$753$1344) ((lambda (v$1345) ((lambda (v.216$754$1346) (if (pair? v.216$754$1346) ((lambda (v.217$755$1348) (if (pair? v.217$755$1348) ((lambda (v.218$756$1350) (if (compare$533$938 v.218$756$1350 (rename$532$939 (quote ?))) ((lambda (v.219$757$1352) (if (pair? v.219$757$1352) ((lambda (v.220$758$1354) ((lambda (pred$1355) ((lambda (v.221$759$1356) ((lambda (p$1357) ((lambda (v.222$760$1358) (if (pair? v.222$760$1358) ((lambda (v.223$761$1360) ((lambda (g+s$1361) ((lambda (v.224$762$1362) (if (pair? v.224$762$1362) ((lambda (v.225$763$1364) ((lambda (sk$1365) ((lambda (v.226$764$1366) (if (pair? v.226$764$1366) ((lambda (v.227$765$1368) ((lambda (fk$1369) ((lambda (v.228$766$1370) (if (pair? v.228$766$1370) ((lambda (v.229$767$1372) ((lambda (i$1373) ((lambda (v.230$768$1374) (if (null? v.230$768$1374) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source pred$1355 (cons-source v$1345 (quote ()) (quote (v))) (quote (pred v))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source v$1345 (cons-source (cons-source (rename$532$939 (quote and)) p$1357 (quote (and . p))) (cons-source g+s$1361 (cons-source sk$1365 (cons-source fk$1369 (cons-source i$1373 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((and . p) g+s sk fk i))) (quote (v (and . p) g+s sk fk i))) (quote (match-one v (and . p) g+s sk fk i))) (cons-source fk$1369 (quote ()) (quote (fk))) (quote ((match-one v (and . p) g+s sk fk i) fk))) (quote ((pred v) (match-one v (and . p) g+s sk fk i) fk))) (quote (if (pred v) (match-one v (and . p) g+s sk fk i) fk))) #f) #f)) (cdr v.228$766$1370))) v.229$767$1372)) (car v.228$766$1370)) #f)) (cdr v.226$764$1366))) v.227$765$1368)) (car v.226$764$1366)) #f)) (cdr v.224$762$1362))) v.225$763$1364)) (car v.224$762$1362)) #f)) (cdr v.222$760$1358))) v.223$761$1360)) (car v.222$760$1358)) #f)) (cdr v.216$754$1346))) v.221$759$1356)) (cdr v.219$757$1352))) v.220$758$1354)) (car v.219$757$1352)) #f)) (cdr v.217$755$1348)) #f)) (car v.217$755$1348)) #f)) (car v.216$754$1346)) #f)) (cdr v.214$752$1342))) v.215$753$1344)) (car v.214$752$1342)) #f)) (cdr expr$531$940))))) ((lambda (v.231$769$1292) (if (pair? v.231$769$1292) ((lambda (v.232$770$1294) ((lambda (v$1295) ((lambda (v.233$771$1296) (if (pair? v.233$771$1296) ((lambda (v.234$772$1298) (if (pair? v.234$772$1298) ((lambda (v.235$773$1300) (if (compare$533$938 v.235$773$1300 (rename$532$939 (quote set!))) ((lambda (v.236$774$1302) (if (pair? v.236$774$1302) ((lambda (v.237$775$1304) ((lambda (setter$1305) ((lambda (v.238$776$1306) (if (null? v.238$776$1306) ((lambda (v.239$777$1308) (if (pair? v.239$777$1308) ((lambda (v.240$778$1310) (if (pair? v.240$778$1310) ((lambda (v.241$779$1312) ((lambda (g$1313) ((lambda (v.242$780$1314) (if (pair? v.242$780$1314) ((lambda (v.243$781$1316) (if (list? v.243$781$1316) ((lambda (s$1318) ((lambda (v.244$782$1319) (if (null? v.244$782$1319) ((lambda (v.245$783$1321) (if (pair? v.245$783$1321) ((lambda (v.246$784$1323) (if (list? v.246$784$1323) ((lambda (sk$1325) ((lambda (v.247$785$1326) (if (pair? v.247$785$1326) ((lambda (v.248$786$1328) ((lambda (fk$1329) ((lambda (v.249$787$1330) (if (pair? v.249$787$1330) ((lambda (v.250$788$1332) ((lambda (i$1333) ((lambda (v.251$789$1334) (if (null? v.251$789$1334) (cons (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source setter$1305 (cons-source (cons-source (rename$532$939 (quote lambda)) (cons-source (cons-source (rename$532$939 (quote x)) (quote ()) (quote (x))) (cons-source (append (map (lambda (s$1337) s$1337) s$1318) (cons-source (rename$532$939 (quote x)) (quote ()) (quote (x)))) (quote ()) (quote ((s ... x)))) (quote ((x) (s ... x)))) (quote (lambda (x) (s ... x)))) (quote ()) (quote ((lambda (x) (s ... x))))) (quote (setter (lambda (x) (s ... x))))) (quote ()) (quote ((setter (lambda (x) (s ... x)))))) (cons-source (append (map (lambda (sk$1336) sk$1336) sk$1325) (cons-source i$1333 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((setter (lambda (x) (s ... x)))) (sk ... i)))) (quote (let ((setter (lambda (x) (s ... x)))) (sk ... i)))) #f) #f)) (cdr v.249$787$1330))) v.250$788$1332)) (car v.249$787$1330)) #f)) (cdr v.247$785$1326))) v.248$786$1328)) (car v.247$785$1326)) #f)) (cdr v.245$783$1321))) v.246$784$1323) #f)) (car v.245$783$1321)) #f)) (cdr v.239$777$1308)) #f)) (cdr v.242$780$1314))) v.243$781$1316) #f)) (car v.242$780$1314)) #f)) (cdr v.240$778$1310))) v.241$779$1312)) (car v.240$778$1310)) #f)) (car v.239$777$1308)) #f)) (cdr v.233$771$1296)) #f)) (cdr v.236$774$1302))) v.237$775$1304)) (car v.236$774$1302)) #f)) (cdr v.234$772$1298)) #f)) (car v.234$772$1298)) #f)) (car v.233$771$1296)) #f)) (cdr v.231$769$1292))) v.232$770$1294)) (car v.231$769$1292)) #f)) (cdr expr$531$940))))) ((lambda (v.252$790$1244) (if (pair? v.252$790$1244) ((lambda (v.253$791$1246) ((lambda (v$1247) ((lambda (v.254$792$1248) (if (pair? v.254$792$1248) ((lambda (v.255$793$1250) (if (pair? v.255$793$1250) ((lambda (v.256$794$1252) (if (compare$533$938 v.256$794$1252 (rename$532$939 (quote get!))) ((lambda (v.257$795$1254) (if (pair? v.257$795$1254) ((lambda (v.258$796$1256) ((lambda (getter$1257) ((lambda (v.259$797$1258) (if (null? v.259$797$1258) ((lambda (v.260$798$1260) (if (pair? v.260$798$1260) ((lambda (v.261$799$1262) (if (pair? v.261$799$1262) ((lambda (v.262$800$1264) ((lambda (g$1265) ((lambda (v.263$801$1266) (if (pair? v.263$801$1266) ((lambda (v.264$802$1268) ((lambda (s$1269) ((lambda (v.265$803$1270) (if (null? v.265$803$1270) ((lambda (v.266$804$1272) (if (pair? v.266$804$1272) ((lambda (v.267$805$1274) (if (list? v.267$805$1274) ((lambda (sk$1276) ((lambda (v.268$806$1277) (if (pair? v.268$806$1277) ((lambda (v.269$807$1279) ((lambda (fk$1280) ((lambda (v.270$808$1281) (if (pair? v.270$808$1281) ((lambda (v.271$809$1283) ((lambda (i$1284) ((lambda (v.272$810$1285) (if (null? v.272$810$1285) (cons (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source getter$1257 (cons-source (cons-source (rename$532$939 (quote lambda)) (cons-source (quote ()) (cons-source g$1265 (quote ()) (quote (g))) (quote (() g))) (quote (lambda () g))) (quote ()) (quote ((lambda () g)))) (quote (getter (lambda () g)))) (quote ()) (quote ((getter (lambda () g))))) (cons-source (append (map (lambda (sk$1287) sk$1287) sk$1276) (cons-source i$1284 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((getter (lambda () g))) (sk ... i)))) (quote (let ((getter (lambda () g))) (sk ... i)))) #f) #f)) (cdr v.270$808$1281))) v.271$809$1283)) (car v.270$808$1281)) #f)) (cdr v.268$806$1277))) v.269$807$1279)) (car v.268$806$1277)) #f)) (cdr v.266$804$1272))) v.267$805$1274) #f)) (car v.266$804$1272)) #f)) (cdr v.260$798$1260)) #f)) (cdr v.263$801$1266))) v.264$802$1268)) (car v.263$801$1266)) #f)) (cdr v.261$799$1262))) v.262$800$1264)) (car v.261$799$1262)) #f)) (car v.260$798$1260)) #f)) (cdr v.254$792$1248)) #f)) (cdr v.257$795$1254))) v.258$796$1256)) (car v.257$795$1254)) #f)) (cdr v.255$793$1250)) #f)) (car v.255$793$1250)) #f)) (car v.254$792$1248)) #f)) (cdr v.252$790$1244))) v.253$791$1246)) (car v.252$790$1244)) #f)) (cdr expr$531$940))))) ((lambda (v.273$811$1204) (if (pair? v.273$811$1204) ((lambda (v.274$812$1206) ((lambda (v$1207) ((lambda (v.275$813$1208) (if (pair? v.275$813$1208) ((lambda (v.276$814$1210) (if (pair? v.276$814$1210) ((lambda (v.277$815$1212) (if (compare$533$938 v.277$815$1212 (rename$532$939 (quote not))) ((lambda (v.278$816$1214) (if (pair? v.278$816$1214) ((lambda (v.279$817$1216) ((lambda (p$1217) ((lambda (v.280$818$1218) (if (null? v.280$818$1218) ((lambda (v.281$819$1220) (if (pair? v.281$819$1220) ((lambda (v.282$820$1222) ((lambda (g+s$1223) ((lambda (v.283$821$1224) (if (pair? v.283$821$1224) ((lambda (v.284$822$1226) (if (list? v.284$822$1226) ((lambda (sk$1228) ((lambda (v.285$823$1229) (if (pair? v.285$823$1229) ((lambda (v.286$824$1231) ((lambda (fk$1232) ((lambda (v.287$825$1233) (if (pair? v.287$825$1233) ((lambda (v.288$826$1235) ((lambda (i$1236) ((lambda (v.289$827$1237) (if (null? v.289$827$1237) (cons (cons-source (rename$532$939 (quote match-one)) (cons-source v$1207 (cons-source p$1217 (cons-source g+s$1223 (cons-source (cons-source (rename$532$939 (quote match-drop-ids)) (cons-source fk$1232 (quote ()) (quote (fk))) (quote (match-drop-ids fk))) (cons-source (append (map (lambda (sk$1239) sk$1239) sk$1228) (cons-source i$1236 (quote ()) (quote (i)))) (cons-source i$1236 (quote ()) (quote (i))) (quote ((sk ... i) i))) (quote ((match-drop-ids fk) (sk ... i) i))) (quote (g+s (match-drop-ids fk) (sk ... i) i))) (quote (p g+s (match-drop-ids fk) (sk ... i) i))) (quote (v p g+s (match-drop-ids fk) (sk ... i) i))) (quote (match-one v p g+s (match-drop-ids fk) (sk ... i) i))) #f) #f)) (cdr v.287$825$1233))) v.288$826$1235)) (car v.287$825$1233)) #f)) (cdr v.285$823$1229))) v.286$824$1231)) (car v.285$823$1229)) #f)) (cdr v.283$821$1224))) v.284$822$1226) #f)) (car v.283$821$1224)) #f)) (cdr v.281$819$1220))) v.282$820$1222)) (car v.281$819$1220)) #f)) (cdr v.275$813$1208)) #f)) (cdr v.278$816$1214))) v.279$817$1216)) (car v.278$816$1214)) #f)) (cdr v.276$814$1210)) #f)) (car v.276$814$1210)) #f)) (car v.275$813$1208)) #f)) (cdr v.273$811$1204))) v.274$812$1206)) (car v.273$811$1204)) #f)) (cdr expr$531$940))))) ((lambda (v.290$828$1169) (if (pair? v.290$828$1169) ((lambda (v.291$829$1171) ((lambda (v$1172) ((lambda (v.292$830$1173) (if (pair? v.292$830$1173) ((lambda (v.293$831$1175) (if (pair? v.293$831$1175) ((lambda (v.294$832$1177) (if (compare$533$938 v.294$832$1177 (rename$532$939 (quote or))) ((lambda (v.295$833$1179) (if (list? v.295$833$1179) ((lambda (p$1181) ((lambda (v.296$834$1182) (if (pair? v.296$834$1182) ((lambda (v.297$835$1184) ((lambda (g+s$1185) ((lambda (v.298$836$1186) (if (pair? v.298$836$1186) ((lambda (v.299$837$1188) ((lambda (sk$1189) ((lambda (v.300$838$1190) (if (pair? v.300$838$1190) ((lambda (v.301$839$1192) ((lambda (fk$1193) ((lambda (v.302$840$1194) (if (pair? v.302$840$1194) ((lambda (v.303$841$1196) ((lambda (i$1197) ((lambda (v.304$842$1198) (if (null? v.304$842$1198) (cons (cons-source (rename$532$939 (quote match-extract-vars)) (cons-source (cons-source (rename$532$939 (quote or)) p$1181 (quote (or p ...))) (cons-source (cons-source (rename$532$939 (quote match-gen-or)) (cons-source v$1172 (cons-source p$1181 (cons-source g+s$1185 (cons-source sk$1189 (cons-source fk$1193 (cons-source i$1197 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (v (p ...) g+s sk fk i))) (quote (match-gen-or v (p ...) g+s sk fk i))) (cons-source i$1197 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-or v (p ...) g+s sk fk i) i ()))) (quote ((or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) (quote (match-extract-vars (or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) #f) #f)) (cdr v.302$840$1194))) v.303$841$1196)) (car v.302$840$1194)) #f)) (cdr v.300$838$1190))) v.301$839$1192)) (car v.300$838$1190)) #f)) (cdr v.298$836$1186))) v.299$837$1188)) (car v.298$836$1186)) #f)) (cdr v.296$834$1182))) v.297$835$1184)) (car v.296$834$1182)) #f)) (cdr v.292$830$1173))) v.295$833$1179) #f)) (cdr v.293$831$1175)) #f)) (car v.293$831$1175)) #f)) (car v.292$830$1173)) #f)) (cdr v.290$828$1169))) v.291$829$1171)) (car v.290$828$1169)) #f)) (cdr expr$531$940))))) ((lambda (v.305$843$1147) (if (pair? v.305$843$1147) ((lambda (v.306$844$1149) ((lambda (v$1150) ((lambda (v.307$845$1151) (if (pair? v.307$845$1151) ((lambda (v.308$846$1153) (if (pair? v.308$846$1153) ((lambda (v.309$847$1155) (if (compare$533$938 v.309$847$1155 (rename$532$939 (quote or))) ((lambda (v.310$848$1157) (if (pair? v.310$848$1157) ((lambda (v.311$849$1159) ((lambda (p$1160) ((lambda (v.312$850$1161) (if (null? v.312$850$1161) ((lambda (v.313$851$1163) ((lambda (x$1164) (cons (cons-source (rename$532$939 (quote match-one)) (cons-source v$1150 (cons-source p$1160 x$1164 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.313$851$1163)) (cdr v.307$845$1151)) #f)) (cdr v.310$848$1157))) v.311$849$1159)) (car v.310$848$1157)) #f)) (cdr v.308$846$1153)) #f)) (car v.308$846$1153)) #f)) (car v.307$845$1151)) #f)) (cdr v.305$843$1147))) v.306$844$1149)) (car v.305$843$1147)) #f)) (cdr expr$531$940))))) ((lambda (v.314$852$1113) (if (pair? v.314$852$1113) ((lambda (v.315$853$1115) ((lambda (v$1116) ((lambda (v.316$854$1117) (if (pair? v.316$854$1117) ((lambda (v.317$855$1119) (if (pair? v.317$855$1119) ((lambda (v.318$856$1121) (if (compare$533$938 v.318$856$1121 (rename$532$939 (quote or))) ((lambda (v.319$857$1123) (if (null? v.319$857$1123) ((lambda (v.320$858$1125) (if (pair? v.320$858$1125) ((lambda (v.321$859$1127) ((lambda (g+s$1128) ((lambda (v.322$860$1129) (if (pair? v.322$860$1129) ((lambda (v.323$861$1131) ((lambda (sk$1132) ((lambda (v.324$862$1133) (if (pair? v.324$862$1133) ((lambda (v.325$863$1135) ((lambda (fk$1136) ((lambda (v.326$864$1137) (if (pair? v.326$864$1137) ((lambda (v.327$865$1139) ((lambda (i$1140) ((lambda (v.328$866$1141) (if (null? v.328$866$1141) (cons fk$1136 #f) #f)) (cdr v.326$864$1137))) v.327$865$1139)) (car v.326$864$1137)) #f)) (cdr v.324$862$1133))) v.325$863$1135)) (car v.324$862$1133)) #f)) (cdr v.322$860$1129))) v.323$861$1131)) (car v.322$860$1129)) #f)) (cdr v.320$858$1125))) v.321$859$1127)) (car v.320$858$1125)) #f)) (cdr v.316$854$1117)) #f)) (cdr v.317$855$1119)) #f)) (car v.317$855$1119)) #f)) (car v.316$854$1117)) #f)) (cdr v.314$852$1113))) v.315$853$1115)) (car v.314$852$1113)) #f)) (cdr expr$531$940))))) ((lambda (v.329$867$1074) (if (pair? v.329$867$1074) ((lambda (v.330$868$1076) ((lambda (v$1077) ((lambda (v.331$869$1078) (if (pair? v.331$869$1078) ((lambda (v.332$870$1080) (if (pair? v.332$870$1080) ((lambda (v.333$871$1082) (if (compare$533$938 v.333$871$1082 (rename$532$939 (quote and))) ((lambda (v.334$872$1084) (if (pair? v.334$872$1084) ((lambda (v.335$873$1086) ((lambda (p$1087) ((lambda (v.336$874$1088) (if (list? v.336$874$1088) ((lambda (q$1090) ((lambda (v.337$875$1091) (if (pair? v.337$875$1091) ((lambda (v.338$876$1093) ((lambda (g+s$1094) ((lambda (v.339$877$1095) (if (pair? v.339$877$1095) ((lambda (v.340$878$1097) ((lambda (sk$1098) ((lambda (v.341$879$1099) (if (pair? v.341$879$1099) ((lambda (v.342$880$1101) ((lambda (fk$1102) ((lambda (v.343$881$1103) (if (pair? v.343$881$1103) ((lambda (v.344$882$1105) ((lambda (i$1106) ((lambda (v.345$883$1107) (if (null? v.345$883$1107) (cons (cons-source (rename$532$939 (quote match-one)) (cons-source v$1077 (cons-source p$1087 (cons-source g+s$1094 (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source v$1077 (cons-source (cons-source (rename$532$939 (quote and)) q$1090 (quote (and q ...))) (cons-source g+s$1094 (cons-source sk$1098 (cons-source fk$1102 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote ((and q ...) g+s sk fk))) (quote (v (and q ...) g+s sk fk))) (quote (match-one v (and q ...) g+s sk fk))) (cons-source fk$1102 (cons-source i$1106 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one v (and q ...) g+s sk fk) fk i))) (quote (g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (v p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (match-one v p g+s (match-one v (and q ...) g+s sk fk) fk i))) #f) #f)) (cdr v.343$881$1103))) v.344$882$1105)) (car v.343$881$1103)) #f)) (cdr v.341$879$1099))) v.342$880$1101)) (car v.341$879$1099)) #f)) (cdr v.339$877$1095))) v.340$878$1097)) (car v.339$877$1095)) #f)) (cdr v.337$875$1091))) v.338$876$1093)) (car v.337$875$1091)) #f)) (cdr v.331$869$1078))) v.336$874$1088) #f)) (cdr v.334$872$1084))) v.335$873$1086)) (car v.334$872$1084)) #f)) (cdr v.332$870$1080)) #f)) (car v.332$870$1080)) #f)) (car v.331$869$1078)) #f)) (cdr v.329$867$1074))) v.330$868$1076)) (car v.329$867$1074)) #f)) (cdr expr$531$940))))) ((lambda (v.346$884$1038) (if (pair? v.346$884$1038) ((lambda (v.347$885$1040) ((lambda (v$1041) ((lambda (v.348$886$1042) (if (pair? v.348$886$1042) ((lambda (v.349$887$1044) (if (pair? v.349$887$1044) ((lambda (v.350$888$1046) (if (compare$533$938 v.350$888$1046 (rename$532$939 (quote and))) ((lambda (v.351$889$1048) (if (null? v.351$889$1048) ((lambda (v.352$890$1050) (if (pair? v.352$890$1050) ((lambda (v.353$891$1052) ((lambda (g+s$1053) ((lambda (v.354$892$1054) (if (pair? v.354$892$1054) ((lambda (v.355$893$1056) (if (list? v.355$893$1056) ((lambda (sk$1058) ((lambda (v.356$894$1059) (if (pair? v.356$894$1059) ((lambda (v.357$895$1061) ((lambda (fk$1062) ((lambda (v.358$896$1063) (if (pair? v.358$896$1063) ((lambda (v.359$897$1065) ((lambda (i$1066) ((lambda (v.360$898$1067) (if (null? v.360$898$1067) (cons (append (map (lambda (sk$1069) sk$1069) sk$1058) (cons-source i$1066 (quote ()) (quote (i)))) #f) #f)) (cdr v.358$896$1063))) v.359$897$1065)) (car v.358$896$1063)) #f)) (cdr v.356$894$1059))) v.357$895$1061)) (car v.356$894$1059)) #f)) (cdr v.354$892$1054))) v.355$893$1056) #f)) (car v.354$892$1054)) #f)) (cdr v.352$890$1050))) v.353$891$1052)) (car v.352$890$1050)) #f)) (cdr v.348$886$1042)) #f)) (cdr v.349$887$1044)) #f)) (car v.349$887$1044)) #f)) (car v.348$886$1042)) #f)) (cdr v.346$884$1038))) v.347$885$1040)) (car v.346$884$1038)) #f)) (cdr expr$531$940))))) ((lambda (v.361$899$1016) (if (pair? v.361$899$1016) ((lambda (v.362$900$1018) ((lambda (v$1019) ((lambda (v.363$901$1020) (if (pair? v.363$901$1020) ((lambda (v.364$902$1022) (if (pair? v.364$902$1022) ((lambda (v.365$903$1024) (if (compare$533$938 v.365$903$1024 (rename$532$939 (quote quasiquote))) ((lambda (v.366$904$1026) (if (pair? v.366$904$1026) ((lambda (v.367$905$1028) ((lambda (p$1029) ((lambda (v.368$906$1030) (if (null? v.368$906$1030) ((lambda (v.369$907$1032) ((lambda (x$1033) (cons (cons-source (rename$532$939 (quote match-quasiquote)) (cons-source v$1019 (cons-source p$1029 x$1033 (quote (p . x))) (quote (v p . x))) (quote (match-quasiquote v p . x))) #f)) v.369$907$1032)) (cdr v.363$901$1020)) #f)) (cdr v.366$904$1026))) v.367$905$1028)) (car v.366$904$1026)) #f)) (cdr v.364$902$1022)) #f)) (car v.364$902$1022)) #f)) (car v.363$901$1020)) #f)) (cdr v.361$899$1016))) v.362$900$1018)) (car v.361$899$1016)) #f)) (cdr expr$531$940))))) ((lambda (v.370$908$976) (if (pair? v.370$908$976) ((lambda (v.371$909$978) ((lambda (v$979) ((lambda (v.372$910$980) (if (pair? v.372$910$980) ((lambda (v.373$911$982) (if (pair? v.373$911$982) ((lambda (v.374$912$984) (if (compare$533$938 v.374$912$984 (rename$532$939 (quote quote))) ((lambda (v.375$913$986) (if (pair? v.375$913$986) ((lambda (v.376$914$988) ((lambda (p$989) ((lambda (v.377$915$990) (if (null? v.377$915$990) ((lambda (v.378$916$992) (if (pair? v.378$916$992) ((lambda (v.379$917$994) ((lambda (g+s$995) ((lambda (v.380$918$996) (if (pair? v.380$918$996) ((lambda (v.381$919$998) (if (list? v.381$919$998) ((lambda (sk$1000) ((lambda (v.382$920$1001) (if (pair? v.382$920$1001) ((lambda (v.383$921$1003) ((lambda (fk$1004) ((lambda (v.384$922$1005) (if (pair? v.384$922$1005) ((lambda (v.385$923$1007) ((lambda (i$1008) ((lambda (v.386$924$1009) (if (null? v.386$924$1009) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote equal?)) (cons-source v$979 (cons-source (cons-source (rename$532$939 (quote quote)) (cons-source p$989 (quote ()) (quote (p))) (quote (quote p))) (quote ()) (quote ((quote p)))) (quote (v (quote p)))) (quote (equal? v (quote p)))) (cons-source (append (map (lambda (sk$1011) sk$1011) sk$1000) (cons-source i$1008 (quote ()) (quote (i)))) (cons-source fk$1004 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((equal? v (quote p)) (sk ... i) fk))) (quote (if (equal? v (quote p)) (sk ... i) fk))) #f) #f)) (cdr v.384$922$1005))) v.385$923$1007)) (car v.384$922$1005)) #f)) (cdr v.382$920$1001))) v.383$921$1003)) (car v.382$920$1001)) #f)) (cdr v.380$918$996))) v.381$919$998) #f)) (car v.380$918$996)) #f)) (cdr v.378$916$992))) v.379$917$994)) (car v.378$916$992)) #f)) (cdr v.372$910$980)) #f)) (cdr v.375$913$986))) v.376$914$988)) (car v.375$913$986)) #f)) (cdr v.373$911$982)) #f)) (car v.373$911$982)) #f)) (car v.372$910$980)) #f)) (cdr v.370$908$976))) v.371$909$978)) (car v.370$908$976)) #f)) (cdr expr$531$940))))) ((lambda (v.387$925$944) (if (pair? v.387$925$944) ((lambda (v.388$926$946) ((lambda (v$947) ((lambda (v.389$927$948) (if (pair? v.389$927$948) ((lambda (v.390$928$950) (if (null? v.390$928$950) ((lambda (v.391$929$952) (if (pair? v.391$929$952) ((lambda (v.392$930$954) ((lambda (g+s$955) ((lambda (v.393$931$956) (if (pair? v.393$931$956) ((lambda (v.394$932$958) (if (list? v.394$932$958) ((lambda (sk$960) ((lambda (v.395$933$961) (if (pair? v.395$933$961) ((lambda (v.396$934$963) ((lambda (fk$964) ((lambda (v.397$935$965) (if (pair? v.397$935$965) ((lambda (v.398$936$967) ((lambda (i$968) ((lambda (v.399$937$969) (if (null? v.399$937$969) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote null?)) (cons-source v$947 (quote ()) (quote (v))) (quote (null? v))) (cons-source (append (map (lambda (sk$971) sk$971) sk$960) (cons-source i$968 (quote ()) (quote (i)))) (cons-source fk$964 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((null? v) (sk ... i) fk))) (quote (if (null? v) (sk ... i) fk))) #f) #f)) (cdr v.397$935$965))) v.398$936$967)) (car v.397$935$965)) #f)) (cdr v.395$933$961))) v.396$934$963)) (car v.395$933$961)) #f)) (cdr v.393$931$956))) v.394$932$958) #f)) (car v.393$931$956)) #f)) (cdr v.391$929$952))) v.392$930$954)) (car v.391$929$952)) #f)) (cdr v.389$927$948)) #f)) (car v.389$927$948)) #f)) (cdr v.387$925$944))) v.388$926$946)) (car v.387$925$944)) #f)) (cdr expr$531$940))))) (match-one lambda (expr$422$450 rename$423$449 compare$424$448) (car ((lambda (tmp$452$488) (if tmp$452$488 tmp$452$488 ((lambda (tmp$490$494) (if tmp$490$494 tmp$490$494 (cons (error "no expansion for" expr$422$450) #f))) ((lambda (v.1$430$492) ((lambda (x$493) (cons (cons-source (rename$423$449 (quote match-two)) x$493 (quote (match-two . x))) #f)) v.1$430$492)) (cdr expr$422$450))))) ((lambda (v.2$431$454) (if (pair? v.2$431$454) ((lambda (v.3$432$456) ((lambda (v$457) ((lambda (v.4$433$458) (if (pair? v.4$433$458) ((lambda (v.5$434$460) (if (pair? v.5$434$460) ((lambda (v.6$435$462) ((lambda (p$463) ((lambda (v.7$436$464) (if (pair? v.7$436$464) ((lambda (v.8$437$466) ((lambda (q$467) ((lambda (v.9$438$468) ((lambda (r$469) ((lambda (v.10$439$470) (if (pair? v.10$439$470) ((lambda (v.11$440$472) ((lambda (g+s$473) ((lambda (v.12$441$474) (if (pair? v.12$441$474) ((lambda (v.13$442$476) ((lambda (sk$477) ((lambda (v.14$443$478) (if (pair? v.14$443$478) ((lambda (v.15$444$480) ((lambda (fk$481) ((lambda (v.16$445$482) (if (pair? v.16$445$482) ((lambda (v.17$446$484) ((lambda (i$485) ((lambda (v.18$447$486) (if (null? v.18$447$486) (cons (cons-source (rename$423$449 (quote match-check-ellipsis)) (cons-source q$467 (cons-source (cons-source (rename$423$449 (quote match-extract-vars)) (cons-source p$463 (cons-source (cons-source (rename$423$449 (quote match-gen-ellipsis)) (cons-source v$457 (cons-source p$463 (cons-source r$469 (cons-source g+s$473 (cons-source sk$477 (cons-source fk$481 (cons-source i$485 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$485 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (cons-source (cons-source (rename$423$449 (quote match-two)) (cons-source v$457 (cons-source (cons-source p$463 (cons-source q$467 r$469 (quote (q . r))) (quote (p q . r))) (cons-source g+s$473 (cons-source sk$477 (cons-source fk$481 (cons-source i$485 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p q . r) g+s sk fk i))) (quote (v (p q . r) g+s sk fk i))) (quote (match-two v (p q . r) g+s sk fk i))) (quote ()) (quote ((match-two v (p q . r) g+s sk fk i)))) (quote ((match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-two v (p q . r) g+s sk fk i)))) (quote (q (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-two v (p q . r) g+s sk fk i)))) (quote (match-check-ellipsis q (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-two v (p q . r) g+s sk fk i)))) #f) #f)) (cdr v.16$445$482))) v.17$446$484)) (car v.16$445$482)) #f)) (cdr v.14$443$478))) v.15$444$480)) (car v.14$443$478)) #f)) (cdr v.12$441$474))) v.13$442$476)) (car v.12$441$474)) #f)) (cdr v.10$439$470))) v.11$440$472)) (car v.10$439$470)) #f)) (cdr v.4$433$458))) v.9$438$468)) (cdr v.7$436$464))) v.8$437$466)) (car v.7$436$464)) #f)) (cdr v.5$434$460))) v.6$435$462)) (car v.5$434$460)) #f)) (car v.4$433$458)) #f)) (cdr v.2$431$454))) v.3$432$456)) (car v.2$431$454)) #f)) (cdr expr$422$450))))) (match-next lambda (expr$260$299 rename$261$298 compare$262$297) (car ((lambda (tmp$301$313) (if tmp$301$313 tmp$301$313 ((lambda (tmp$315$347) (if tmp$315$347 tmp$315$347 ((lambda (tmp$349$369) (if tmp$349$369 tmp$349$369 (cons (error "no expansion for" expr$260$299) #f))) ((lambda (v.1$268$351) (if (pair? v.1$268$351) ((lambda (v.2$269$353) ((lambda (v$354) ((lambda (v.3$270$355) (if (pair? v.3$270$355) ((lambda (v.4$271$357) ((lambda (g+s$358) ((lambda (v.5$272$359) (if (pair? v.5$272$359) ((lambda (v.6$273$361) (if (pair? v.6$273$361) ((lambda (v.7$274$363) ((lambda (pat$364) ((lambda (v.8$275$365) ((lambda (body$366) ((lambda (v.9$276$367) ((lambda (rest$368) (cons (cons-source (rename$261$298 (quote match-next)) (cons-source v$354 (cons-source g+s$358 (cons-source (cons-source pat$364 (cons-source (cons-source (rename$261$298 (quote =>)) (cons-source (rename$261$298 (quote failure)) (quote ()) (quote (failure))) (quote (=> failure))) body$366 (quote ((=> failure) . body))) (quote (pat (=> failure) . body))) rest$368 (quote ((pat (=> failure) . body) . rest))) (quote (g+s (pat (=> failure) . body) . rest))) (quote (v g+s (pat (=> failure) . body) . rest))) (quote (match-next v g+s (pat (=> failure) . body) . rest))) #f)) v.9$276$367)) (cdr v.5$272$359))) v.8$275$365)) (cdr v.6$273$361))) v.7$274$363)) (car v.6$273$361)) #f)) (car v.5$272$359)) #f)) (cdr v.3$270$355))) v.4$271$357)) (car v.3$270$355)) #f)) (cdr v.1$268$351))) v.2$269$353)) (car v.1$268$351)) #f)) (cdr expr$260$299))))) ((lambda (v.10$277$317) (if (pair? v.10$277$317) ((lambda (v.11$278$319) ((lambda (v$320) ((lambda (v.12$279$321) (if (pair? v.12$279$321) ((lambda (v.13$280$323) ((lambda (g+s$324) ((lambda (v.14$281$325) (if (pair? v.14$281$325) ((lambda (v.15$282$327) (if (pair? v.15$282$327) ((lambda (v.16$283$329) ((lambda (pat$330) ((lambda (v.17$284$331) (if (pair? v.17$284$331) ((lambda (v.18$285$333) (if (pair? v.18$285$333) ((lambda (v.19$286$335) (if (compare$262$297 v.19$286$335 (rename$261$298 (quote =>))) ((lambda (v.20$287$337) (if (pair? v.20$287$337) ((lambda (v.21$288$339) ((lambda (failure$340) ((lambda (v.22$289$341) (if (null? v.22$289$341) ((lambda (v.23$290$343) ((lambda (body$344) ((lambda (v.24$291$345) ((lambda (rest$346) (cons (cons-source (rename$261$298 (quote let)) (cons-source (cons-source (cons-source failure$340 (cons-source (cons-source (rename$261$298 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$261$298 (quote match-next)) (cons-source v$320 (cons-source g+s$324 rest$346 (quote (g+s . rest))) (quote (v g+s . rest))) (quote (match-next v g+s . rest))) (quote ()) (quote ((match-next v g+s . rest)))) (quote (() (match-next v g+s . rest)))) (quote (lambda () (match-next v g+s . rest)))) (quote ()) (quote ((lambda () (match-next v g+s . rest))))) (quote (failure (lambda () (match-next v g+s . rest))))) (quote ()) (quote ((failure (lambda () (match-next v g+s . rest)))))) (cons-source (cons-source (rename$261$298 (quote match-one)) (cons-source v$320 (cons-source pat$330 (cons-source g+s$324 (cons-source (cons-source (rename$261$298 (quote match-drop-ids)) (cons-source (cons-source (rename$261$298 (quote begin)) body$344 (quote (begin . body))) (quote ()) (quote ((begin . body)))) (quote (match-drop-ids (begin . body)))) (cons-source (cons-source failure$340 (quote ()) (quote (failure))) (cons-source (quote ()) (quote ()) (quote (()))) (quote ((failure) ()))) (quote ((match-drop-ids (begin . body)) (failure) ()))) (quote (g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote ()) (quote ((match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (let ((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) #f)) v.24$291$345)) (cdr v.14$281$325))) v.23$290$343)) (cdr v.17$284$331)) #f)) (cdr v.20$287$337))) v.21$288$339)) (car v.20$287$337)) #f)) (cdr v.18$285$333)) #f)) (car v.18$285$333)) #f)) (car v.17$284$331)) #f)) (cdr v.15$282$327))) v.16$283$329)) (car v.15$282$327)) #f)) (car v.14$281$325)) #f)) (cdr v.12$279$321))) v.13$280$323)) (car v.12$279$321)) #f)) (cdr v.10$277$317))) v.11$278$319)) (car v.10$277$317)) #f)) (cdr expr$260$299))))) ((lambda (v.25$292$303) (if (pair? v.25$292$303) ((lambda (v.26$293$305) ((lambda (v$306) ((lambda (v.27$294$307) (if (pair? v.27$294$307) ((lambda (v.28$295$309) ((lambda (g+s$310) ((lambda (v.29$296$311) (if (null? v.29$296$311) (cons (cons-source (rename$261$298 (quote error)) (cons-source (cons-source (rename$261$298 (quote quote)) (cons-source (rename$261$298 (quote match)) (quote ()) (quote (match))) (quote (quote match))) (cons-source "no matching pattern" (quote ()) (quote ("no matching pattern"))) (quote ((quote match) "no matching pattern"))) (quote (error (quote match) "no matching pattern"))) #f) #f)) (cdr v.27$294$307))) v.28$295$309)) (car v.27$294$307)) #f)) (cdr v.25$292$303))) v.26$293$305)) (car v.25$292$303)) #f)) (cdr expr$260$299))))) (match lambda (expr$32$77 rename$33$76 compare$34$75) (car ((lambda (tmp$79$83) (if tmp$79$83 tmp$79$83 ((lambda (tmp$85$93) (if tmp$85$93 tmp$85$93 ((lambda (tmp$95$122) (if tmp$95$122 tmp$95$122 ((lambda (tmp$124$153) (if tmp$124$153 tmp$124$153 ((lambda (tmp$155$181) (if tmp$155$181 tmp$155$181 (cons (error "no expansion for" expr$32$77) #f))) ((lambda (v.1$40$157) (if (pair? v.1$40$157) ((lambda (v.2$41$159) ((lambda (atom$160) ((lambda (v.3$42$161) ((lambda (w.4$43$165 pat-ls7$46$164 body-ls6$45$163) ((lambda (lp.5$44$166) (set! lp.5$44$166 (lambda (w.4$43$169 pat-ls7$46$168 body-ls6$45$167) (if (null? w.4$43$169) ((lambda (pat$171 body$170) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source atom$160 (quote ()) (quote (atom))) (quote (v atom))) (quote ()) (quote ((v atom)))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source atom$160 (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source atom$160 (quote ()) (quote (atom))) (quote (set! atom))) (quote ()) (quote ((set! atom)))) (quote (atom (set! atom)))) (map (lambda (pat$173 body$172) (cons-source pat$173 body$172 (quote (pat . body)))) pat$171 body$170) (quote ((atom (set! atom)) (pat . body) ...))) (quote (v (atom (set! atom)) (pat . body) ...))) (quote (match-next v (atom (set! atom)) (pat . body) ...))) (quote ()) (quote ((match-next v (atom (set! atom)) (pat . body) ...)))) (quote (((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) (quote (let ((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) #f)) (reverse pat-ls7$46$168) (reverse body-ls6$45$167)) (if (pair? w.4$43$169) ((lambda (v.8$47$175) (if (pair? v.8$47$175) ((lambda (v.9$48$177) ((lambda (pat$178) ((lambda (v.10$49$179) ((lambda (body$180) (lp.5$44$166 (cdr w.4$43$169) (cons pat$178 pat-ls7$46$168) (cons body$180 body-ls6$45$167))) v.10$49$179)) (cdr v.8$47$175))) v.9$48$177)) (car v.8$47$175)) #f)) (car w.4$43$169)) #f)))) (lp.5$44$166 w.4$43$165 pat-ls7$46$164 body-ls6$45$163)) #f)) v.3$42$161 (quote ()) (quote ()))) (cdr v.1$40$157))) v.2$41$159)) (car v.1$40$157)) #f)) (cdr expr$32$77))))) ((lambda (v.11$50$126) (if (pair? v.11$50$126) ((lambda (v.12$51$128) (if (vector? v.12$51$128) ((lambda (v.13$52$130) (if (list? v.13$52$130) ((lambda (vec$132) ((lambda (v.14$53$133) ((lambda (w.15$54$137 pat-ls18$57$136 body-ls17$56$135) ((lambda (lp.16$55$138) (set! lp.16$55$138 (lambda (w.15$54$141 pat-ls18$57$140 body-ls17$56$139) (if (null? w.15$54$141) ((lambda (pat$143 body$142) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source (list->vector vec$132) (quote ()) (quote (#(vec ...)))) (quote (v #(vec ...)))) (quote ()) (quote ((v #(vec ...))))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source (rename$33$76 (quote v)) (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source (rename$33$76 (quote v)) (quote ()) (quote (v))) (quote (set! v))) (quote ()) (quote ((set! v)))) (quote (v (set! v)))) (map (lambda (pat$145 body$144) (cons-source pat$145 body$144 (quote (pat . body)))) pat$143 body$142) (quote ((v (set! v)) (pat . body) ...))) (quote (v (v (set! v)) (pat . body) ...))) (quote (match-next v (v (set! v)) (pat . body) ...))) (quote ()) (quote ((match-next v (v (set! v)) (pat . body) ...)))) (quote (((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) (quote (let ((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) #f)) (reverse pat-ls18$57$140) (reverse body-ls17$56$139)) (if (pair? w.15$54$141) ((lambda (v.19$58$147) (if (pair? v.19$58$147) ((lambda (v.20$59$149) ((lambda (pat$150) ((lambda (v.21$60$151) ((lambda (body$152) (lp.16$55$138 (cdr w.15$54$141) (cons pat$150 pat-ls18$57$140) (cons body$152 body-ls17$56$139))) v.21$60$151)) (cdr v.19$58$147))) v.20$59$149)) (car v.19$58$147)) #f)) (car w.15$54$141)) #f)))) (lp.16$55$138 w.15$54$137 pat-ls18$57$136 body-ls17$56$135)) #f)) v.14$53$133 (quote ()) (quote ()))) (cdr v.11$50$126))) v.13$52$130) #f)) (vector->list v.12$51$128)) #f)) (car v.11$50$126)) #f)) (cdr expr$32$77))))) ((lambda (v.22$61$97) (if (pair? v.22$61$97) ((lambda (v.23$62$99) (if (list? v.23$62$99) ((lambda (app$101) ((lambda (v.24$63$102) ((lambda (w.25$64$106 pat-ls28$67$105 body-ls27$66$104) ((lambda (lp.26$65$107) (set! lp.26$65$107 (lambda (w.25$64$110 pat-ls28$67$109 body-ls27$66$108) (if (null? w.25$64$110) ((lambda (pat$112 body$111) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source app$101 (quote ()) (quote ((app ...)))) (quote (v (app ...)))) (quote ()) (quote ((v (app ...))))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source app$101 (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source app$101 (quote ()) (quote ((app ...)))) (quote (set! (app ...)))) (quote ()) (quote ((set! (app ...))))) (quote ((app ...) (set! (app ...))))) (map (lambda (pat$114 body$113) (cons-source pat$114 body$113 (quote (pat . body)))) pat$112 body$111) (quote (((app ...) (set! (app ...))) (pat . body) ...))) (quote (v ((app ...) (set! (app ...))) (pat . body) ...))) (quote (match-next v ((app ...) (set! (app ...))) (pat . body) ...))) (quote ()) (quote ((match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (let ((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) #f)) (reverse pat-ls28$67$109) (reverse body-ls27$66$108)) (if (pair? w.25$64$110) ((lambda (v.29$68$116) (if (pair? v.29$68$116) ((lambda (v.30$69$118) ((lambda (pat$119) ((lambda (v.31$70$120) ((lambda (body$121) (lp.26$65$107 (cdr w.25$64$110) (cons pat$119 pat-ls28$67$109) (cons body$121 body-ls27$66$108))) v.31$70$120)) (cdr v.29$68$116))) v.30$69$118)) (car v.29$68$116)) #f)) (car w.25$64$110)) #f)))) (lp.26$65$107 w.25$64$106 pat-ls28$67$105 body-ls27$66$104)) #f)) v.24$63$102 (quote ()) (quote ()))) (cdr v.22$61$97))) v.23$62$99) #f)) (car v.22$61$97)) #f)) (cdr expr$32$77))))) ((lambda (v.32$71$87) (if (pair? v.32$71$87) ((lambda (v.33$72$89) ((lambda (atom$90) ((lambda (v.34$73$91) (if (null? v.34$73$91) (cons (cons-source (rename$33$76 (quote match-syntax-error)) (cons-source "no match clauses" (quote ()) (quote ("no match clauses"))) (quote (match-syntax-error "no match clauses"))) #f) #f)) (cdr v.32$71$87))) v.33$72$89)) (car v.32$71$87)) #f)) (cdr expr$32$77))))) ((lambda (v.35$74$81) (if (null? v.35$74$81) (cons (cons-source (rename$33$76 (quote match-syntax-error)) (cons-source "missing match expression" (quote ()) (quote ("missing match expression"))) (quote (match-syntax-error "missing match expression"))) #f) #f)) (cdr expr$32$77))))) (match-syntax-error lambda (expr$5$16 rename$6$15 compare$7$14) (car ((lambda (tmp$18$22) (if tmp$18$22 tmp$18$22 (cons (error "no expansion for" expr$5$16) #f))) ((lambda (v.1$13$20) (if (null? v.1$13$20) (cons (cons-source (rename$6$15 (quote match-syntax-error)) (cons-source "invalid match-syntax-error usage" (quote ()) (quote ("invalid match-syntax-error usage"))) (quote (match-syntax-error "invalid match-syntax-error usage"))) #f) #f)) (cdr expr$5$16))))))