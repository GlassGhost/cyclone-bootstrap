;; This file was automatically generated by the Cyclone Scheme compiler
((test-syntax-error lambda (expr$368 rename$369 compare$370) (car ((lambda (tmp$378) (if tmp$378 tmp$378 (cons (error "no expansion for" expr$368) #f))) ((lambda (v.1$376) (if (null? v.1$376) (cons (cons-source (rename$369 (quote syntax-error)) (cons-source "invalid use of test-syntax-error" (quote ()) (quote ("invalid use of test-syntax-error"))) (quote (syntax-error "invalid use of test-syntax-error"))) #f) #f)) (cdr expr$368))))) (test-group lambda (expr$348 rename$349 compare$350) (car ((lambda (tmp$360) (if tmp$360 tmp$360 (cons (error "no expansion for" expr$348) #f))) ((lambda (v.1$356) (if (pair? v.1$356) ((lambda (v.2$357) ((lambda (name-expr) ((lambda (v.3$358) (if (list? v.3$358) ((lambda (body) (cons (cons-source (rename$349 (quote let)) (cons-source (cons-source (cons-source (rename$349 (quote name)) (cons-source name-expr (quote ()) (quote (name-expr))) (quote (name name-expr))) (cons-source (cons-source (rename$349 (quote old-group)) (cons-source (cons-source (rename$349 (quote current-test-group)) (quote ()) (quote (current-test-group))) (quote ()) (quote ((current-test-group)))) (quote (old-group (current-test-group)))) (quote ()) (quote ((old-group (current-test-group))))) (quote ((name name-expr) (old-group (current-test-group))))) (cons-source (cons-source (rename$349 (quote if)) (cons-source (cons-source (rename$349 (quote not)) (cons-source (cons-source (rename$349 (quote string?)) (cons-source (rename$349 (quote name)) (quote ()) (quote (name))) (quote (string? name))) (quote ()) (quote ((string? name)))) (quote (not (string? name)))) (cons-source (cons-source (rename$349 (quote error)) (cons-source "a name is required, got " (cons-source (cons-source (rename$349 (quote quote)) (cons-source name-expr (quote ()) (quote (name-expr))) (quote (quote name-expr))) (cons-source (rename$349 (quote name)) (quote ()) (quote (name))) (quote ((quote name-expr) name))) (quote ("a name is required, got " (quote name-expr) name))) (quote (error "a name is required, got " (quote name-expr) name))) (quote ()) (quote ((error "a name is required, got " (quote name-expr) name)))) (quote ((not (string? name)) (error "a name is required, got " (quote name-expr) name)))) (quote (if (not (string? name)) (error "a name is required, got " (quote name-expr) name)))) (cons-source (cons-source (rename$349 (quote test-begin)) (cons-source (rename$349 (quote name)) (quote ()) (quote (name))) (quote (test-begin name))) (cons-source (cons-source (rename$349 (quote guard)) (cons-source (cons-source (rename$349 (quote exn)) (cons-source (cons-source (rename$349 (quote else)) (cons-source (cons-source (rename$349 (quote warning)) (cons-source "error in group outside of tests" (quote ()) (quote ("error in group outside of tests"))) (quote (warning "error in group outside of tests"))) (cons-source (cons-source (rename$349 (quote print-exception)) (cons-source (rename$349 (quote exn)) (cons-source (cons-source (rename$349 (quote current-error-port)) (quote ()) (quote (current-error-port))) (quote ()) (quote ((current-error-port)))) (quote (exn (current-error-port)))) (quote (print-exception exn (current-error-port)))) (cons-source (cons-source (rename$349 (quote test-group-inc!)) (cons-source (cons-source (rename$349 (quote current-test-group)) (quote ()) (quote (current-test-group))) (cons-source (cons-source (rename$349 (quote quote)) (cons-source (rename$349 (quote count)) (quote ()) (quote (count))) (quote (quote count))) (quote ()) (quote ((quote count)))) (quote ((current-test-group) (quote count)))) (quote (test-group-inc! (current-test-group) (quote count)))) (cons-source (cons-source (rename$349 (quote test-group-inc!)) (cons-source (cons-source (rename$349 (quote current-test-group)) (quote ()) (quote (current-test-group))) (cons-source (cons-source (rename$349 (quote quote)) (cons-source (rename$349 (quote ERROR)) (quote ()) (quote (ERROR))) (quote (quote ERROR))) (quote ()) (quote ((quote ERROR)))) (quote ((current-test-group) (quote ERROR)))) (quote (test-group-inc! (current-test-group) (quote ERROR)))) (quote ()) (quote ((test-group-inc! (current-test-group) (quote ERROR))))) (quote ((test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR))))) (quote ((print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR))))) (quote ((warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR))))) (quote (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR))))) (quote ()) (quote ((else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))))) (quote (exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))))) body (quote ((exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))) body ...))) (quote (guard (exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))) body ...))) (cons-source (cons-source (rename$349 (quote test-end)) (cons-source (rename$349 (quote name)) (quote ()) (quote (name))) (quote (test-end name))) (cons-source (cons-source (rename$349 (quote current-test-group)) (cons-source (rename$349 (quote old-group)) (quote ()) (quote (old-group))) (quote (current-test-group old-group))) (quote ()) (quote ((current-test-group old-group)))) (quote ((test-end name) (current-test-group old-group)))) (quote ((guard (exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))) body ...) (test-end name) (current-test-group old-group)))) (quote ((test-begin name) (guard (exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))) body ...) (test-end name) (current-test-group old-group)))) (quote ((if (not (string? name)) (error "a name is required, got " (quote name-expr) name)) (test-begin name) (guard (exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))) body ...) (test-end name) (current-test-group old-group)))) (quote (((name name-expr) (old-group (current-test-group))) (if (not (string? name)) (error "a name is required, got " (quote name-expr) name)) (test-begin name) (guard (exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))) body ...) (test-end name) (current-test-group old-group)))) (quote (let ((name name-expr) (old-group (current-test-group))) (if (not (string? name)) (error "a name is required, got " (quote name-expr) name)) (test-begin name) (guard (exn (else (warning "error in group outside of tests") (print-exception exn (current-error-port)) (test-group-inc! (current-test-group) (quote count)) (test-group-inc! (current-test-group) (quote ERROR)))) body ...) (test-end name) (current-test-group old-group)))) #f)) v.3$358) #f)) (cdr v.1$356))) v.2$357)) (car v.1$356)) #f)) (cdr expr$348))))) (test-vars lambda (expr$305 rename$306 compare$307) (car ((lambda (tmp$332) (if tmp$332 tmp$332 (cons (error "no expansion for" expr$305) #f))) ((lambda (v.1$313) (if (pair? v.1$313) ((lambda (v.2$314) (if (list? v.2$314) ((lambda (vars) ((lambda (v.3$315) (if (pair? v.3$315) ((lambda (v.4$316) ((lambda (n) ((lambda (v.5$317) (if (pair? v.5$317) ((lambda (v.6$318) ((lambda (expect) ((lambda (v.7$319) (if (pair? v.7$319) ((lambda (v.8$320) ((lambda (expr) ((lambda (v.9$321) (if (pair? v.9$321) ((lambda (v.10$322) ((lambda (w.11$323 key-ls14$326 val-ls13$325) ((lambda (lp.12$324) (set! lp.12$324 (lambda (w.11$323 key-ls14$326 val-ls13$325) (if (null? w.11$323) ((lambda (key val) ((lambda (v.18$330) (if (null? v.18$330) (cons (cons-source (rename$306 (quote test-run)) (cons-source (cons-source (rename$306 (quote lambda)) (cons-source (quote ()) (cons-source expect (quote ()) (quote (expect))) (quote (() expect))) (quote (lambda () expect))) (cons-source (cons-source (rename$306 (quote lambda)) (cons-source (quote ()) (cons-source expr (quote ()) (quote (expr))) (quote (() expr))) (quote (lambda () expr))) (cons-source (cons-source (rename$306 (quote quasiquote)) (cons-source (cons-source (cons-source (rename$306 (quote name)) (cons-source (rename$306 (quote unquote)) (cons-source n (quote ()) (quote (n))) (quote (unquote n))) (quote (name unquote n))) (cons-source (cons-source (rename$306 (quote source)) expr (quote (source . expr))) (cons-source (cons-source (rename$306 (quote var-names)) vars (quote (var-names vars ...))) (cons-source (cons-source (rename$306 (quote var-values)) (cons-source (rename$306 (quote unquote)) (cons-source (cons-source (rename$306 (quote list)) vars (quote (list vars ...))) (quote ()) (quote ((list vars ...)))) (quote (unquote (list vars ...)))) (quote (var-values unquote (list vars ...)))) (map (lambda (key val) (cons-source key val (quote (key . val)))) key val) (quote ((var-values unquote (list vars ...)) (key . val) ...))) (quote ((var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...))) (quote ((source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...))) (quote ((name unquote n) (source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...))) (quote ()) (quote (((name unquote n) (source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...)))) (quote (quasiquote ((name unquote n) (source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...)))) (quote ()) (quote ((quasiquote ((name unquote n) (source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...))))) (quote ((lambda () expr) (quasiquote ((name unquote n) (source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...))))) (quote ((lambda () expect) (lambda () expr) (quasiquote ((name unquote n) (source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...))))) (quote (test-run (lambda () expect) (lambda () expr) (quasiquote ((name unquote n) (source . expr) (var-names vars ...) (var-values unquote (list vars ...)) (key . val) ...))))) #f) #f)) (cdr v.9$321))) (reverse key-ls14$326) (reverse val-ls13$325)) (if (pair? w.11$323) ((lambda (v.15$327) (if (pair? v.15$327) ((lambda (v.16$328) ((lambda (key) ((lambda (v.17$329) ((lambda (val) (lp.12$324 (cdr w.11$323) (cons key key-ls14$326) (cons val val-ls13$325))) v.17$329)) (cdr v.15$327))) v.16$328)) (car v.15$327)) #f)) (car w.11$323)) #f)))) (lp.12$324 w.11$323 key-ls14$326 val-ls13$325)) #f)) v.10$322 (quote ()) (quote ()))) (car v.9$321)) #f)) (cdr v.7$319))) v.8$320)) (car v.7$319)) #f)) (cdr v.5$317))) v.6$318)) (car v.5$317)) #f)) (cdr v.3$315))) v.4$316)) (car v.3$315)) #f)) (cdr v.1$313))) v.2$314) #f)) (car v.1$313)) #f)) (cdr expr$305))))) (test-propagate-info lambda (expr$276 rename$277 compare$278) (car ((lambda (tmp$294) (if tmp$294 tmp$294 (cons (error "no expansion for" expr$276) #f))) ((lambda (v.1$284) (if (pair? v.1$284) ((lambda (v.2$285) ((lambda (name) ((lambda (v.3$286) (if (pair? v.3$286) ((lambda (v.4$287) ((lambda (expect) ((lambda (v.5$288) (if (pair? v.5$288) ((lambda (v.6$289) ((lambda (expr) ((lambda (v.7$290) (if (pair? v.7$290) ((lambda (v.8$291) ((lambda (info) ((lambda (v.9$292) (if (null? v.9$292) (cons (cons-source (rename$277 (quote test-vars)) (cons-source (quote ()) (cons-source name (cons-source expect (cons-source expr (cons-source info (quote ()) (quote (info))) (quote (expr info))) (quote (expect expr info))) (quote (name expect expr info))) (quote (() name expect expr info))) (quote (test-vars () name expect expr info))) #f) #f)) (cdr v.7$290))) v.8$291)) (car v.7$290)) #f)) (cdr v.5$288))) v.6$289)) (car v.5$288)) #f)) (cdr v.3$286))) v.4$287)) (car v.3$286)) #f)) (cdr v.1$284))) v.2$285)) (car v.1$284)) #f)) (cdr expr$276))))) (test-error lambda (expr$240 rename$241 compare$242) (car ((lambda (tmp$258) (if tmp$258 tmp$258 ((lambda (tmp$263) (if tmp$263 tmp$263 ((lambda (tmp$269) (if tmp$269 tmp$269 (cons (error "no expansion for" expr$240) #f))) ((lambda (v.1$248) (if (list? v.1$248) ((lambda (a) (cons (cons-source (rename$241 (quote test-syntax-error)) (cons-source (cons-source (rename$241 (quote quote)) (cons-source (rename$241 (quote test-error)) (quote ()) (quote (test-error))) (quote (quote test-error))) (cons-source "1 or 2 arguments required" (cons-source (cons-source (rename$241 (quote test)) a (quote (test a ...))) (quote ()) (quote ((test a ...)))) (quote ("1 or 2 arguments required" (test a ...)))) (quote ((quote test-error) "1 or 2 arguments required" (test a ...)))) (quote (test-syntax-error (quote test-error) "1 or 2 arguments required" (test a ...)))) #f)) v.1$248) #f)) (cdr expr$240))))) ((lambda (v.2$249) (if (pair? v.2$249) ((lambda (v.3$250) ((lambda (name) ((lambda (v.4$251) (if (pair? v.4$251) ((lambda (v.5$252) ((lambda (expr) ((lambda (v.6$253) (if (null? v.6$253) (cons (cons-source (rename$241 (quote test-propagate-info)) (cons-source name (cons-source #f (cons-source expr (cons-source (cons-source (cons-source (rename$241 (quote expect-error)) #t (quote (expect-error . #t))) (quote ()) (quote ((expect-error . #t)))) (quote ()) (quote (((expect-error . #t))))) (quote (expr ((expect-error . #t))))) (quote (#f expr ((expect-error . #t))))) (quote (name #f expr ((expect-error . #t))))) (quote (test-propagate-info name #f expr ((expect-error . #t))))) #f) #f)) (cdr v.4$251))) v.5$252)) (car v.4$251)) #f)) (cdr v.2$249))) v.3$250)) (car v.2$249)) #f)) (cdr expr$240))))) ((lambda (v.7$254) (if (pair? v.7$254) ((lambda (v.8$255) ((lambda (expr) ((lambda (v.9$256) (if (null? v.9$256) (cons (cons-source (rename$241 (quote test-error)) (cons-source #f (cons-source expr (quote ()) (quote (expr))) (quote (#f expr))) (quote (test-error #f expr))) #f) #f)) (cdr v.7$254))) v.8$255)) (car v.7$254)) #f)) (cdr expr$240))))) (test-values lambda (expr$203 rename$204 compare$205) (car ((lambda (tmp$224) (if tmp$224 tmp$224 ((lambda (tmp$230) (if tmp$230 tmp$230 (cons (error "no expansion for" expr$203) #f))) ((lambda (v.1$211) (if (pair? v.1$211) ((lambda (v.2$212) ((lambda (name) ((lambda (v.3$213) (if (pair? v.3$213) ((lambda (v.4$214) ((lambda (expect) ((lambda (v.5$215) (if (pair? v.5$215) ((lambda (v.6$216) ((lambda (expr) ((lambda (v.7$217) (if (null? v.7$217) (cons (cons-source (rename$204 (quote test)) (cons-source name (cons-source (cons-source (rename$204 (quote call-with-values)) (cons-source (cons-source (rename$204 (quote lambda)) (cons-source (quote ()) (cons-source expect (quote ()) (quote (expect))) (quote (() expect))) (quote (lambda () expect))) (cons-source (cons-source (rename$204 (quote lambda)) (cons-source (rename$204 (quote results)) (cons-source (rename$204 (quote results)) (quote ()) (quote (results))) (quote (results results))) (quote (lambda results results))) (quote ()) (quote ((lambda results results)))) (quote ((lambda () expect) (lambda results results)))) (quote (call-with-values (lambda () expect) (lambda results results)))) (cons-source (cons-source (rename$204 (quote call-with-values)) (cons-source (cons-source (rename$204 (quote lambda)) (cons-source (quote ()) (cons-source expr (quote ()) (quote (expr))) (quote (() expr))) (quote (lambda () expr))) (cons-source (cons-source (rename$204 (quote lambda)) (cons-source (rename$204 (quote results)) (cons-source (rename$204 (quote results)) (quote ()) (quote (results))) (quote (results results))) (quote (lambda results results))) (quote ()) (quote ((lambda results results)))) (quote ((lambda () expr) (lambda results results)))) (quote (call-with-values (lambda () expr) (lambda results results)))) (quote ()) (quote ((call-with-values (lambda () expr) (lambda results results))))) (quote ((call-with-values (lambda () expect) (lambda results results)) (call-with-values (lambda () expr) (lambda results results))))) (quote (name (call-with-values (lambda () expect) (lambda results results)) (call-with-values (lambda () expr) (lambda results results))))) (quote (test name (call-with-values (lambda () expect) (lambda results results)) (call-with-values (lambda () expr) (lambda results results))))) #f) #f)) (cdr v.5$215))) v.6$216)) (car v.5$215)) #f)) (cdr v.3$213))) v.4$214)) (car v.3$213)) #f)) (cdr v.1$211))) v.2$212)) (car v.1$211)) #f)) (cdr expr$203))))) ((lambda (v.8$218) (if (pair? v.8$218) ((lambda (v.9$219) ((lambda (expect) ((lambda (v.10$220) (if (pair? v.10$220) ((lambda (v.11$221) ((lambda (expr) ((lambda (v.12$222) (if (null? v.12$222) (cons (cons-source (rename$204 (quote test-values)) (cons-source #f (cons-source expect (cons-source expr (quote ()) (quote (expr))) (quote (expect expr))) (quote (#f expect expr))) (quote (test-values #f expect expr))) #f) #f)) (cdr v.10$220))) v.11$221)) (car v.10$220)) #f)) (cdr v.8$218))) v.9$219)) (car v.8$218)) #f)) (cdr expr$203))))) (test-not lambda (expr$172 rename$173 compare$174) (car ((lambda (tmp$189) (if tmp$189 tmp$189 ((lambda (tmp$194) (if tmp$194 tmp$194 (cons (error "no expansion for" expr$172) #f))) ((lambda (v.1$180) (if (pair? v.1$180) ((lambda (v.2$181) ((lambda (name) ((lambda (v.3$182) (if (pair? v.3$182) ((lambda (v.4$183) ((lambda (expr) ((lambda (v.5$184) (if (null? v.5$184) (cons (cons-source (rename$173 (quote test-assert)) (cons-source name (cons-source (cons-source (rename$173 (quote not)) (cons-source expr (quote ()) (quote (expr))) (quote (not expr))) (quote ()) (quote ((not expr)))) (quote (name (not expr)))) (quote (test-assert name (not expr)))) #f) #f)) (cdr v.3$182))) v.4$183)) (car v.3$182)) #f)) (cdr v.1$180))) v.2$181)) (car v.1$180)) #f)) (cdr expr$172))))) ((lambda (v.6$185) (if (pair? v.6$185) ((lambda (v.7$186) ((lambda (expr) ((lambda (v.8$187) (if (null? v.8$187) (cons (cons-source (rename$173 (quote test-assert)) (cons-source (cons-source (rename$173 (quote not)) (cons-source expr (quote ()) (quote (expr))) (quote (not expr))) (quote ()) (quote ((not expr)))) (quote (test-assert (not expr)))) #f) #f)) (cdr v.6$185))) v.7$186)) (car v.6$185)) #f)) (cdr expr$172))))) (test-assert lambda (expr$136 rename$137 compare$138) (car ((lambda (tmp$154) (if tmp$154 tmp$154 ((lambda (tmp$159) (if tmp$159 tmp$159 ((lambda (tmp$165) (if tmp$165 tmp$165 (cons (error "no expansion for" expr$136) #f))) ((lambda (v.1$144) (if (list? v.1$144) ((lambda (a) (cons (cons-source (rename$137 (quote test-syntax-error)) (cons-source (cons-source (rename$137 (quote quote)) (cons-source (rename$137 (quote test-assert)) (quote ()) (quote (test-assert))) (quote (quote test-assert))) (cons-source "1 or 2 arguments required" (cons-source (cons-source (rename$137 (quote test)) a (quote (test a ...))) (quote ()) (quote ((test a ...)))) (quote ("1 or 2 arguments required" (test a ...)))) (quote ((quote test-assert) "1 or 2 arguments required" (test a ...)))) (quote (test-syntax-error (quote test-assert) "1 or 2 arguments required" (test a ...)))) #f)) v.1$144) #f)) (cdr expr$136))))) ((lambda (v.2$145) (if (pair? v.2$145) ((lambda (v.3$146) ((lambda (name) ((lambda (v.4$147) (if (pair? v.4$147) ((lambda (v.5$148) ((lambda (expr) ((lambda (v.6$149) (if (null? v.6$149) (cons (cons-source (rename$137 (quote test-propagate-info)) (cons-source name (cons-source #f (cons-source expr (cons-source (cons-source (cons-source (rename$137 (quote assertion)) #t (quote (assertion . #t))) (quote ()) (quote ((assertion . #t)))) (quote ()) (quote (((assertion . #t))))) (quote (expr ((assertion . #t))))) (quote (#f expr ((assertion . #t))))) (quote (name #f expr ((assertion . #t))))) (quote (test-propagate-info name #f expr ((assertion . #t))))) #f) #f)) (cdr v.4$147))) v.5$148)) (car v.4$147)) #f)) (cdr v.2$145))) v.3$146)) (car v.2$145)) #f)) (cdr expr$136))))) ((lambda (v.7$150) (if (pair? v.7$150) ((lambda (v.8$151) ((lambda (expr) ((lambda (v.9$152) (if (null? v.9$152) (cons (cons-source (rename$137 (quote test-assert)) (cons-source #f (cons-source expr (quote ()) (quote (expr))) (quote (#f expr))) (quote (test-assert #f expr))) #f) #f)) (cdr v.7$150))) v.8$151)) (car v.7$150)) #f)) (cdr expr$136))))) (test-equal lambda (expr$117 rename$118 compare$119) (car ((lambda (tmp$129) (if tmp$129 tmp$129 (cons (error "no expansion for" expr$117) #f))) ((lambda (v.1$125) (if (pair? v.1$125) ((lambda (v.2$126) ((lambda (equal) ((lambda (v.3$127) ((lambda (args) (cons (cons-source (rename$118 (quote parameterize)) (cons-source (cons-source (cons-source (rename$118 (quote current-test-comparator)) (cons-source equal (quote ()) (quote (equal))) (quote (current-test-comparator equal))) (quote ()) (quote ((current-test-comparator equal)))) (cons-source (cons-source (rename$118 (quote test)) args (quote (test . args))) (quote ()) (quote ((test . args)))) (quote (((current-test-comparator equal)) (test . args)))) (quote (parameterize ((current-test-comparator equal)) (test . args)))) #f)) v.3$127)) (cdr v.1$125))) v.2$126)) (car v.1$125)) #f)) (cdr expr$117))))) (test lambda (expr$23 rename$24 compare$25) (car ((lambda (tmp$70) (if tmp$70 tmp$70 ((lambda (tmp$76) (if tmp$76 tmp$76 ((lambda (tmp$84) (if tmp$84 tmp$84 ((lambda (tmp$95) (if tmp$95 tmp$95 ((lambda (tmp$103) (if tmp$103 tmp$103 ((lambda (tmp$110) (if tmp$110 tmp$110 (cons (error "no expansion for" expr$23) #f))) ((lambda (v.1$31) (if (list? v.1$31) ((lambda (a) (cons (cons-source (rename$24 (quote test-syntax-error)) (cons-source (cons-source (rename$24 (quote quote)) (cons-source (rename$24 (quote test)) (quote ()) (quote (test))) (quote (quote test))) (cons-source "test requires 2 or 3 arguments" (cons-source (cons-source (rename$24 (quote test)) a (quote (test a ...))) (quote ()) (quote ((test a ...)))) (quote ("test requires 2 or 3 arguments" (test a ...)))) (quote ((quote test) "test requires 2 or 3 arguments" (test a ...)))) (quote (test-syntax-error (quote test) "test requires 2 or 3 arguments" (test a ...)))) #f)) v.1$31) #f)) (cdr expr$23))))) ((lambda (v.2$32) (if (pair? v.2$32) ((lambda (v.3$33) ((lambda (name) ((lambda (v.4$34) (if (pair? v.4$34) ((lambda (v.5$35) ((lambda (expect) ((lambda (v.6$36) (if (pair? v.6$36) ((lambda (v.7$37) ((lambda (expr) ((lambda (v.8$38) (if (null? v.8$38) (cons (cons-source (rename$24 (quote test-propagate-info)) (cons-source name (cons-source expect (cons-source expr (cons-source (quote ()) (quote ()) (quote (()))) (quote (expr ()))) (quote (expect expr ()))) (quote (name expect expr ()))) (quote (test-propagate-info name expect expr ()))) #f) #f)) (cdr v.6$36))) v.7$37)) (car v.6$36)) #f)) (cdr v.4$34))) v.5$35)) (car v.4$34)) #f)) (cdr v.2$32))) v.3$33)) (car v.2$32)) #f)) (cdr expr$23))))) ((lambda (v.9$39) (if (pair? v.9$39) ((lambda (v.10$40) ((lambda (name) ((lambda (v.11$41) (if (pair? v.11$41) ((lambda (v.12$42) (if (list? v.12$42) ((lambda (expect) ((lambda (v.13$43) (if (pair? v.13$43) ((lambda (v.14$44) ((lambda (expr) ((lambda (v.15$45) (if (null? v.15$45) (cons (cons-source (rename$24 (quote test-syntax-error)) (cons-source (cons-source (rename$24 (quote quote)) (cons-source (rename$24 (quote test)) (quote ()) (quote (test))) (quote (quote test))) (cons-source "the test expression should come last: (test <expected> (<expr> ...)) " (cons-source (cons-source (rename$24 (quote test)) (cons-source name (cons-source expect (cons-source expr (quote ()) (quote (expr))) (quote ((expect ...) expr))) (quote (name (expect ...) expr))) (quote (test name (expect ...) expr))) (quote ()) (quote ((test name (expect ...) expr)))) (quote ("the test expression should come last: (test <expected> (<expr> ...)) " (test name (expect ...) expr)))) (quote ((quote test) "the test expression should come last: (test <expected> (<expr> ...)) " (test name (expect ...) expr)))) (quote (test-syntax-error (quote test) "the test expression should come last: (test <expected> (<expr> ...)) " (test name (expect ...) expr)))) #f) #f)) (cdr v.13$43))) v.14$44)) (car v.13$43)) #f)) (cdr v.11$41))) v.12$42) #f)) (car v.11$41)) #f)) (cdr v.9$39))) v.10$40)) (car v.9$39)) #f)) (cdr expr$23))))) ((lambda (v.16$46) (if (pair? v.16$46) ((lambda (v.17$47) ((lambda (name) ((lambda (v.18$48) (if (pair? v.18$48) ((lambda (v.19$49) (if (pair? v.19$49) ((lambda (v.20$50) (if (compare$25 v.20$50 (rename$24 (quote quote))) ((lambda (v.21$51) (if (pair? v.21$51) ((lambda (v.22$52) ((lambda (expect) ((lambda (v.23$53) (if (null? v.23$53) ((lambda (v.24$54) (if (pair? v.24$54) ((lambda (v.25$55) ((lambda (expr) ((lambda (v.26$56) (if (null? v.26$56) (cons (cons-source (rename$24 (quote test-propagate-info)) (cons-source name (cons-source (cons-source (rename$24 (quote quote)) (cons-source expect (quote ()) (quote (expect))) (quote (quote expect))) (cons-source expr (cons-source (quote ()) (quote ()) (quote (()))) (quote (expr ()))) (quote ((quote expect) expr ()))) (quote (name (quote expect) expr ()))) (quote (test-propagate-info name (quote expect) expr ()))) #f) #f)) (cdr v.24$54))) v.25$55)) (car v.24$54)) #f)) (cdr v.18$48)) #f)) (cdr v.21$51))) v.22$52)) (car v.21$51)) #f)) (cdr v.19$49)) #f)) (car v.19$49)) #f)) (car v.18$48)) #f)) (cdr v.16$46))) v.17$47)) (car v.16$46)) #f)) (cdr expr$23))))) ((lambda (v.27$57) (if (pair? v.27$57) ((lambda (v.28$58) ((lambda (name) ((lambda (v.29$59) (if (pair? v.29$59) ((lambda (v.30$60) ((lambda (expect) ((lambda (v.31$61) (if (pair? v.31$61) ((lambda (v.32$62) (if (list? v.32$62) ((lambda (expr) ((lambda (v.33$63) (if (null? v.33$63) (cons (cons-source (rename$24 (quote test-propagate-info)) (cons-source name (cons-source expect (cons-source expr (cons-source (quote ()) (quote ()) (quote (()))) (quote ((expr ...) ()))) (quote (expect (expr ...) ()))) (quote (name expect (expr ...) ()))) (quote (test-propagate-info name expect (expr ...) ()))) #f) #f)) (cdr v.31$61))) v.32$62) #f)) (car v.31$61)) #f)) (cdr v.29$59))) v.30$60)) (car v.29$59)) #f)) (cdr v.27$57))) v.28$58)) (car v.27$57)) #f)) (cdr expr$23))))) ((lambda (v.34$64) (if (pair? v.34$64) ((lambda (v.35$65) ((lambda (expect) ((lambda (v.36$66) (if (pair? v.36$66) ((lambda (v.37$67) ((lambda (expr) ((lambda (v.38$68) (if (null? v.38$68) (cons (cons-source (rename$24 (quote test)) (cons-source #f (cons-source expect (cons-source expr (quote ()) (quote (expr))) (quote (expect expr))) (quote (#f expect expr))) (quote (test #f expect expr))) #f) #f)) (cdr v.36$66))) v.37$67)) (car v.36$66)) #f)) (cdr v.34$64))) v.35$65)) (car v.34$64)) #f)) (cdr expr$23))))))