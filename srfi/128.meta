;; This file was automatically generated by the Cyclone Scheme compiler
((with-hash-salt lambda (expr$94 rename$95 compare$96) (car ((lambda (tmp$110) (if tmp$110 tmp$110 (cons (error "no expansion for" expr$94) #f))) ((lambda (v.1$102) (if (pair? v.1$102) ((lambda (v.2$103) ((lambda (new-salt) ((lambda (v.3$104) (if (pair? v.3$104) ((lambda (v.4$105) ((lambda (hash-func) ((lambda (v.5$106) (if (pair? v.5$106) ((lambda (v.6$107) ((lambda (obj) ((lambda (v.7$108) (if (null? v.7$108) (cons (cons-source (rename$95 (quote parameterize)) (cons-source (cons-source (cons-source (rename$95 (quote %salt%)) (cons-source new-salt (quote ()) (quote (new-salt))) (quote (%salt% new-salt))) (quote ()) (quote ((%salt% new-salt)))) (cons-source (cons-source hash-func (cons-source obj (quote ()) (quote (obj))) (quote (hash-func obj))) (quote ()) (quote ((hash-func obj)))) (quote (((%salt% new-salt)) (hash-func obj)))) (quote (parameterize ((%salt% new-salt)) (hash-func obj)))) #f) #f)) (cdr v.5$106))) v.6$107)) (car v.5$106)) #f)) (cdr v.3$104))) v.4$105)) (car v.3$104)) #f)) (cdr v.1$102))) v.2$103)) (car v.1$102)) #f)) (cdr expr$94))))) (hash-salt lambda (expr$77 rename$78 compare$79) (car ((lambda (tmp$87) (if tmp$87 tmp$87 (cons (error "no expansion for" expr$77) #f))) ((lambda (v.1$85) (if (null? v.1$85) (cons (cons-source (rename$78 (quote %salt%)) (quote ()) (quote (%salt%))) #f) #f)) (cdr expr$77))))) (hash-bound lambda (expr$60 rename$61 compare$62) (car ((lambda (tmp$70) (if tmp$70 tmp$70 (cons (error "no expansion for" expr$60) #f))) ((lambda (v.1$68) (if (null? v.1$68) (cons 33554432 #f) #f)) (cdr expr$60))))) (comparator-if<=> lambda (expr$5 rename$6 compare$7) (car ((lambda (tmp$38) (if tmp$38 tmp$38 ((lambda (tmp$47) (if tmp$47 tmp$47 (cons (error "no expansion for" expr$5) #f))) ((lambda (v.1$13) (if (pair? v.1$13) ((lambda (v.2$14) ((lambda (comparator) ((lambda (v.3$15) (if (pair? v.3$15) ((lambda (v.4$16) ((lambda (a) ((lambda (v.5$17) (if (pair? v.5$17) ((lambda (v.6$18) ((lambda (b) ((lambda (v.7$19) (if (pair? v.7$19) ((lambda (v.8$20) ((lambda (less) ((lambda (v.9$21) (if (pair? v.9$21) ((lambda (v.10$22) ((lambda (equal) ((lambda (v.11$23) (if (pair? v.11$23) ((lambda (v.12$24) ((lambda (greater) ((lambda (v.13$25) (if (null? v.13$25) (cons (cons-source (rename$6 (quote cond)) (cons-source (cons-source (cons-source (rename$6 (quote =?)) (cons-source comparator (cons-source a (cons-source b (quote ()) (quote (b))) (quote (a b))) (quote (comparator a b))) (quote (=? comparator a b))) (cons-source equal (quote ()) (quote (equal))) (quote ((=? comparator a b) equal))) (cons-source (cons-source (cons-source (rename$6 (quote <?)) (cons-source comparator (cons-source a (cons-source b (quote ()) (quote (b))) (quote (a b))) (quote (comparator a b))) (quote (<? comparator a b))) (cons-source less (quote ()) (quote (less))) (quote ((<? comparator a b) less))) (cons-source (cons-source (rename$6 (quote else)) (cons-source greater (quote ()) (quote (greater))) (quote (else greater))) (quote ()) (quote ((else greater)))) (quote (((<? comparator a b) less) (else greater)))) (quote (((=? comparator a b) equal) ((<? comparator a b) less) (else greater)))) (quote (cond ((=? comparator a b) equal) ((<? comparator a b) less) (else greater)))) #f) #f)) (cdr v.11$23))) v.12$24)) (car v.11$23)) #f)) (cdr v.9$21))) v.10$22)) (car v.9$21)) #f)) (cdr v.7$19))) v.8$20)) (car v.7$19)) #f)) (cdr v.5$17))) v.6$18)) (car v.5$17)) #f)) (cdr v.3$15))) v.4$16)) (car v.3$15)) #f)) (cdr v.1$13))) v.2$14)) (car v.1$13)) #f)) (cdr expr$5))))) ((lambda (v.14$26) (if (pair? v.14$26) ((lambda (v.15$27) ((lambda (a) ((lambda (v.16$28) (if (pair? v.16$28) ((lambda (v.17$29) ((lambda (b) ((lambda (v.18$30) (if (pair? v.18$30) ((lambda (v.19$31) ((lambda (less) ((lambda (v.20$32) (if (pair? v.20$32) ((lambda (v.21$33) ((lambda (equal) ((lambda (v.22$34) (if (pair? v.22$34) ((lambda (v.23$35) ((lambda (greater) ((lambda (v.24$36) (if (null? v.24$36) (cons (cons-source (rename$6 (quote comparator-if<=>)) (cons-source (cons-source (rename$6 (quote make-default-comparator)) (quote ()) (quote (make-default-comparator))) (cons-source a (cons-source b (cons-source less (cons-source equal (cons-source greater (quote ()) (quote (greater))) (quote (equal greater))) (quote (less equal greater))) (quote (b less equal greater))) (quote (a b less equal greater))) (quote ((make-default-comparator) a b less equal greater))) (quote (comparator-if<=> (make-default-comparator) a b less equal greater))) #f) #f)) (cdr v.22$34))) v.23$35)) (car v.22$34)) #f)) (cdr v.20$32))) v.21$33)) (car v.20$32)) #f)) (cdr v.18$30))) v.19$31)) (car v.18$30)) #f)) (cdr v.16$28))) v.17$29)) (car v.16$28)) #f)) (cdr v.14$26))) v.15$27)) (car v.14$26)) #f)) (cdr expr$5))))))