;; This file was automatically generated by the Cyclone Scheme compiler
((and-let* lambda (expr rename compare) (car ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp ((lambda (tmp) (if tmp tmp (cons (error "no expansion for" expr) #f))) ((lambda (v.1) (if (pair? v.1) ((lambda (v.2) (if (pair? v.2) ((lambda (v.3) ((lambda (expr) ((lambda (v.4) ((lambda (rest) ((lambda (v.5) ((lambda (body) (cons (cons-source (rename (quote let)) (cons-source (cons-source (cons-source (rename (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename (quote and)) (cons-source (rename (quote tmp)) (cons-source (cons-source (rename (quote and-let*)) (cons-source rest body (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (tmp (and-let* rest . body)))) (quote (and tmp (and-let* rest . body)))) (quote ()) (quote ((and tmp (and-let* rest . body))))) (quote (((tmp expr)) (and tmp (and-let* rest . body))))) (quote (let ((tmp expr)) (and tmp (and-let* rest . body))))) #f)) v.5)) (cdr v.1))) v.4)) (cdr v.2))) v.3)) (car v.2)) #f)) (car v.1)) #f)) (cdr expr))))) ((lambda (v.6) (if (pair? v.6) ((lambda (v.7) (if (pair? v.7) ((lambda (v.8) (if (pair? v.8) ((lambda (v.9) ((lambda (expr) ((lambda (v.10) (if (null? v.10) ((lambda (v.11) ((lambda (rest) ((lambda (v.12) ((lambda (body) (cons (cons-source (rename (quote let)) (cons-source (cons-source (cons-source (rename (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename (quote and)) (cons-source (rename (quote tmp)) (cons-source (cons-source (rename (quote and-let*)) (cons-source rest body (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (tmp (and-let* rest . body)))) (quote (and tmp (and-let* rest . body)))) (quote ()) (quote ((and tmp (and-let* rest . body))))) (quote (((tmp expr)) (and tmp (and-let* rest . body))))) (quote (let ((tmp expr)) (and tmp (and-let* rest . body))))) #f)) v.12)) (cdr v.6))) v.11)) (cdr v.7)) #f)) (cdr v.8))) v.9)) (car v.8)) #f)) (car v.7)) #f)) (car v.6)) #f)) (cdr expr))))) ((lambda (v.13) (if (pair? v.13) ((lambda (v.14) (if (pair? v.14) ((lambda (v.15) (if (pair? v.15) ((lambda (v.16) ((lambda (var) ((lambda (v.17) (if (pair? v.17) ((lambda (v.18) ((lambda (expr) ((lambda (v.19) (if (null? v.19) ((lambda (v.20) ((lambda (rest) ((lambda (v.21) ((lambda (body) (cons (cons-source (rename (quote let)) (cons-source (cons-source (cons-source var (cons-source expr (quote ()) (quote (expr))) (quote (var expr))) (quote ()) (quote ((var expr)))) (cons-source (cons-source (rename (quote and)) (cons-source var (cons-source (cons-source (rename (quote and-let*)) (cons-source rest body (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (var (and-let* rest . body)))) (quote (and var (and-let* rest . body)))) (quote ()) (quote ((and var (and-let* rest . body))))) (quote (((var expr)) (and var (and-let* rest . body))))) (quote (let ((var expr)) (and var (and-let* rest . body))))) #f)) v.21)) (cdr v.13))) v.20)) (cdr v.14)) #f)) (cdr v.17))) v.18)) (car v.17)) #f)) (cdr v.15))) v.16)) (car v.15)) #f)) (car v.14)) #f)) (car v.13)) #f)) (cdr expr))))) ((lambda (v.22) (if (pair? v.22) ((lambda (v.23) (if (pair? v.23) ((lambda (v.24) ((lambda (expr) ((lambda (v.25) (if (null? v.25) ((lambda (v.26) (if (null? v.26) (cons (cons-source (rename (quote let)) (cons-source (cons-source (cons-source (rename (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename (quote and)) (cons-source (rename (quote tmp)) (quote ()) (quote (tmp))) (quote (and tmp))) (quote ()) (quote ((and tmp)))) (quote (((tmp expr)) (and tmp)))) (quote (let ((tmp expr)) (and tmp)))) #f) #f)) (cdr v.22)) #f)) (cdr v.23))) v.24)) (car v.23)) #f)) (car v.22)) #f)) (cdr expr))))) ((lambda (v.27) (if (pair? v.27) ((lambda (v.28) (if (pair? v.28) ((lambda (v.29) (if (pair? v.29) ((lambda (v.30) ((lambda (expr) ((lambda (v.31) (if (null? v.31) ((lambda (v.32) (if (null? v.32) ((lambda (v.33) (if (null? v.33) (cons (cons-source (rename (quote let)) (cons-source (cons-source (cons-source (rename (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename (quote and)) (cons-source (rename (quote tmp)) (quote ()) (quote (tmp))) (quote (and tmp))) (quote ()) (quote ((and tmp)))) (quote (((tmp expr)) (and tmp)))) (quote (let ((tmp expr)) (and tmp)))) #f) #f)) (cdr v.27)) #f)) (cdr v.28)) #f)) (cdr v.29))) v.30)) (car v.29)) #f)) (car v.28)) #f)) (car v.27)) #f)) (cdr expr))))) ((lambda (v.34) (if (pair? v.34) ((lambda (v.35) (if (pair? v.35) ((lambda (v.36) (if (pair? v.36) ((lambda (v.37) ((lambda (var) ((lambda (v.38) (if (pair? v.38) ((lambda (v.39) ((lambda (expr) ((lambda (v.40) (if (null? v.40) ((lambda (v.41) (if (null? v.41) ((lambda (v.42) (if (null? v.42) (cons (cons-source (rename (quote let)) (cons-source (cons-source (cons-source var (cons-source expr (quote ()) (quote (expr))) (quote (var expr))) (quote ()) (quote ((var expr)))) (cons-source (cons-source (rename (quote and)) (cons-source var (quote ()) (quote (var))) (quote (and var))) (quote ()) (quote ((and var)))) (quote (((var expr)) (and var)))) (quote (let ((var expr)) (and var)))) #f) #f)) (cdr v.34)) #f)) (cdr v.35)) #f)) (cdr v.38))) v.39)) (car v.38)) #f)) (cdr v.36))) v.37)) (car v.36)) #f)) (car v.35)) #f)) (car v.34)) #f)) (cdr expr))))) ((lambda (v.43) (if (pair? v.43) ((lambda (v.44) (if (null? v.44) ((lambda (v.45) (if (list? v.45) ((lambda (body) (cons (cons-source (rename (quote begin)) body (quote (begin body ...))) #f)) v.45) #f)) (cdr v.43)) #f)) (car v.43)) #f)) (cdr expr))))) ((lambda (v.46) (if (pair? v.46) ((lambda (v.47) (if (null? v.47) ((lambda (v.48) (if (null? v.48) (cons #t #f) #f)) (cdr v.46)) #f)) (car v.46)) #f)) (cdr expr))))))