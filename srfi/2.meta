;; This file was automatically generated by the Cyclone Scheme compiler
((and-let* lambda (expr$5 rename$6 compare$7) (car ((lambda (tmp$62) (if tmp$62 tmp$62 ((lambda (tmp$68) (if tmp$68 tmp$68 ((lambda (tmp$74) (if tmp$74 tmp$74 ((lambda (tmp$84) (if tmp$84 tmp$84 ((lambda (tmp$93) (if tmp$93 tmp$93 ((lambda (tmp$100) (if tmp$100 tmp$100 ((lambda (tmp$108) (if tmp$108 tmp$108 ((lambda (tmp$115) (if tmp$115 tmp$115 (cons (error "no expansion for" expr$5) #f))) ((lambda (v.1$13) (if (pair? v.1$13) ((lambda (v.2$14) (if (pair? v.2$14) ((lambda (v.3$15) ((lambda (expr) ((lambda (v.4$16) ((lambda (rest) ((lambda (v.5$17) ((lambda (body) (cons (cons-source (rename$6 (quote let)) (cons-source (cons-source (cons-source (rename$6 (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6 (quote and)) (cons-source (rename$6 (quote tmp)) (cons-source (cons-source (rename$6 (quote and-let*)) (cons-source rest body (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (tmp (and-let* rest . body)))) (quote (and tmp (and-let* rest . body)))) (quote ()) (quote ((and tmp (and-let* rest . body))))) (quote (((tmp expr)) (and tmp (and-let* rest . body))))) (quote (let ((tmp expr)) (and tmp (and-let* rest . body))))) #f)) v.5$17)) (cdr v.1$13))) v.4$16)) (cdr v.2$14))) v.3$15)) (car v.2$14)) #f)) (car v.1$13)) #f)) (cdr expr$5))))) ((lambda (v.6$18) (if (pair? v.6$18) ((lambda (v.7$19) (if (pair? v.7$19) ((lambda (v.8$20) (if (pair? v.8$20) ((lambda (v.9$21) ((lambda (expr) ((lambda (v.10$22) (if (null? v.10$22) ((lambda (v.11$23) ((lambda (rest) ((lambda (v.12$24) ((lambda (body) (cons (cons-source (rename$6 (quote let)) (cons-source (cons-source (cons-source (rename$6 (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6 (quote and)) (cons-source (rename$6 (quote tmp)) (cons-source (cons-source (rename$6 (quote and-let*)) (cons-source rest body (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (tmp (and-let* rest . body)))) (quote (and tmp (and-let* rest . body)))) (quote ()) (quote ((and tmp (and-let* rest . body))))) (quote (((tmp expr)) (and tmp (and-let* rest . body))))) (quote (let ((tmp expr)) (and tmp (and-let* rest . body))))) #f)) v.12$24)) (cdr v.6$18))) v.11$23)) (cdr v.7$19)) #f)) (cdr v.8$20))) v.9$21)) (car v.8$20)) #f)) (car v.7$19)) #f)) (car v.6$18)) #f)) (cdr expr$5))))) ((lambda (v.13$25) (if (pair? v.13$25) ((lambda (v.14$26) (if (pair? v.14$26) ((lambda (v.15$27) (if (pair? v.15$27) ((lambda (v.16$28) ((lambda (var) ((lambda (v.17$29) (if (pair? v.17$29) ((lambda (v.18$30) ((lambda (expr) ((lambda (v.19$31) (if (null? v.19$31) ((lambda (v.20$32) ((lambda (rest) ((lambda (v.21$33) ((lambda (body) (cons (cons-source (rename$6 (quote let)) (cons-source (cons-source (cons-source var (cons-source expr (quote ()) (quote (expr))) (quote (var expr))) (quote ()) (quote ((var expr)))) (cons-source (cons-source (rename$6 (quote and)) (cons-source var (cons-source (cons-source (rename$6 (quote and-let*)) (cons-source rest body (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (var (and-let* rest . body)))) (quote (and var (and-let* rest . body)))) (quote ()) (quote ((and var (and-let* rest . body))))) (quote (((var expr)) (and var (and-let* rest . body))))) (quote (let ((var expr)) (and var (and-let* rest . body))))) #f)) v.21$33)) (cdr v.13$25))) v.20$32)) (cdr v.14$26)) #f)) (cdr v.17$29))) v.18$30)) (car v.17$29)) #f)) (cdr v.15$27))) v.16$28)) (car v.15$27)) #f)) (car v.14$26)) #f)) (car v.13$25)) #f)) (cdr expr$5))))) ((lambda (v.22$34) (if (pair? v.22$34) ((lambda (v.23$35) (if (pair? v.23$35) ((lambda (v.24$36) ((lambda (expr) ((lambda (v.25$37) (if (null? v.25$37) ((lambda (v.26$38) (if (null? v.26$38) (cons (cons-source (rename$6 (quote let)) (cons-source (cons-source (cons-source (rename$6 (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6 (quote and)) (cons-source (rename$6 (quote tmp)) (quote ()) (quote (tmp))) (quote (and tmp))) (quote ()) (quote ((and tmp)))) (quote (((tmp expr)) (and tmp)))) (quote (let ((tmp expr)) (and tmp)))) #f) #f)) (cdr v.22$34)) #f)) (cdr v.23$35))) v.24$36)) (car v.23$35)) #f)) (car v.22$34)) #f)) (cdr expr$5))))) ((lambda (v.27$39) (if (pair? v.27$39) ((lambda (v.28$40) (if (pair? v.28$40) ((lambda (v.29$41) (if (pair? v.29$41) ((lambda (v.30$42) ((lambda (expr) ((lambda (v.31$43) (if (null? v.31$43) ((lambda (v.32$44) (if (null? v.32$44) ((lambda (v.33$45) (if (null? v.33$45) (cons (cons-source (rename$6 (quote let)) (cons-source (cons-source (cons-source (rename$6 (quote tmp)) (cons-source expr (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6 (quote and)) (cons-source (rename$6 (quote tmp)) (quote ()) (quote (tmp))) (quote (and tmp))) (quote ()) (quote ((and tmp)))) (quote (((tmp expr)) (and tmp)))) (quote (let ((tmp expr)) (and tmp)))) #f) #f)) (cdr v.27$39)) #f)) (cdr v.28$40)) #f)) (cdr v.29$41))) v.30$42)) (car v.29$41)) #f)) (car v.28$40)) #f)) (car v.27$39)) #f)) (cdr expr$5))))) ((lambda (v.34$46) (if (pair? v.34$46) ((lambda (v.35$47) (if (pair? v.35$47) ((lambda (v.36$48) (if (pair? v.36$48) ((lambda (v.37$49) ((lambda (var) ((lambda (v.38$50) (if (pair? v.38$50) ((lambda (v.39$51) ((lambda (expr) ((lambda (v.40$52) (if (null? v.40$52) ((lambda (v.41$53) (if (null? v.41$53) ((lambda (v.42$54) (if (null? v.42$54) (cons (cons-source (rename$6 (quote let)) (cons-source (cons-source (cons-source var (cons-source expr (quote ()) (quote (expr))) (quote (var expr))) (quote ()) (quote ((var expr)))) (cons-source (cons-source (rename$6 (quote and)) (cons-source var (quote ()) (quote (var))) (quote (and var))) (quote ()) (quote ((and var)))) (quote (((var expr)) (and var)))) (quote (let ((var expr)) (and var)))) #f) #f)) (cdr v.34$46)) #f)) (cdr v.35$47)) #f)) (cdr v.38$50))) v.39$51)) (car v.38$50)) #f)) (cdr v.36$48))) v.37$49)) (car v.36$48)) #f)) (car v.35$47)) #f)) (car v.34$46)) #f)) (cdr expr$5))))) ((lambda (v.43$55) (if (pair? v.43$55) ((lambda (v.44$56) (if (null? v.44$56) ((lambda (v.45$57) (if (list? v.45$57) ((lambda (body) (cons (cons-source (rename$6 (quote begin)) body (quote (begin body ...))) #f)) v.45$57) #f)) (cdr v.43$55)) #f)) (car v.43$55)) #f)) (cdr expr$5))))) ((lambda (v.46$58) (if (pair? v.46$58) ((lambda (v.47$59) (if (null? v.47$59) ((lambda (v.48$60) (if (null? v.48$60) (cons #t #f) #f)) (cdr v.46$58)) #f)) (car v.46$58)) #f)) (cdr expr$5))))))