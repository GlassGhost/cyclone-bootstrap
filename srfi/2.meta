;; This file was automatically generated by the Cyclone Scheme compiler
((and-let* lambda (expr$5$63 rename$6$62 compare$7$61) (car ((lambda (tmp$65$73) (if tmp$65$73 tmp$65$73 ((lambda (tmp$75$84) (if tmp$75$84 tmp$75$84 ((lambda (tmp$86$106) (if tmp$86$106 tmp$86$106 ((lambda (tmp$108$124) (if tmp$108$124 tmp$108$124 ((lambda (tmp$126$138) (if tmp$126$138 tmp$126$138 ((lambda (tmp$140$160) (if tmp$140$160 tmp$140$160 ((lambda (tmp$162$178) (if tmp$162$178 tmp$162$178 ((lambda (tmp$180$192) (if tmp$180$192 tmp$180$192 (cons (error "no expansion for" expr$5$63) #f))) ((lambda (v.1$13$182) (if (pair? v.1$13$182) ((lambda (v.2$14$184) (if (pair? v.2$14$184) ((lambda (v.3$15$186) ((lambda (expr$187) ((lambda (v.4$16$188) ((lambda (rest$189) ((lambda (v.5$17$190) ((lambda (body$191) (cons (cons-source (rename$6$62 (quote let)) (cons-source (cons-source (cons-source (rename$6$62 (quote tmp)) (cons-source expr$187 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6$62 (quote and)) (cons-source (rename$6$62 (quote tmp)) (cons-source (cons-source (rename$6$62 (quote and-let*)) (cons-source rest$189 body$191 (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (tmp (and-let* rest . body)))) (quote (and tmp (and-let* rest . body)))) (quote ()) (quote ((and tmp (and-let* rest . body))))) (quote (((tmp expr)) (and tmp (and-let* rest . body))))) (quote (let ((tmp expr)) (and tmp (and-let* rest . body))))) #f)) v.5$17$190)) (cdr v.1$13$182))) v.4$16$188)) (cdr v.2$14$184))) v.3$15$186)) (car v.2$14$184)) #f)) (car v.1$13$182)) #f)) (cdr expr$5$63))))) ((lambda (v.6$18$164) (if (pair? v.6$18$164) ((lambda (v.7$19$166) (if (pair? v.7$19$166) ((lambda (v.8$20$168) (if (pair? v.8$20$168) ((lambda (v.9$21$170) ((lambda (expr$171) ((lambda (v.10$22$172) (if (null? v.10$22$172) ((lambda (v.11$23$174) ((lambda (rest$175) ((lambda (v.12$24$176) ((lambda (body$177) (cons (cons-source (rename$6$62 (quote let)) (cons-source (cons-source (cons-source (rename$6$62 (quote tmp)) (cons-source expr$171 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6$62 (quote and)) (cons-source (rename$6$62 (quote tmp)) (cons-source (cons-source (rename$6$62 (quote and-let*)) (cons-source rest$175 body$177 (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (tmp (and-let* rest . body)))) (quote (and tmp (and-let* rest . body)))) (quote ()) (quote ((and tmp (and-let* rest . body))))) (quote (((tmp expr)) (and tmp (and-let* rest . body))))) (quote (let ((tmp expr)) (and tmp (and-let* rest . body))))) #f)) v.12$24$176)) (cdr v.6$18$164))) v.11$23$174)) (cdr v.7$19$166)) #f)) (cdr v.8$20$168))) v.9$21$170)) (car v.8$20$168)) #f)) (car v.7$19$166)) #f)) (car v.6$18$164)) #f)) (cdr expr$5$63))))) ((lambda (v.13$25$142) (if (pair? v.13$25$142) ((lambda (v.14$26$144) (if (pair? v.14$26$144) ((lambda (v.15$27$146) (if (pair? v.15$27$146) ((lambda (v.16$28$148) ((lambda (var$149) ((lambda (v.17$29$150) (if (pair? v.17$29$150) ((lambda (v.18$30$152) ((lambda (expr$153) ((lambda (v.19$31$154) (if (null? v.19$31$154) ((lambda (v.20$32$156) ((lambda (rest$157) ((lambda (v.21$33$158) ((lambda (body$159) (cons (cons-source (rename$6$62 (quote let)) (cons-source (cons-source (cons-source var$149 (cons-source expr$153 (quote ()) (quote (expr))) (quote (var expr))) (quote ()) (quote ((var expr)))) (cons-source (cons-source (rename$6$62 (quote and)) (cons-source var$149 (cons-source (cons-source (rename$6$62 (quote and-let*)) (cons-source rest$157 body$159 (quote (rest . body))) (quote (and-let* rest . body))) (quote ()) (quote ((and-let* rest . body)))) (quote (var (and-let* rest . body)))) (quote (and var (and-let* rest . body)))) (quote ()) (quote ((and var (and-let* rest . body))))) (quote (((var expr)) (and var (and-let* rest . body))))) (quote (let ((var expr)) (and var (and-let* rest . body))))) #f)) v.21$33$158)) (cdr v.13$25$142))) v.20$32$156)) (cdr v.14$26$144)) #f)) (cdr v.17$29$150))) v.18$30$152)) (car v.17$29$150)) #f)) (cdr v.15$27$146))) v.16$28$148)) (car v.15$27$146)) #f)) (car v.14$26$144)) #f)) (car v.13$25$142)) #f)) (cdr expr$5$63))))) ((lambda (v.22$34$128) (if (pair? v.22$34$128) ((lambda (v.23$35$130) (if (pair? v.23$35$130) ((lambda (v.24$36$132) ((lambda (expr$133) ((lambda (v.25$37$134) (if (null? v.25$37$134) ((lambda (v.26$38$136) (if (null? v.26$38$136) (cons (cons-source (rename$6$62 (quote let)) (cons-source (cons-source (cons-source (rename$6$62 (quote tmp)) (cons-source expr$133 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6$62 (quote and)) (cons-source (rename$6$62 (quote tmp)) (quote ()) (quote (tmp))) (quote (and tmp))) (quote ()) (quote ((and tmp)))) (quote (((tmp expr)) (and tmp)))) (quote (let ((tmp expr)) (and tmp)))) #f) #f)) (cdr v.22$34$128)) #f)) (cdr v.23$35$130))) v.24$36$132)) (car v.23$35$130)) #f)) (car v.22$34$128)) #f)) (cdr expr$5$63))))) ((lambda (v.27$39$110) (if (pair? v.27$39$110) ((lambda (v.28$40$112) (if (pair? v.28$40$112) ((lambda (v.29$41$114) (if (pair? v.29$41$114) ((lambda (v.30$42$116) ((lambda (expr$117) ((lambda (v.31$43$118) (if (null? v.31$43$118) ((lambda (v.32$44$120) (if (null? v.32$44$120) ((lambda (v.33$45$122) (if (null? v.33$45$122) (cons (cons-source (rename$6$62 (quote let)) (cons-source (cons-source (cons-source (rename$6$62 (quote tmp)) (cons-source expr$117 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr)))) (cons-source (cons-source (rename$6$62 (quote and)) (cons-source (rename$6$62 (quote tmp)) (quote ()) (quote (tmp))) (quote (and tmp))) (quote ()) (quote ((and tmp)))) (quote (((tmp expr)) (and tmp)))) (quote (let ((tmp expr)) (and tmp)))) #f) #f)) (cdr v.27$39$110)) #f)) (cdr v.28$40$112)) #f)) (cdr v.29$41$114))) v.30$42$116)) (car v.29$41$114)) #f)) (car v.28$40$112)) #f)) (car v.27$39$110)) #f)) (cdr expr$5$63))))) ((lambda (v.34$46$88) (if (pair? v.34$46$88) ((lambda (v.35$47$90) (if (pair? v.35$47$90) ((lambda (v.36$48$92) (if (pair? v.36$48$92) ((lambda (v.37$49$94) ((lambda (var$95) ((lambda (v.38$50$96) (if (pair? v.38$50$96) ((lambda (v.39$51$98) ((lambda (expr$99) ((lambda (v.40$52$100) (if (null? v.40$52$100) ((lambda (v.41$53$102) (if (null? v.41$53$102) ((lambda (v.42$54$104) (if (null? v.42$54$104) (cons (cons-source (rename$6$62 (quote let)) (cons-source (cons-source (cons-source var$95 (cons-source expr$99 (quote ()) (quote (expr))) (quote (var expr))) (quote ()) (quote ((var expr)))) (cons-source (cons-source (rename$6$62 (quote and)) (cons-source var$95 (quote ()) (quote (var))) (quote (and var))) (quote ()) (quote ((and var)))) (quote (((var expr)) (and var)))) (quote (let ((var expr)) (and var)))) #f) #f)) (cdr v.34$46$88)) #f)) (cdr v.35$47$90)) #f)) (cdr v.38$50$96))) v.39$51$98)) (car v.38$50$96)) #f)) (cdr v.36$48$92))) v.37$49$94)) (car v.36$48$92)) #f)) (car v.35$47$90)) #f)) (car v.34$46$88)) #f)) (cdr expr$5$63))))) ((lambda (v.43$55$77) (if (pair? v.43$55$77) ((lambda (v.44$56$79) (if (null? v.44$56$79) ((lambda (v.45$57$81) (if (list? v.45$57$81) ((lambda (body$83) (cons (cons-source (rename$6$62 (quote begin)) body$83 (quote (begin body ...))) #f)) v.45$57$81) #f)) (cdr v.43$55$77)) #f)) (car v.43$55$77)) #f)) (cdr expr$5$63))))) ((lambda (v.46$58$67) (if (pair? v.46$58$67) ((lambda (v.47$59$69) (if (null? v.47$59$69) ((lambda (v.48$60$71) (if (null? v.48$60$71) (cons #t #f) #f)) (cdr v.46$58$67)) #f)) (car v.46$58$67)) #f)) (cdr expr$5$63))))))