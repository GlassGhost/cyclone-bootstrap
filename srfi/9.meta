;; This file was automatically generated by the Cyclone Scheme compiler
((define-record-type lambda (expr rename compare) (let* ((name+parent (cadr expr)) (name (if (pair? name+parent) (car name+parent) name+parent)) (parent (and (pair? name+parent) (cadr name+parent))) (name-str (symbol->string name)) (procs (cddr expr)) (make (caar procs)) (make-fields (cdar procs)) (pred (cadr procs)) (fields (cddr procs)) (_define (rename (quote define))) (_lambda (rename (quote lambda))) (_let (rename (quote let))) (_register (rename (quote register-simple-type))) (_slot-set! (rename (quote slot-set!))) (_type_slot_offset (rename (quote type-slot-offset)))) (if (eq? name make) (error "same binding for record rtd and constructor" name)) (quasiquote ((unquote (rename (quote begin))) ((unquote _define) (unquote name) ((unquote _register) (unquote name) (unquote parent) (quote (unquote (map car fields))))) ((unquote _define) (unquote pred) ((unquote (rename (quote make-type-predicate))) (unquote pred) (unquote name))) (unquote-splicing (map (lambda (f) (and (pair? f) (pair? (cdr f)) (pair? (cddr f)) (quasiquote ((unquote _define) (unquote (car (cddr f))) ((unquote (rename (quote make-setter))) (unquote (symbol->string (car (cddr f)))) (unquote name) ((unquote _type_slot_offset) (unquote name) (quote (unquote (car f))))))))) fields)) ((unquote _define) (unquote make) (unquote (let lp ((ls make-fields) (sets (quote ()))) (cond ((null? ls) (quasiquote ((unquote _let) ((%make ((unquote (rename (quote make-constructor))) (unquote (symbol->string make)) (unquote name)))) ((unquote _lambda) (unquote make-fields) ((unquote _let) ((res (%make))) (unquote-splicing sets) res))))) (else (let ((field (assq (car ls) fields))) (cond ((not field) (error "unknown record field in constructor" (car ls))) ((pair? (cddr field)) (lp (cdr ls) (cons (quasiquote ((unquote (car (cddr field))) res (unquote (car ls)))) sets))) (else (lp (cdr ls) (cons (quasiquote ((unquote _slot-set!) (unquote name) res ((unquote _type_slot_offset) (unquote name) (quote (unquote (car ls)))) (unquote (car ls)))) sets)))))))))))))))
