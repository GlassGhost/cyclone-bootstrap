#
# CORS header support
#
# One way to use this is by placing it into a file called "cors_support"
# under your Nginx configuration directory and placing the following
# statement inside your **location** block(s):
#
#   include cors_support;
#
# As of Nginx 1.7.5, add_header supports an "always" parameter which
# allows CORS to work if the backend returns 4xx or 5xx status code.
#
# For more information on CORS, please see: http://enable-cors.org/
# Based on Gist: https://gist.github.com/Stanback/7145487
# Forked from this Gist: https://gist.github.com/michiel/1064640
#

location / {
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
}

#set $coop '';
#if ($http_origin ~ '^https?://(localhost|www\.yourdomain\.com|www\.yourotherdomain\.com)') {
#        set $coop 'true';
#}
#
#if ($coop = 'true') {
#        add_header Cross-Origin-Opener-Policy "same-origin" always;
#        add_header Cross-Origin-Embedder-Policy "require-corp" always;
#        
#        #add_header 'Access-Control-Allow-Origin' "$http_origin" always;
#        #add_header 'Access-Control-Allow-Credentials' 'true' always;
#        #add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
#        #add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
#        ## required to be able to read Authorization header in frontend
#        ##add_header 'Access-Control-Expose-Headers' 'Authorization' always;
#}

#if ($request_method = 'OPTIONS') {
#        # Tell client that this pre-flight info is valid for 20 days
#        add_header 'Access-Control-Max-Age' 1728000;
#        add_header 'Content-Type' 'text/plain charset=UTF-8';
#        add_header 'Content-Length' 0;
#        return 204;
#}
